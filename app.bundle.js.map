{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://los-app/./src/modules/auth.js","webpack://los-app/./src/modules/registration.js","webpack://los-app/./src/modules/fixtures.js","webpack://los-app/./src/modules/scores/liveScoring.js","webpack://los-app/./src/modules/scores/statisticsEngine.js","webpack://los-app/./src/modules/scores/historyManager.js","webpack://los-app/./src/modules/scores/index.js","webpack://los-app/./src/modules/ui.js","webpack://los-app/./src/modules/gameLogic.js","webpack://los-app/./src/modules/mobileNavigation.js","webpack://los-app/./src/modules/admin/userManagement.js","webpack://los-app/./src/modules/admin/teamOperations.js","webpack://los-app/./src/modules/admin/scheduling.js","webpack://los-app/./src/modules/admin/audit.js","webpack://los-app/./src/modules/admin/index.js","webpack://los-app/./src/modules/database.js","webpack://los-app/./src/modules/api/footballWebPages.js","webpack://los-app/./src/modules/api/vidiprinter.js","webpack://los-app/./src/modules/api/dataProcessor.js","webpack://los-app/./src/modules/api/index.js","webpack://los-app/./src/modules/utilities.js","webpack://los-app/./src/modules/state.js","webpack://los-app/./src/app.js"],"sourcesContent":["// Authentication Module\n// Handles all user authentication, admin checks, and session management\n\nclass AuthManager {\n    constructor() {\n        this.db = null;\n        this.auth = null;\n        this.currentUser = null;\n        this.adminStatus = false;\n        this.adminUserId = null;\n        this.tokenRefreshInterval = null;\n        this.sessionCheckInterval = null;\n        this.sessionWarningInterval = null;\n        this.isLoggingIn = false; // New flag to prevent multiple redirects\n        this.redirectingToDashboard = false; // New flag to prevent multiple redirects\n    }\n\n    // Initialize the auth manager\n    async initialize(db, auth) {\n        this.db = db;\n        this.auth = auth;\n        this.setupAuthListener();\n        this.setupAdminPageHandling();\n    }\n\n    // Initialize login page functionality\n    initializeLoginPage() {\n        console.log('🔧 Initializing login page functionality...');\n        \n        // Initialize login form handlers\n        this.initializeLoginFormHandlers();\n        \n        // Only check existing auth state if we're not already on the login page\n        // This prevents redirect loops\n        if (!(window.location.pathname.includes('login.html') || window.location.pathname.includes('/pages/login') || window.location.pathname.endsWith('/login'))) {\n            this.checkExistingAuthState();\n        } else {\n            console.log('🔍 Already on login page, skipping auth state check');\n        }\n        \n        console.log('✅ Login page initialization completed');\n    }\n\n    // Initialize login form handlers\n    initializeLoginFormHandlers() {\n        const loginForm = document.getElementById('login-form');\n        if (loginForm) {\n            loginForm.addEventListener('submit', (e) => this.handleLoginSubmit(e));\n        }\n    }\n\n    // Check existing authentication state\n    checkExistingAuthState() {\n        // Don't redirect if we're already on the login page\n        if (window.location.pathname.includes('login.html') || window.location.pathname.includes('/pages/login') || window.location.pathname.endsWith('/login')) {\n            console.log('🔍 Already on login page, skipping auth state check');\n            return;\n        }\n        \n        // Wait for Firebase auth to be properly initialized\n        if (!this.auth) {\n            console.log('⏳ Firebase auth not ready yet, waiting...');\n            setTimeout(() => this.checkExistingAuthState(), 100);\n            return;\n        }\n\n        // Check if user is already authenticated\n        const currentUser = this.auth.currentUser;\n        if (currentUser) {\n            console.log('🔍 User already logged in, redirecting to dashboard...');\n            // Redirect to dashboard if user is already logged in\n            setTimeout(() => {\n                window.location.href = '/pages/dashboard.html';\n            }, 1000);\n        } else {\n            console.log('🔍 No existing authentication found');\n        }\n    }\n\n    // Handle login form submission\n    async handleLoginSubmit(e) {\n        e.preventDefault();\n        console.log('🔧 Handling login form submission...');\n\n        // Prevent multiple submissions\n        if (this.isLoggingIn) {\n            console.log('⏳ Login already in progress...');\n            return;\n        }\n        this.isLoggingIn = true;\n\n        const email = document.getElementById('login-email').value.trim();\n        const password = document.getElementById('login-password').value;\n        const submitButton = document.querySelector('#login-form button[type=\"submit\"]');\n        const errorElement = document.getElementById('login-error-message');\n\n        if (!email || !password) {\n            this.showLoginError('Please enter both email and password', errorElement);\n            this.isLoggingIn = false;\n            return;\n        }\n\n        try {\n            // Disable submit button and show loading state\n            if (submitButton) {\n                submitButton.disabled = true;\n                submitButton.textContent = 'Signing in...';\n            }\n\n            // Sign in with Firebase\n            const userCredential = await this.auth.signInWithEmailAndPassword(email, password);\n            const user = userCredential.user;\n\n            console.log('✅ User signed in successfully:', user.email);\n\n            // Clear any error messages\n            if (errorElement) {\n                errorElement.style.display = 'none';\n            }\n\n            // Don't manually redirect - let the auth state change handler manage it\n            // This prevents conflicts between manual redirects and auth state changes\n            console.log('✅ Login successful, auth state change will handle redirect');\n            \n            // Reset login state\n            this.isLoggingIn = false;\n\n        } catch (error) {\n            console.error('❌ Login error:', error);\n            \n            // Re-enable submit button\n            if (submitButton) {\n                submitButton.disabled = false;\n                submitButton.textContent = 'Sign In';\n            }\n\n            // Show error message\n            const errorMessage = this.getLoginErrorMessage(error);\n            this.showLoginError(errorMessage, errorElement);\n            \n            // Reset login state\n            this.isLoggingIn = false;\n        }\n    }\n\n    // Show login error message\n    showLoginError(message, errorElement) {\n        if (errorElement) {\n            errorElement.textContent = message;\n            errorElement.style.display = 'block';\n            setTimeout(() => {\n                errorElement.style.display = 'none';\n            }, 5000);\n        }\n    }\n\n    // Get user-friendly login error message\n    getLoginErrorMessage(error) {\n        if (error.code === 'auth/user-not-found') {\n            return 'No account found with this email address.';\n        } else if (error.code === 'auth/wrong-password') {\n            return 'Incorrect password. Please try again.';\n        } else if (error.code === 'auth/invalid-email') {\n            return 'Please enter a valid email address.';\n        } else if (error.code === 'auth/too-many-requests') {\n            return 'Too many failed attempts. Please try again later.';\n        } else if (error.code === 'auth/user-disabled') {\n            return 'This account has been disabled. Please contact support.';\n        } else {\n            return 'An error occurred during sign in. Please try again.';\n        }\n    }\n\n    // Set up Firebase auth state listener\n    setupAuthListener() {\n        if (!this.auth) {\n            console.warn('Firebase auth not available yet, retrying in 100ms');\n            setTimeout(() => this.setupAuthListener(), 100);\n            return;\n        }\n\n        console.log('🔧 Setting up Firebase auth state listener...');\n        \n        this.auth.onAuthStateChanged(user => {\n            console.log('🔄 Auth state changed - User:', user ? user.email : 'null');\n            console.log('🔄 Current redirect flags - redirectingToDashboard:', this.redirectingToDashboard, 'isLoggingIn:', this.isLoggingIn);\n            \n            // Always keep currentUser in sync with Firebase auth state\n            this.currentUser = user;\n            \n            this.handleAuthStateChange(user);\n        });\n        \n        console.log('✅ Firebase auth state listener set up successfully');\n    }\n\n    // Synchronize auth state with Firebase\n    syncAuthState() {\n        if (this.auth && this.auth.currentUser) {\n            this.currentUser = this.auth.currentUser;\n            console.log('🔄 Auth state synchronized - currentUser:', this.currentUser.email);\n        } else {\n            this.currentUser = null;\n            console.log('🔄 Auth state synchronized - no current user');\n        }\n    }\n\n    // Handle authentication state changes\n    async handleAuthStateChange(user) {\n        try {\n            // Prevent multiple auth state change handling during redirects\n            if (this.redirectingToDashboard) {\n                console.log('⏳ Already redirecting to dashboard, skipping auth state change handling');\n                return;\n            }\n            \n            console.log('🔄 Auth state change detected:', user ? `User: ${user.email}` : 'No user');\n            console.log('🔄 Current page:', window.location.pathname);\n            console.log('🔄 Current redirect flags - redirectingToDashboard:', this.redirectingToDashboard, 'isLoggingIn:', this.isLoggingIn);\n            \n            if (user) {\n                // Set redirect flag to prevent multiple handling\n                this.redirectingToDashboard = true;\n                console.log('🔄 Processing sign in for user:', user.email);\n                \n                // Handle sign in without waiting for it to complete\n                // This prevents the auth state change handler from getting stuck\n                this.handleUserSignIn(user).catch(error => {\n                    console.error('Error in handleUserSignIn:', error);\n                    // Reset redirect flag on error\n                    this.redirectingToDashboard = false;\n                });\n            } else {\n                console.log('🔄 Processing sign out');\n                this.handleUserSignOut();\n            }\n        } catch (error) {\n            console.error('Error in auth state change handler:', error);\n            // Reset redirect flag on error\n            this.redirectingToDashboard = false;\n        }\n    }\n\n    // Handle user sign in\n    async handleUserSignIn(user) {\n        console.log('🔧 Handling user sign in for:', user.email);\n        console.log('🔧 Current page:', window.location.pathname);\n        \n        // Ensure currentUser is properly set\n        this.currentUser = user;\n        \n        // Ensure database is initialized\n        if (!this.db && window.db) {\n            this.db = window.db;\n        }\n\n        const onIndexPage = window.location.pathname.endsWith('index.html') || window.location.pathname === '/';\n        const onDashboardPage = window.location.pathname.endsWith('dashboard.html');\n        const onAdminPage = window.location.pathname.endsWith('admin.html');\n        const onLoginPage = window.location.pathname.includes('login.html') || window.location.pathname.includes('/pages/login') || window.location.pathname.endsWith('/login');\n\n        console.log('🔍 Path detection - current pathname:', window.location.pathname);\n        console.log('🔍 Path detection - onIndexPage:', onIndexPage);\n        console.log('🔍 Path detection - onDashboardPage:', onDashboardPage);\n        console.log('🔍 Path detection - onAdminPage:', onAdminPage);\n        console.log('🔍 Path detection - onLoginPage:', onLoginPage);\n\n        // Initialize user logout functionality (non-blocking)\n        this.initializeUserLogout();\n\n        if (onLoginPage) {\n            console.log('🔧 User signed in from login page, redirecting to dashboard immediately...');\n            // User successfully signed in from login page, redirect to dashboard immediately\n            // Don't wait for other operations that might block the redirect\n            \n            // Set redirect flag to prevent multiple handling\n            this.redirectingToDashboard = true;\n            console.log('🔧 Set redirectingToDashboard flag to true');\n            \n            // Show success message before redirect\n            const successMessage = document.createElement('div');\n            successMessage.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 2rem; color: #155724; z-index: 9999; text-align: center;';\n            successMessage.innerHTML = '<i class=\"fas fa-check-circle\" style=\"font-size: 2rem; margin-bottom: 1rem;\"></i><br><strong>Login Successful!</strong><br>Redirecting to dashboard...';\n            document.body.appendChild(successMessage);\n            \n            // Try multiple redirect methods to ensure success\n            try {\n                // Method 1: Direct location change\n                console.log('🔄 Attempting redirect method 1: window.location.href');\n                console.log('🔄 Current location before redirect:', window.location.href);\n                console.log('🔄 Current pathname before redirect:', window.location.pathname);\n                window.location.href = '/pages/dashboard.html';\n                console.log('🔄 Redirect command executed');\n                \n                // Method 2: Backup with location.replace (more aggressive)\n                setTimeout(() => {\n                    if (window.location.pathname.includes('login')) {\n                        console.log('🔄 Attempting redirect method 2: window.location.replace');\n                        console.log('🔄 Current pathname before replace:', window.location.pathname);\n                        window.location.replace('/pages/dashboard.html');\n                        console.log('🔄 Replace command executed');\n                    }\n                }, 100);\n                \n                // Method 3: Force reload to dashboard\n                setTimeout(() => {\n                    if (window.location.pathname.includes('login')) {\n                        console.log('🔄 Attempting redirect method 3: window.location.assign');\n                        console.log('🔄 Current pathname before assign:', window.location.pathname);\n                        window.location.assign('/pages/dashboard.html');\n                        console.log('🔄 Assign command executed');\n                    }\n                }, 500);\n                \n                // Method 4: Nuclear option - force page change\n                setTimeout(() => {\n                    if (window.location.pathname.includes('login')) {\n                        console.log('⚠️ All redirect methods failed, forcing page change');\n                        console.log('🔄 Current pathname before programmatic navigation:', window.location.pathname);\n                        // Try to navigate programmatically\n                        const dashboardLink = document.createElement('a');\n                        dashboardLink.href = '/pages/dashboard.html';\n                        dashboardLink.style.display = 'none';\n                        document.body.appendChild(dashboardLink);\n                        dashboardLink.click();\n                        document.body.removeChild(dashboardLink);\n                        console.log('🔄 Programmatic navigation executed');\n                    }\n                }, 2000);\n                \n            } catch (redirectError) {\n                console.error('❌ Redirect error:', redirectError);\n                // Fallback to simple redirect\n                window.location.href = '/pages/dashboard.html';\n            }\n            \n            return;\n        }\n\n        if (onDashboardPage) {\n            console.log('🔧 User signed in on dashboard page, initializing dashboard...');\n            // Reset initialization flags when user logs in\n            if (window.resetAsItStandsInitialization) {\n                window.resetAsItStandsInitialization();\n            }\n            if (window.renderDashboard) {\n                await window.renderDashboard(user);\n            }\n            // Reset redirect flags since we're already on dashboard\n            this.redirectingToDashboard = false;\n            this.isLoggingIn = false;\n            return; // Don't redirect if already on dashboard\n        }\n\n        if (onAdminPage) {\n            await this.handleAdminPageAccess(user);\n            // Reset redirect flags after admin handling\n            this.redirectingToDashboard = false;\n            this.isLoggingIn = false;\n        }\n        \n        if (onIndexPage) {\n            console.log('🔧 User signed in on index page, redirecting to dashboard...');\n            // User signed in on main page, redirect to dashboard\n            this.redirectingToDashboard = true;\n            window.location.href = '/pages/dashboard.html';\n        }\n        \n        // Reset login flag for other cases\n        this.isLoggingIn = false;\n    }\n\n    // Handle user sign out\n    handleUserSignOut() {\n        console.log('User signed out');\n        \n        // Reset redirect flags\n        this.redirectingToDashboard = false;\n        this.isLoggingIn = false;\n        \n        this.clearAdminStatus();\n        this.stopAdminTokenRefresh();\n        this.stopAdminSessionMonitoring();\n\n        if (window.location.pathname.endsWith('admin.html')) {\n            this.showAdminLoginForm();\n        }\n    }\n\n    // Handle admin page access\n    async handleAdminPageAccess(user) {\n        console.log('On admin page, checking admin status for user:', user.uid);\n        \n        // Hide loading message first\n        const loadingElement = document.querySelector('#admin-loading');\n        if (loadingElement) {\n            loadingElement.style.display = 'none';\n        }\n\n        // Hide login form initially\n        const loginForm = document.querySelector('#admin-login-form');\n        if (loginForm) {\n            loginForm.style.display = 'none';\n        }\n\n        try {\n            const adminDoc = await this.db.collection('users').doc(user.uid).get();\n            \n            if (adminDoc.exists && adminDoc.data().isAdmin === true) {\n                await this.grantAdminAccess(user);\n            } else {\n                this.denyAdminAccess();\n            }\n        } catch (error) {\n            console.error(\"Error checking admin status:\", error);\n            this.showAdminError('Error verifying admin status. Please try again.');\n        }\n    }\n\n    // Grant admin access\n    async grantAdminAccess(user) {\n        console.log(\"Admin access granted.\");\n        \n        // Store admin status\n        this.adminStatus = true;\n        this.adminUserId = user.uid;\n        sessionStorage.setItem('adminStatus', 'true');\n        sessionStorage.setItem('adminUserId', user.uid);\n\n        // Hide login form and show admin panel\n        const loginForm = document.querySelector('#admin-login-form');\n        if (loginForm) {\n            loginForm.style.display = 'none';\n        }\n        \n        const adminPanel = document.querySelector('#admin-panel');\n        if (adminPanel) {\n            adminPanel.style.display = 'flex';\n        }\n\n        // Initialize admin functionality\n        this.initializeAdminLoginHandlers();\n        this.startAdminTokenRefresh(user);\n        this.startAdminSessionMonitoring();\n\n        // Load settings and render admin panel\n        await this.loadAdminPanelSettings();\n    }\n\n    // Deny admin access\n    denyAdminAccess() {\n        console.log(\"Admin access denied for user:\", this.currentUser?.email);\n        this.clearAdminStatus();\n        \n        this.showAdminError('Access denied. You do not have admin privileges.');\n        \n        // Redirect to home page after a delay\n        setTimeout(() => {\n            window.location.href = '/index.html';\n        }, 3000);\n    }\n\n    // Show admin error\n    showAdminError(message) {\n        const errorElement = document.querySelector('#admin-error');\n        if (errorElement) {\n            errorElement.style.display = 'block';\n            errorElement.innerHTML = `<p>${message}</p>`;\n        }\n    }\n\n    // Show admin login form\n    showAdminLoginForm() {\n        const loadingElement = document.querySelector('#admin-loading');\n        const loginForm = document.querySelector('#admin-login-form');\n        const adminPanel = document.querySelector('#admin-panel');\n        const errorElement = document.querySelector('#admin-error');\n\n        if (loadingElement) loadingElement.style.display = 'none';\n        if (loginForm) loginForm.style.display = 'block';\n        if (adminPanel) adminPanel.style.display = 'none';\n        if (errorElement) errorElement.style.display = 'none';\n\n        this.initializeAdminLoginHandlers();\n    }\n\n    // Initialize admin login handlers\n    initializeAdminLoginHandlers() {\n        const adminLoginForm = document.querySelector('#admin-login-form-element');\n        const adminLogoutBtn = document.querySelector('#admin-logout-btn');\n\n        if (adminLoginForm) {\n            adminLoginForm.removeEventListener('submit', this.handleAdminLogin.bind(this));\n            adminLoginForm.addEventListener('submit', this.handleAdminLogin.bind(this));\n        }\n\n        if (adminLogoutBtn) {\n            adminLogoutBtn.removeEventListener('click', this.handleAdminLogout.bind(this));\n            adminLogoutBtn.addEventListener('click', this.handleAdminLogout.bind(this));\n        }\n    }\n\n    // Handle admin login\n    async handleAdminLogin(e) {\n        e.preventDefault();\n        console.log('Admin login form submitted');\n\n        const email = document.querySelector('#admin-login-email').value;\n        const password = document.querySelector('#admin-login-password').value;\n        const errorMessage = document.querySelector('#admin-error-message');\n\n        // Clear previous error\n        errorMessage.textContent = '';\n\n        try {\n            // Show loading state\n            const submitButton = e.target.querySelector('button[type=\"submit\"]');\n            const originalText = submitButton.textContent;\n            submitButton.disabled = true;\n            submitButton.textContent = 'Logging in...';\n\n            // Sign in with Firebase\n            const userCredential = await this.auth.signInWithEmailAndPassword(email, password);\n            const user = userCredential.user;\n\n            // Check admin status\n            const adminDoc = await this.db.collection('users').doc(user.uid).get();\n\n            if (!adminDoc.exists || adminDoc.data().isAdmin !== true) {\n                await this.auth.signOut();\n                errorMessage.textContent = 'Access denied. You do not have admin privileges.';\n                submitButton.disabled = false;\n                submitButton.textContent = originalText;\n                return;\n            }\n\n            // Login successful - auth state change will handle the rest\n            console.log('Admin login successful');\n\n        } catch (error) {\n            console.error('Admin login error:', error);\n            this.handleAdminLoginError(error, errorMessage, submitButton, originalText);\n        }\n    }\n\n    // Handle admin login errors\n    handleAdminLoginError(error, errorMessage, submitButton, originalText) {\n        let errorMessageText = 'Login failed: ';\n        \n        if (error.code === 'auth/user-not-found') {\n            errorMessageText += 'User not found. Please check your email address.';\n        } else if (error.code === 'auth/wrong-password') {\n            errorMessageText += 'Incorrect password. Please try again.';\n        } else if (error.code === 'auth/invalid-email') {\n            errorMessageText += 'Invalid email address format.';\n        } else if (error.code === 'auth/too-many-requests') {\n            errorMessageText += 'Too many failed attempts. Please try again later.';\n        } else {\n            errorMessageText += error.message;\n        }\n\n        errorMessage.textContent = errorMessageText;\n\n        if (submitButton) {\n            submitButton.disabled = false;\n            submitButton.textContent = originalText;\n        }\n    }\n\n    // Handle admin logout\n    async handleAdminLogout() {\n        event.preventDefault();\n        event.stopPropagation();\n\n        console.log('Admin logout initiated');\n\n        // Clear all admin-related intervals\n        this.stopAdminTokenRefresh();\n        this.stopAdminSessionMonitoring();\n\n        // Clear admin status\n        this.clearAdminStatus();\n\n        // Show loading state\n        const logoutBtn = event.target;\n        const originalText = logoutBtn.innerHTML;\n        logoutBtn.disabled = true;\n        logoutBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Logging out...';\n\n        try {\n            await this.auth.signOut();\n            console.log('Admin logged out successfully, redirecting to home page');\n\n            // Show success message and redirect\n            this.showLogoutSuccessMessage();\n            setTimeout(() => {\n                window.location.href = '/index.html';\n            }, 1500);\n\n        } catch (error) {\n            console.error('Logout error:', error);\n            this.handleLogoutError(error, logoutBtn, originalText);\n        }\n    }\n\n    // Show logout success message\n    showLogoutSuccessMessage() {\n        const successMessage = document.createElement('div');\n        successMessage.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 2rem; color: #155724; z-index: 9999; text-align: center;';\n        successMessage.innerHTML = '<i class=\"fas fa-check-circle\" style=\"font-size: 2rem; margin-bottom: 1rem;\"></i><br><strong>Logged out successfully!</strong><br>Redirecting to home page...';\n        document.body.appendChild(successMessage);\n    }\n\n    // Handle logout error\n    handleLogoutError(error, logoutBtn, originalText) {\n        logoutBtn.disabled = false;\n        logoutBtn.innerHTML = originalText;\n\n        const errorMessage = document.createElement('div');\n        errorMessage.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 2rem; color: #721c24; z-index: 9999; text-align: center;';\n        errorMessage.innerHTML = `<i class=\"fas fa-exclamation-triangle\" style=\"font-size: 2rem; margin-bottom: 1rem;\"></i><br><strong>Logout failed!</strong><br>${error.message}<br><br><button onclick=\"this.parentElement.remove()\" style=\"padding: 0.5rem 1rem; background-color: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;\">Close</button>`;\n        document.body.appendChild(errorMessage);\n    }\n\n    // Initialize regular user logout functionality\n    initializeUserLogout() {\n        const logoutBtn = document.querySelector('#logout-button');\n        if (logoutBtn) {\n            logoutBtn.removeEventListener('click', this.handleUserLogout.bind(this));\n            logoutBtn.addEventListener('click', this.handleUserLogout.bind(this));\n            console.log('✅ User logout button initialized');\n        }\n    }\n\n    // Handle regular user logout\n    async handleUserLogout() {\n        console.log('User logout initiated');\n\n        const logoutBtn = document.querySelector('#logout-button');\n        const originalText = logoutBtn ? logoutBtn.textContent : 'Logout';\n        \n        if (logoutBtn) {\n            logoutBtn.disabled = true;\n            logoutBtn.textContent = 'Logging out...';\n        }\n\n        try {\n            await this.auth.signOut();\n            console.log('User logged out successfully, redirecting to home page');\n\n            // Show success message and redirect\n            this.showLogoutSuccessMessage();\n            setTimeout(() => {\n                window.location.href = '/index.html';\n            }, 1500);\n\n        } catch (error) {\n            console.error('User logout error:', error);\n            if (logoutBtn) {\n                logoutBtn.disabled = false;\n                logoutBtn.textContent = originalText;\n            }\n            this.handleLogoutError(error, logoutBtn, originalText);\n        }\n    }\n\n    // Admin token refresh mechanism\n    startAdminTokenRefresh(user) {\n        this.stopAdminTokenRefresh();\n        \n        this.tokenRefreshInterval = setInterval(async () => {\n            try {\n                if (user) {\n                    const token = await user.getIdToken(true);\n                    console.log('Admin token refreshed successfully');\n                    \n                    // Verify admin status is still valid\n                    if (this.adminStatus) {\n                        const doc = await this.db.collection('users').doc(user.uid).get();\n                        if (!doc.exists || doc.data().isAdmin !== true) {\n                            console.log('Admin status revoked, logging out');\n                            this.clearAdminStatus();\n                            await this.auth.signOut();\n                            window.location.href = '/index.html';\n                        }\n                    }\n                }\n            } catch (error) {\n                console.error('Error refreshing admin token:', error);\n                try {\n                    await this.auth.signOut();\n                    window.location.href = '/index.html';\n                } catch (logoutError) {\n                    console.error('Error during logout after token refresh failure:', logoutError);\n                }\n            }\n        }, 50 * 60 * 1000); // 50 minutes\n\n        console.log('Admin token refresh started');\n    }\n\n    stopAdminTokenRefresh() {\n        if (this.tokenRefreshInterval) {\n            clearInterval(this.tokenRefreshInterval);\n            this.tokenRefreshInterval = null;\n            console.log('Admin token refresh stopped');\n        }\n    }\n\n    // Admin session management\n    startAdminSessionMonitoring() {\n        let lastActivity = Date.now();\n        const sessionTimeout = 30 * 60 * 1000; // 30 minutes\n\n        const updateActivity = () => {\n            lastActivity = Date.now();\n        };\n\n        // Track user activity\n        ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'].forEach(event => {\n            document.addEventListener(event, updateActivity, true);\n        });\n\n        // Check session timeout every minute\n        this.sessionCheckInterval = setInterval(() => {\n            const timeSinceLastActivity = Date.now() - lastActivity;\n            if (timeSinceLastActivity > sessionTimeout) {\n                console.log('Admin session timed out due to inactivity');\n                this.handleAdminSessionTimeout();\n            }\n        }, 60 * 1000);\n\n        // Show session timeout warning at 25 minutes\n        this.sessionWarningInterval = setInterval(() => {\n            const timeSinceLastActivity = Date.now() - lastActivity;\n            if (timeSinceLastActivity > (sessionTimeout - 5 * 60 * 1000)) {\n                this.showSessionTimeoutWarning();\n            }\n        }, 60 * 1000);\n\n        console.log('Admin session monitoring started');\n    }\n\n    stopAdminSessionMonitoring() {\n        if (this.sessionCheckInterval) {\n            clearInterval(this.sessionCheckInterval);\n            this.sessionCheckInterval = null;\n        }\n        if (this.sessionWarningInterval) {\n            clearInterval(this.sessionWarningInterval);\n            this.sessionWarningInterval = null;\n        }\n        console.log('Admin session monitoring stopped');\n    }\n\n    // Session timeout handling\n    showSessionTimeoutWarning() {\n        if (sessionStorage.getItem('sessionWarningShown')) {\n            return;\n        }\n\n        sessionStorage.setItem('sessionWarningShown', 'true');\n\n        const warningDiv = document.createElement('div');\n        warningDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 1rem; color: #856404; z-index: 9999; max-width: 300px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);';\n        warningDiv.innerHTML = `\n            <div style=\"display: flex; align-items: center; margin-bottom: 0.5rem;\">\n                <i class=\"fas fa-exclamation-triangle\" style=\"margin-right: 0.5rem; color: #f39c12;\"></i>\n                <strong>Session Timeout Warning</strong>\n            </div>\n            <p style=\"margin: 0.5rem 0; font-size: 0.9rem;\">Your admin session will expire in 5 minutes due to inactivity.</p>\n            <button onclick=\"window.authManager.extendAdminSession()\" style=\"padding: 0.5rem 1rem; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 0.5rem;\">\n                Extend Session\n            </button>\n            <button onclick=\"this.parentElement.remove()\" style=\"padding: 0.5rem 1rem; background-color: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n                Dismiss\n            </button>\n        `;\n\n        document.body.appendChild(warningDiv);\n\n        // Auto-remove after 10 seconds\n        setTimeout(() => {\n            if (warningDiv.parentElement) {\n                warningDiv.remove();\n            }\n        }, 10000);\n    }\n\n    extendAdminSession() {\n        // Update last activity time\n        document.dispatchEvent(new Event('mousemove'));\n\n        // Remove warning\n        const warnings = document.querySelectorAll('div[style*=\"position: fixed\"]');\n        warnings.forEach(warning => {\n            if (warning.innerHTML.includes('Session Timeout Warning')) {\n                warning.remove();\n            }\n        });\n\n        // Show confirmation\n        const confirmDiv = document.createElement('div');\n        confirmDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 1rem; color: #155724; z-index: 9999; max-width: 300px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);';\n        confirmDiv.innerHTML = `\n            <div style=\"display: flex; align-items: center; margin-bottom: 0.5rem;\">\n                <i class=\"fas fa-check-circle\" style=\"margin-right: 0.5rem; color: #28a745;\"></i>\n                <strong>Session Extended</strong>\n            </div>\n            <p style=\"margin: 0.5rem 0; font-size: 0.9rem;\">Your admin session has been extended.</p>\n        `;\n\n        document.body.appendChild(confirmDiv);\n\n        // Auto-remove after 3 seconds\n        setTimeout(() => {\n            if (confirmDiv.parentElement) {\n                confirmDiv.remove();\n            }\n        }, 3000);\n    }\n\n    handleAdminSessionTimeout() {\n        console.log('Handling admin session timeout');\n\n        this.stopAdminSessionMonitoring();\n        this.stopAdminTokenRefresh();\n        this.clearAdminStatus();\n\n        // Show timeout message\n        const timeoutDiv = document.createElement('div');\n        timeoutDiv.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 2rem; color: #721c24; z-index: 9999; text-align: center; max-width: 400px;';\n        timeoutDiv.innerHTML = `\n            <i class=\"fas fa-clock\" style=\"font-size: 3rem; margin-bottom: 1rem; color: #dc3545;\"></i>\n            <h3>Session Expired</h3>\n            <p>Your admin session has expired due to inactivity. You will be redirected to the login page.</p>\n            <button onclick=\"location.reload()\" style=\"margin-top: 1rem; padding: 0.75rem 1.5rem; background-color: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n                <i class=\"fas fa-redo\"></i> Return to Login\n            </button>\n        `;\n\n        document.body.appendChild(timeoutDiv);\n\n        // Redirect after 5 seconds\n        setTimeout(() => {\n            window.location.reload();\n        }, 5000);\n    }\n\n    // Clear admin status\n    clearAdminStatus() {\n        this.adminStatus = false;\n        this.adminUserId = null;\n        sessionStorage.removeItem('adminStatus');\n        sessionStorage.removeItem('adminUserId');\n        sessionStorage.removeItem('sessionWarningShown');\n    }\n\n    // Check admin status from storage\n    checkAdminStatusFromStorage() {\n        const adminStatus = sessionStorage.getItem('adminStatus');\n        const adminUserId = sessionStorage.getItem('adminUserId');\n\n        if (adminStatus === 'true' && adminUserId) {\n            if (this.auth && this.auth.currentUser && this.auth.currentUser.uid === adminUserId) {\n                return true;\n            } else {\n                this.clearAdminStatus();\n            }\n        }\n        return false;\n    }\n\n    // Load admin panel settings\n    async loadAdminPanelSettings() {\n        try {\n            const settingsDoc = await this.db.collection('settings').doc('currentCompetition').get();\n            if (settingsDoc.exists) {\n                const settingsData = settingsDoc.data();\n                console.log('Settings loaded successfully:', settingsData);\n\n                // Store settings globally for other functions to access\n                window.settings = settingsData;\n\n                // Update global variables\n                window.currentActiveEdition = settingsData.active_edition || 1;\n                window.currentActiveGameweek = settingsData.active_gameweek || '1';\n\n                if (typeof window.buildAdminDashboard === 'function') {\n                    window.buildAdminDashboard(settingsData);\n                } else {\n                    console.warn('buildAdminDashboard function not available');\n                }\n            } else {\n                console.warn('Settings document not found, creating default settings');\n                await this.createDefaultSettings();\n            }\n        } catch (error) {\n            console.error('Error loading admin panel settings:', error);\n            this.showSettingsError('Failed to load competition settings');\n        }\n    }\n\n    // Create default settings\n    async createDefaultSettings() {\n        const defaultSettings = {\n            active_edition: 1,\n            active_gameweek: '1',\n            lastUpdated: new Date().toISOString()\n        };\n\n        try {\n            await this.db.collection('settings').doc('currentCompetition').set(defaultSettings);\n            console.log('Default settings created');\n\n            window.settings = defaultSettings;\n\n            window.currentActiveEdition = defaultSettings.active_edition;\n            window.currentActiveGameweek = defaultSettings.active_gameweek;\n\n            if (typeof window.buildAdminDashboard === 'function') {\n                window.buildAdminDashboard(defaultSettings);\n            }\n        } catch (createError) {\n            console.error('Error creating default settings:', createError);\n            this.showSettingsError('Failed to create default settings');\n        }\n    }\n\n    // Show settings error\n    showSettingsError(message) {\n        const errorDiv = document.createElement('div');\n        errorDiv.style.cssText = 'background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 1rem; margin: 1rem 0; color: #721c24;';\n        errorDiv.innerHTML = `<strong>Settings Error:</strong> ${message}<br><button onclick=\"this.parentElement.remove()\" style=\"margin-top: 0.5rem; padding: 0.5rem 1rem; background-color: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;\">Dismiss</button>`;\n\n        const adminPanel = document.querySelector('#admin-panel');\n        if (adminPanel) {\n            adminPanel.insertBefore(errorDiv, adminPanel.firstChild);\n        }\n    }\n\n    // Setup admin page handling\n    setupAdminPageHandling() {\n        if (window.location.pathname.endsWith('admin.html')) {\n            this.initializeAdminPage();\n            this.initializeAdminPageVisibilityHandling();\n        }\n    }\n\n    // Initialize admin page\n    async initializeAdminPage() {\n        console.log('Initializing admin page...');\n\n        if (!this.db && window.db) {\n            this.db = window.db;\n        }\n\n        if (!this.db) {\n            console.error('Database not available, retrying in 100ms');\n            setTimeout(() => this.initializeAdminPage(), 100);\n            return;\n        }\n\n        // Show loading state initially\n        this.showAdminLoadingState();\n\n        // Check if user is already authenticated and has admin status\n        if (this.auth && this.auth.currentUser) {\n            console.log('User already authenticated, checking admin status...');\n            const user = this.auth.currentUser;\n\n            try {\n                const adminDoc = await this.db.collection('users').doc(user.uid).get();\n                if (adminDoc.exists && adminDoc.data().isAdmin === true) {\n                    await this.grantAdminAccess(user);\n                } else {\n                    this.showAdminLoginForm();\n                }\n            } catch (error) {\n                console.error('Error checking admin status:', error);\n                this.showAdminLoginForm();\n            }\n        } else {\n            console.log('No user authenticated, showing login form');\n            this.showAdminLoginForm();\n        }\n    }\n\n    // Show admin loading state\n    showAdminLoadingState() {\n        const loadingElement = document.querySelector('#admin-loading');\n        const loginForm = document.querySelector('#admin-login-form');\n        const adminPanel = document.querySelector('#admin-panel');\n        const errorElement = document.querySelector('#admin-error');\n\n        if (loadingElement) loadingElement.style.display = 'block';\n        if (loginForm) loginForm.style.display = 'none';\n        if (adminPanel) adminPanel.style.display = 'none';\n        if (errorElement) errorElement.style.display = 'none';\n    }\n\n    // Initialize admin page visibility handling\n    initializeAdminPageVisibilityHandling() {\n        let hiddenTime = 0;\n        const maxHiddenTime = 15 * 60 * 1000; // 15 minutes\n\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden) {\n                hiddenTime = Date.now();\n                console.log('Admin page hidden, starting hidden time tracking');\n            } else {\n                if (hiddenTime > 0) {\n                    const timeHidden = Date.now() - hiddenTime;\n                    console.log('Admin page visible again, was hidden for', Math.round(timeHidden / 1000), 'seconds');\n\n                    if (timeHidden > maxHiddenTime) {\n                        console.log('Page was hidden too long, logging out admin');\n                        this.handleAdminSessionTimeout();\n                    } else {\n                        hiddenTime = 0;\n                    }\n                }\n            }\n        });\n\n        // Handle window focus/blur for additional security\n        window.addEventListener('blur', () => {\n            if (document.hidden) {\n                hiddenTime = Date.now();\n            }\n        });\n\n        window.addEventListener('focus', () => {\n            if (hiddenTime > 0) {\n                const timeHidden = Date.now() - hiddenTime;\n                if (timeHidden > maxHiddenTime) {\n                    this.handleAdminSessionTimeout();\n                } else {\n                    hiddenTime = 0;\n                }\n            }\n        });\n    }\n\n    // Check if user is properly authenticated\n    isUserAuthenticated() {\n        // Check both Firebase auth and our currentUser\n        const firebaseUser = this.auth ? this.auth.currentUser : null;\n        const authManagerUser = this.currentUser;\n        \n        const isAuthenticated = !!(firebaseUser || authManagerUser);\n        \n        console.log('🔍 Authentication check - firebaseUser:', firebaseUser ? firebaseUser.email : 'null');\n        console.log('🔍 Authentication check - authManagerUser:', authManagerUser ? authManagerUser.email : 'null');\n        console.log('🔍 Authentication check - isAuthenticated:', isAuthenticated);\n        console.log('🔍 Authentication check - auth object available:', !!this.auth);\n        \n        // If Firebase auth says we have a user but our currentUser is null, sync them\n        if (firebaseUser && !authManagerUser) {\n            console.log('🔄 Syncing auth state - Firebase has user but currentUser is null');\n            this.currentUser = firebaseUser;\n            return true;\n        }\n        \n        // If our currentUser says we have a user but Firebase doesn't, trust Firebase\n        if (!firebaseUser && authManagerUser) {\n            console.log('🔄 Syncing auth state - currentUser has user but Firebase doesn\\'t');\n            this.currentUser = null;\n            return false;\n        }\n        \n        return isAuthenticated;\n    }\n\n    // Get the authenticated user (prefer Firebase auth, fallback to currentUser)\n    getAuthenticatedUser() {\n        if (this.auth && this.auth.currentUser) {\n            return this.auth.currentUser;\n        }\n        return this.currentUser;\n    }\n}\n\n// Export the AuthManager class\nexport default AuthManager;\n","// Registration Module\n// Handles user registration, edition management, and registration settings\n\nclass RegistrationManager {\n    constructor(db, auth) {\n        this.db = db;\n        this.auth = auth;\n        this.currentActiveEdition = 1;\n        this.currentEditionName = \"Edition 1\";\n        this.registrationManagementInitialized = false;\n    }\n\n    // Initialize registration management\n    initializeRegistrationManagement() {\n        if (this.registrationManagementInitialized) {\n            console.log('Registration management already initialized, skipping...');\n            return;\n        }\n\n        console.log('Initializing registration management...');\n        this.registrationManagementInitialized = true;\n\n        const saveRegistrationSettingsBtn = document.querySelector('#save-registration-settings');\n        const refreshStatsBtn = document.querySelector('#refresh-registration-stats');\n\n        if (saveRegistrationSettingsBtn) {\n            saveRegistrationSettingsBtn.addEventListener('click', this.saveRegistrationSettings.bind(this));\n        }\n\n        if (refreshStatsBtn) {\n            refreshStatsBtn.addEventListener('click', this.refreshRegistrationStats.bind(this));\n        }\n\n        // Initialize registration page functionality\n        this.initializeRegistrationPage();\n\n        // Load current settings\n        this.loadRegistrationSettings();\n        this.refreshRegistrationStats();\n    }\n\n    // Initialize main page functionality (index.html)\n    initializeMainPage() {\n        console.log('🔧 Initializing main page functionality...');\n        \n        // Check registration window status\n        console.log('🔧 Checking registration window status...');\n        this.checkRegistrationWindow();\n        \n        // Initialize any other main page features\n        console.log('🔧 Initializing main page features...');\n        this.initializeMainPageFeatures();\n        \n        console.log('✅ Main page initialization completed');\n    }\n\n    // Initialize main page features\n    initializeMainPageFeatures() {\n        console.log('🔧 Setting up main page event listeners...');\n        \n        // Set up any main page specific event listeners\n        // This could include navigation, testimonials, etc.\n        \n        console.log('✅ Main page features initialized');\n    }\n\n    // Initialize registration page functionality\n    initializeRegistrationPage() {\n        console.log('🔧 Initializing registration page functionality...');\n        console.log('🔍 Current page URL:', window.location.href);\n        console.log('🔍 Document ready state:', document.readyState);\n        \n        // Initialize age verification buttons\n        console.log('🔧 Step 1: Initializing age verification...');\n        this.initializeAgeVerification();\n        \n        // Initialize form submission handlers\n        console.log('🔧 Step 2: Initializing form handlers...');\n        this.initializeFormHandlers();\n        \n        // Initialize edition selection change handler\n        console.log('🔧 Step 3: Initializing edition selection...');\n        this.initializeEditionSelection();\n        \n        // Initialize form toggle handlers\n        console.log('🔧 Step 4: Initializing form toggles...');\n        this.initializeFormToggles();\n        \n        // Load current edition and update displays\n        console.log('🔧 Step 5: Loading current edition...');\n        this.loadCurrentEditionForRegistration();\n        \n        // Check registration window status\n        console.log('🔧 Step 6: Checking registration window...');\n        this.checkRegistrationWindow();\n        \n        console.log('✅ Registration page initialization completed');\n    }\n\n    // Initialize age verification buttons\n    initializeAgeVerification() {\n        console.log('🔍 Initializing age verification buttons...');\n        \n        const ageYesBtn = document.getElementById('age-yes-btn');\n        const ageNoBtn = document.getElementById('age-no-btn');\n        const ageVerifiedInput = document.getElementById('register-age-verified');\n\n        console.log('🔍 Age verification elements found:', {\n            ageYesBtn: !!ageYesBtn,\n            ageNoBtn: !!ageNoBtn,\n            ageVerifiedInput: !!ageVerifiedInput\n        });\n\n        if (ageYesBtn && ageNoBtn && ageVerifiedInput) {\n            console.log('✅ All age verification elements found, adding event listeners...');\n            \n            ageYesBtn.addEventListener('click', () => {\n                console.log('✅ Age Yes button clicked');\n                // Remove selected class from both buttons\n                ageYesBtn.classList.remove('selected');\n                ageNoBtn.classList.remove('selected');\n                \n                // Add selected class to yes button\n                ageYesBtn.classList.add('selected');\n                \n                // Set the hidden input value\n                ageVerifiedInput.value = 'yes';\n                \n                console.log('Age verification: Yes selected');\n            });\n\n            ageNoBtn.addEventListener('click', () => {\n                console.log('✅ Age No button clicked');\n                // Remove selected class from both buttons\n                ageYesBtn.classList.remove('selected');\n                ageNoBtn.classList.remove('selected');\n                \n                // Add selected class to no button\n                ageNoBtn.classList.add('selected');\n                \n                // Set the hidden input value\n                ageVerifiedInput.value = 'no';\n                \n                console.log('Age verification: No selected');\n            });\n            \n            console.log('✅ Age verification event listeners added successfully');\n        } else {\n            console.error('❌ Some age verification elements not found:', {\n                ageYesBtn: !!ageYesBtn,\n                ageNoBtn: !!ageNoBtn,\n                ageVerifiedInput: !!ageVerifiedInput\n            });\n        }\n    }\n\n    // Initialize form submission handlers\n    initializeFormHandlers() {\n        const registerForm = document.getElementById('register-form');\n        const reRegisterForm = document.getElementById('re-register-form');\n\n        if (registerForm) {\n            registerForm.addEventListener('submit', (e) => this.handleRegistrationSubmit(e));\n        }\n\n        if (reRegisterForm) {\n            reRegisterForm.addEventListener('submit', (e) => this.handleReRegistrationSubmit(e));\n        }\n    }\n\n    // Initialize edition selection change handler\n    initializeEditionSelection() {\n        const editionSelection = document.getElementById('edition-selection');\n        if (editionSelection) {\n            editionSelection.addEventListener('change', () => {\n                this.updateEditionDisplay();\n            });\n        }\n    }\n\n    // Initialize form toggle handlers\n    initializeFormToggles() {\n        const showReRegister = document.getElementById('show-re-register');\n        const showNewRegister = document.getElementById('show-new-register');\n        const registerForm = document.getElementById('register-form');\n        const reRegisterForm = document.getElementById('re-register-form');\n\n        if (showReRegister && showNewRegister && registerForm && reRegisterForm) {\n            showReRegister.addEventListener('click', (e) => {\n                e.preventDefault();\n                registerForm.style.display = 'none';\n                reRegisterForm.style.display = 'block';\n                showReRegister.style.display = 'none';\n                showNewRegister.style.display = 'inline';\n            });\n\n            showNewRegister.addEventListener('click', (e) => {\n                e.preventDefault();\n                reRegisterForm.style.display = 'none';\n                registerForm.style.display = 'block';\n                showNewRegister.style.display = 'none';\n                showReRegister.style.display = 'inline';\n            });\n        }\n    }\n\n    // Handle main registration form submission\n    async handleRegistrationSubmit(e) {\n        e.preventDefault();\n        console.log('Handling registration form submission...');\n\n        // Get form data\n        const formData = {\n            firstName: document.getElementById('register-firstname').value.trim(),\n            surname: document.getElementById('register-surname').value.trim(),\n            ageVerified: document.getElementById('register-age-verified').value,\n            email: document.getElementById('register-email').value.trim(),\n            mobile: document.getElementById('register-mobile').value.trim(),\n            password: document.getElementById('register-password').value,\n            confirmPassword: document.getElementById('register-confirm-password').value,\n            paymentMethod: document.getElementById('register-payment').value,\n            emailConsent: document.getElementById('register-email-consent').checked,\n            whatsappConsent: document.getElementById('register-whatsapp-consent').checked,\n            termsAccepted: document.getElementById('register-terms').checked,\n            edition: document.getElementById('edition-selection').value\n        };\n\n        // Validate form data\n        const validationResult = this.validateRegistrationForm(formData);\n        if (!validationResult.isValid) {\n            this.showRegistrationError(validationResult.message);\n            return;\n        }\n\n        try {\n            // Create user account\n            const userCredential = await this.auth.createUserWithEmailAndPassword(\n                formData.email, \n                formData.password\n            );\n\n            const user = userCredential.user;\n            console.log('User account created:', user.uid);\n\n            // Save user data to Firestore\n            await this.saveUserRegistrationData(user.uid, formData);\n\n            // Show success message\n            this.showRegistrationSuccess('Registration successful! You can now log in.');\n\n            // Clear form\n            this.clearRegistrationForm();\n\n            // Redirect to login page after a short delay\n            setTimeout(() => {\n                window.location.href = '/login.html';\n            }, 2000);\n\n        } catch (error) {\n            console.error('Registration error:', error);\n            this.showRegistrationError(this.getRegistrationErrorMessage(error));\n        }\n    }\n\n    // Handle re-registration form submission\n    async handleReRegistrationSubmit(e) {\n        e.preventDefault();\n        console.log('Handling re-registration form submission...');\n\n        // Get form data\n        const formData = {\n            email: document.getElementById('re-register-email').value.trim(),\n            password: document.getElementById('re-register-password').value,\n            paymentMethod: document.getElementById('re-register-payment').value,\n            emailConsent: document.getElementById('re-register-email-consent').checked,\n            whatsappConsent: document.getElementById('re-register-whatsapp-consent').checked,\n            termsAccepted: document.getElementById('re-register-terms').checked,\n            edition: document.getElementById('edition-selection').value\n        };\n\n        // Validate form data\n        const validationResult = this.validateReRegistrationForm(formData);\n        if (!validationResult.isValid) {\n            this.showReRegistrationError(validationResult.message);\n            return;\n        }\n\n        try {\n            // Sign in existing user\n            const userCredential = await this.auth.signInWithEmailAndPassword(\n                formData.email, \n                formData.password\n            );\n\n            const user = userCredential.user;\n            console.log('User signed in for re-registration:', user.uid);\n\n            // Update user registration data\n            await this.updateUserRegistrationData(user.uid, formData);\n\n            // Show success message\n            this.showReRegistrationSuccess('Re-registration successful! Welcome back.');\n\n            // Clear form\n            this.clearReRegistrationForm();\n\n            // Redirect to dashboard after a short delay\n            setTimeout(() => {\n                window.location.href = '/dashboard.html';\n            }, 2000);\n\n        } catch (error) {\n            console.error('Re-registration error:', error);\n            this.showReRegistrationError(this.getRegistrationErrorMessage(error));\n        }\n    }\n\n    // Validate registration form data\n    validateRegistrationForm(formData) {\n        if (!formData.firstName) {\n            return { isValid: false, message: 'First name is required' };\n        }\n        if (!formData.surname) {\n            return { isValid: false, message: 'Surname is required' };\n        }\n        if (!formData.ageVerified) {\n            return { isValid: false, message: 'Please verify your age' };\n        }\n        if (formData.ageVerified === 'no') {\n            return { isValid: false, message: 'You must be 16 or older to register' };\n        }\n        if (!formData.email) {\n            return { isValid: false, message: 'Email address is required' };\n        }\n        if (!formData.mobile) {\n            return { isValid: false, message: 'Mobile number is required' };\n        }\n        if (!formData.password) {\n            return { isValid: false, message: 'Password is required' };\n        }\n        if (formData.password.length < 6) {\n            return { isValid: false, message: 'Password must be at least 6 characters' };\n        }\n        if (formData.password !== formData.confirmPassword) {\n            return { isValid: false, message: 'Passwords do not match' };\n        }\n        if (!formData.paymentMethod) {\n            return { isValid: false, message: 'Please select a payment method' };\n        }\n        if (!formData.emailConsent) {\n            return { isValid: false, message: 'Email consent is required' };\n        }\n        if (!formData.termsAccepted) {\n            return { isValid: false, message: 'You must accept the terms and conditions' };\n        }\n        if (!formData.edition) {\n            return { isValid: false, message: 'Please select an edition' };\n        }\n\n        return { isValid: true };\n    }\n\n    // Validate re-registration form data\n    validateReRegistrationForm(formData) {\n        if (!formData.email) {\n            return { isValid: false, message: 'Email address is required' };\n        }\n        if (!formData.password) {\n            return { isValid: false, message: 'Password is required' };\n        }\n        if (!formData.paymentMethod) {\n            return { isValid: false, message: 'Please select a payment method' };\n        }\n        if (!formData.emailConsent) {\n            return { isValid: false, message: 'Email consent is required' };\n        }\n        if (!formData.termsAccepted) {\n            return { isValid: false, message: 'You must accept the terms and conditions' };\n        }\n        if (!formData.edition) {\n            return { isValid: false, message: 'Please select an edition' };\n        }\n\n        return { isValid: true };\n    }\n\n    // Show registration error message\n    showRegistrationError(message) {\n        const errorElement = document.getElementById('error-message');\n        if (errorElement) {\n            errorElement.textContent = message;\n            errorElement.style.display = 'block';\n            setTimeout(() => {\n                errorElement.style.display = 'none';\n            }, 5000);\n        }\n    }\n\n    // Show registration success message\n    showRegistrationSuccess(message) {\n        // Create a temporary success message\n        const successDiv = document.createElement('div');\n        successDiv.className = 'success-message';\n        successDiv.textContent = message;\n        successDiv.style.cssText = `\n            background: #d4edda;\n            color: #155724;\n            padding: 1rem;\n            border-radius: 5px;\n            margin: 1rem 0;\n            text-align: center;\n            font-weight: bold;\n        `;\n\n        const registerForm = document.getElementById('register-form');\n        if (registerForm) {\n            registerForm.parentNode.insertBefore(successDiv, registerForm.nextSibling);\n            setTimeout(() => {\n                successDiv.remove();\n            }, 5000);\n        }\n    }\n\n    // Show re-registration error message\n    showReRegistrationError(message) {\n        const errorElement = document.getElementById('re-register-error-message');\n        if (errorElement) {\n            errorElement.textContent = message;\n            errorElement.style.display = 'block';\n            setTimeout(() => {\n                errorElement.style.display = 'none';\n            }, 5000);\n        }\n    }\n\n    // Show re-registration success message\n    showReRegistrationSuccess(message) {\n        // Create a temporary success message\n        const successDiv = document.createElement('div');\n        successDiv.className = 'success-message';\n        successDiv.textContent = message;\n        successDiv.style.cssText = `\n            background: #d4edda;\n            color: #155724;\n            padding: 1rem;\n            border-radius: 5px;\n            margin: 1rem 0;\n            text-align: center;\n            font-weight: bold;\n        `;\n\n        const reRegisterForm = document.getElementById('re-register-form');\n        if (reRegisterForm) {\n            reRegisterForm.parentNode.insertBefore(successDiv, reRegisterForm.nextSibling);\n            setTimeout(() => {\n                successDiv.remove();\n            }, 5000);\n        }\n    }\n\n    // Clear registration form\n    clearRegistrationForm() {\n        const form = document.getElementById('register-form');\n        if (form) {\n            form.reset();\n            // Clear age verification selection\n            const ageYesBtn = document.getElementById('age-yes-btn');\n            const ageNoBtn = document.getElementById('age-no-btn');\n            const ageVerifiedInput = document.getElementById('register-age-verified');\n            \n            if (ageYesBtn) ageYesBtn.classList.remove('selected');\n            if (ageNoBtn) ageNoBtn.classList.remove('selected');\n            if (ageVerifiedInput) ageVerifiedInput.value = '';\n        }\n    }\n\n    // Clear re-registration form\n    clearReRegistrationForm() {\n        const form = document.getElementById('re-register-form');\n        if (form) {\n            form.reset();\n        }\n    }\n\n    // Get user-friendly error message\n    getRegistrationErrorMessage(error) {\n        if (error.code === 'auth/email-already-in-use') {\n            return 'An account with this email already exists. Please use the re-registration form instead.';\n        } else if (error.code === 'auth/weak-password') {\n            return 'Password is too weak. Please choose a stronger password.';\n        } else if (error.code === 'auth/invalid-email') {\n            return 'Please enter a valid email address.';\n        } else if (error.code === 'auth/user-not-found') {\n            return 'No account found with this email. Please use the main registration form instead.';\n        } else if (error.code === 'auth/wrong-password') {\n            return 'Incorrect password. Please try again.';\n        } else {\n            return 'An error occurred during registration. Please try again.';\n        }\n    }\n\n    // Save user registration data to Firestore\n    async saveUserRegistrationData(userId, formData) {\n        const editionKey = `edition${formData.edition}`;\n        const editionName = formData.edition === 'test' ? 'Test Weeks' : `Edition ${formData.edition}`;\n\n        const userData = {\n            uid: userId,\n            firstName: formData.firstName,\n            surname: formData.surname,\n            email: formData.email,\n            mobile: formData.mobile,\n            paymentMethod: formData.paymentMethod,\n            emailConsent: formData.emailConsent,\n            whatsappConsent: formData.whatsappConsent,\n            termsAccepted: formData.termsAccepted,\n            status: 'active',\n            lives: 3, // Start with 3 lives\n            preferredEdition: formData.edition,\n            registrations: {\n                [editionKey]: {\n                    edition: formData.edition,\n                    editionName: editionName,\n                    registrationDate: new Date(),\n                    paymentMethod: formData.paymentMethod,\n                    emailConsent: formData.emailConsent,\n                    whatsappConsent: formData.whatsappConsent,\n                    termsAccepted: formData.termsAccepted\n                }\n            },\n            createdAt: new Date(),\n            lastUpdated: new Date()\n        };\n\n        await this.db.collection('users').doc(userId).set(userData);\n        console.log('User registration data saved to Firestore');\n    }\n\n    // Update user registration data for re-registration\n    async updateUserRegistrationData(userId, formData) {\n        const editionKey = `edition${formData.edition}`;\n        const editionName = formData.edition === 'test' ? 'Test Weeks' : `Edition ${formData.edition}`;\n\n        const updateData = {\n            paymentMethod: formData.paymentMethod,\n            emailConsent: formData.emailConsent,\n            whatsappConsent: formData.whatsappConsent,\n            termsAccepted: formData.termsAccepted,\n            preferredEdition: formData.edition,\n            lastUpdated: new Date,\n            [`registrations.${editionKey}`]: {\n                edition: formData.edition,\n                editionName: editionName,\n                registrationDate: new Date(),\n                paymentMethod: formData.paymentMethod,\n                emailConsent: formData.emailConsent,\n                whatsappConsent: formData.whatsappConsent,\n                termsAccepted: formData.termsAccepted\n            }\n        };\n\n        await this.db.collection('users').doc(userId).update(updateData);\n        console.log('User re-registration data updated in Firestore');\n    }\n\n    // Load registration settings\n    async loadRegistrationSettings() {\n        try {\n            await this.loadEditionRegistrationSettings();\n            await this.loadAllEditionsOverview();\n        } catch (error) {\n            console.error('Error loading registration settings:', error);\n        }\n    }\n\n    // Load edition-specific registration settings\n    async loadEditionRegistrationSettings() {\n        try {\n            const editionForSettings = document.querySelector('#edition-for-settings');\n            const editionNumber = editionForSettings ? editionForSettings.value : '1';\n\n            const settingsDoc = await this.db.collection('settings').doc(`registration_edition_${editionNumber}`).get();\n\n            const enabledCheckbox = document.querySelector('#registration-enabled');\n            const startDateInput = document.querySelector('#registration-start-date');\n            const endDateInput = document.querySelector('#registration-end-date');\n            const nextStartDateInput = document.querySelector('#next-registration-start-date');\n            const editionSettingsTitle = document.querySelector('#edition-settings-title');\n\n            // Update the title\n            if (editionSettingsTitle) {\n                if (editionNumber === 'test') {\n                    editionSettingsTitle.textContent = `Test Weeks Registration Settings`;\n                } else {\n                    editionSettingsTitle.textContent = `Edition ${editionNumber} Registration Settings`;\n                }\n            }\n\n            if (settingsDoc.exists) {\n                const settings = settingsDoc.data();\n\n                if (enabledCheckbox) enabledCheckbox.checked = settings.enabled || false;\n                if (startDateInput && settings.startDate) {\n                    const startDate = new Date(settings.startDate.toDate());\n                    startDateInput.value = this.formatDateForInput(startDate);\n                } else if (startDateInput) {\n                    startDateInput.value = '';\n                }\n                if (endDateInput && settings.endDate) {\n                    const endDate = new Date(settings.endDate.toDate());\n                    endDateInput.value = this.formatDateForInput(endDate);\n                } else if (endDateInput) {\n                    endDateInput.value = '';\n                }\n                if (nextStartDateInput && settings.nextStartDate) {\n                    const nextStartDate = new Date(settings.nextStartDate.toDate());\n                    nextStartDateInput.value = this.formatDateForInput(nextStartDate);\n                } else if (nextStartDateInput) {\n                    nextStartDateInput.value = '';\n                }\n            } else {\n                // Clear all fields if no settings exist for this edition\n                if (enabledCheckbox) enabledCheckbox.checked = false;\n                if (startDateInput) startDateInput.value = '';\n                if (endDateInput) endDateInput.value = '';\n                if (nextStartDateInput) nextStartDateInput.value = '';\n            }\n        } catch (error) {\n            console.error('Error loading edition registration settings:', error);\n        }\n    }\n\n    // Load overview of all editions\n    async loadAllEditionsOverview() {\n        try {\n            console.log('🔧 Loading all editions overview...');\n            const editions = [1, 2, 3, 4, 'test'];\n            for (const edition of editions) {\n                const statusCard = document.querySelector(`#edition-${edition}-status`);\n                if (!statusCard) {\n                    console.log(`⚠️ Status card not found for edition ${edition}`);\n                    continue;\n                }\n\n                console.log(`🔍 Loading settings for edition ${edition}...`);\n                const settingsDoc = await this.db.collection('settings').doc(`registration_edition_${edition}`).get();\n\n                if (settingsDoc.exists) {\n                    const settings = settingsDoc.data();\n                    const now = new Date();\n\n                    let statusText = 'Not configured';\n                    let dateRange = 'No dates set';\n                    let statusClass = '';\n\n                    if (settings.enabled && settings.startDate && settings.endDate) {\n                        const startDate = new Date(settings.startDate.toDate());\n                        const endDate = new Date(settings.endDate.toDate());\n\n                        dateRange = `${startDate.toLocaleDateString('en-GB')} - ${endDate.toLocaleDateString('en-GB')}`;\n\n                        if (now >= startDate && now <= endDate) {\n                            statusText = 'Registration Open';\n                            statusClass = 'active';\n                        } else if (now < startDate) {\n                            statusText = 'Upcoming';\n                            statusClass = 'upcoming';\n                        } else {\n                            statusText = 'Registration Closed';\n                            statusClass = 'closed';\n                        }\n                    }\n\n                    statusCard.className = `edition-status-card ${statusClass}`;\n                    statusCard.querySelector('.status-text').textContent = statusText;\n                    statusCard.querySelector('.date-range').textContent = dateRange;\n                    console.log(`✅ Updated edition ${edition} status: ${statusText} (${dateRange})`);\n                } else {\n                    statusCard.className = 'edition-status-card';\n                    statusCard.querySelector('.status-text').textContent = 'Not configured';\n                    statusCard.querySelector('.date-range').textContent = 'No dates set';\n                    console.log(`⚠️ Edition ${edition} has no settings - showing as Not configured`);\n                }\n            }\n        } catch (error) {\n            console.error('Error loading all editions overview:', error);\n        }\n    }\n\n    // Save registration settings\n    async saveRegistrationSettings() {\n        const editionForSettings = document.querySelector('#edition-for-settings');\n        const enabledCheckbox = document.querySelector('#registration-enabled');\n        const startDateInput = document.querySelector('#registration-start-date');\n        const endDateInput = document.querySelector('#registration-end-date');\n        const nextStartDateInput = document.querySelector('#next-registration-start-date');\n        const statusElement = document.querySelector('#registration-settings-status');\n\n        const editionNumber = editionForSettings ? editionForSettings.value : 1;\n\n        try {\n            const settings = {\n                enabled: enabledCheckbox ? enabledCheckbox.checked : false,\n                edition: editionNumber,\n                lastUpdated: new Date()\n            };\n\n            if (startDateInput && startDateInput.value) {\n                settings.startDate = new Date(startDateInput.value);\n            }\n\n            if (endDateInput && endDateInput.value) {\n                settings.endDate = new Date(endDateInput.value);\n            }\n\n            if (nextStartDateInput && nextStartDateInput.value) {\n                settings.nextStartDate = new Date(nextStartDateInput.value);\n            }\n\n            await this.db.collection('settings').doc(`registration_edition_${editionNumber}`).set(settings);\n\n            if (statusElement) {\n                const editionText = editionNumber === 'test' ? 'Test Weeks' : `Edition ${editionNumber}`;\n                statusElement.textContent = `${editionText} registration settings saved successfully!`;\n                statusElement.className = 'status-message success';\n                setTimeout(() => {\n                    statusElement.textContent = '';\n                    statusElement.className = 'status-message';\n                }, 3000);\n            }\n\n            // Refresh the overview\n            await this.loadAllEditionsOverview();\n\n            console.log(`Edition ${editionNumber} registration settings saved:`, settings);\n        } catch (error) {\n            console.error('Error saving registration settings:', error);\n            if (statusElement) {\n                statusElement.textContent = 'Error saving settings: ' + error.message;\n                statusElement.className = 'status-message error';\n            }\n        }\n    }\n\n    // Refresh registration statistics\n    async refreshRegistrationStats() {\n        console.log('refreshRegistrationStats called');\n        try {\n            const usersSnapshot = await this.db.collection('users').get();\n            let totalUsers = 0;\n            let currentEditionRegistrations = 0;\n            let previousEditionsRegistrations = 0;\n            let activePlayers = 0;\n\n            const currentEdition = window.currentActiveEdition || this.currentActiveEdition;\n            console.log('refreshRegistrationStats - currentEdition:', currentEdition, 'window.currentActiveEdition:', window.currentActiveEdition, 'this.currentActiveEdition:', this.currentActiveEdition);\n\n            let archivedUsers = 0;\n            let activeUsers = 0;\n\n            usersSnapshot.forEach(doc => {\n                const userData = doc.data();\n\n                // Count all users in the database\n                totalUsers++;\n\n                // Count by status\n                if (userData.status === 'archived') {\n                    archivedUsers++;\n                } else {\n                    activeUsers++;\n                }\n\n                if (userData.registrations) {\n                    // Only count current edition registrations for active users\n                    const editionKey = `edition${currentEdition}`;\n                    console.log(`Checking user ${userData.firstName} ${userData.surname} for edition key: ${editionKey}, has registration: ${!!userData.registrations[editionKey]}, status: ${userData.status}`);\n                    if (userData.registrations[editionKey] && userData.status !== 'archived') {\n                        currentEditionRegistrations++;\n                        console.log(`✅ Counted user ${userData.firstName} ${userData.surname} for edition ${currentEdition}`);\n                    }\n\n                    // Count registrations from previous editions (excluding archived users)\n                    if (userData.status !== 'archived') {\n                        const previousEditions = Object.keys(userData.registrations).filter(edition => {\n                            const editionNum = parseInt(edition.replace('edition', ''));\n                            return editionNum < currentEdition;\n                        });\n                        previousEditionsRegistrations += previousEditions.length;\n                    }\n                }\n\n                // Count active players (those with lives > 0)\n                if (userData.lives > 0) {\n                    activePlayers++;\n                }\n            });\n\n            console.log('Registration stats breakdown:', {\n                totalUsers,\n                activeUsers,\n                archivedUsers,\n                currentEditionRegistrations,\n                previousEditionsRegistrations,\n                activePlayers\n            });\n\n            // Update display\n            const totalElement = document.querySelector('#total-registrations');\n            const currentElement = document.querySelector('#current-edition-registrations');\n            const archivedElement = document.querySelector('#archived-players-count');\n\n            if (totalElement) totalElement.textContent = activeUsers;\n            if (currentElement) currentElement.textContent = currentEditionRegistrations;\n            if (archivedElement) archivedElement.textContent = archivedUsers;\n\n            // Update registration list\n            await this.updateRegistrationList();\n\n        } catch (error) {\n            console.error('Error refreshing registration stats:', error);\n        }\n    }\n\n    // Update registration list\n    async updateRegistrationList() {\n        try {\n            const currentEdition = window.currentActiveEdition || this.currentActiveEdition;\n            console.log('updateRegistrationList - filtering for edition:', currentEdition);\n            console.log('updateRegistrationList - window.currentActiveEdition:', window.currentActiveEdition);\n            console.log('updateRegistrationList - this.currentActiveEdition:', this.currentActiveEdition);\n            \n            const usersSnapshot = await this.db.collection('users').orderBy('firstName').limit(50).get();\n            const tbody = document.querySelector('#registration-list-body');\n\n            if (!tbody) return;\n\n            tbody.innerHTML = '';\n\n            let displayedCount = 0;\n            const editionKey = `edition${currentEdition}`;\n\n            usersSnapshot.forEach(doc => {\n                const userData = doc.data();\n                \n                console.log(`Checking user: ${userData.firstName} ${userData.surname}`);\n                console.log(`  - Has registrations: ${!!userData.registrations}`);\n                console.log(`  - Looking for edition key: ${editionKey}`);\n                console.log(`  - Available editions:`, userData.registrations ? Object.keys(userData.registrations) : 'none');\n                console.log(`  - Has ${editionKey}: ${!!(userData.registrations && userData.registrations[editionKey])}`);\n                console.log(`  - Status: ${userData.status}`);\n                \n                // Only show users registered for the current edition\n                if (!userData.registrations || !userData.registrations[editionKey] || userData.status === 'archived') {\n                    console.log(`  ❌ Skipping user ${userData.firstName} ${userData.surname} - not registered for ${editionKey}`);\n                    return; // Skip this user\n                }\n                \n                console.log(`  ✅ Including user ${userData.firstName} ${userData.surname} for ${editionKey}`);\n\n                const row = document.createElement('tr');\n                displayedCount++;\n\n                const name = `${userData.firstName || ''} ${userData.surname || ''}`.trim();\n                const email = userData.email || '';\n                const paymentMethod = userData.paymentMethod || 'Not specified';\n\n                // Get registration info for current edition\n                const currentEditionReg = userData.registrations[editionKey];\n                const editionName = currentEdition === 'test' ? 'Test Weeks' : `Edition ${currentEdition}`;\n                const registrationDate = currentEditionReg.registrationDate ? currentEditionReg.registrationDate.toDate().toLocaleDateString('en-GB') : 'N/A';\n\n                row.innerHTML = `\n                    <td>${name}</td>\n                    <td>${email}</td>\n                    <td>${editionName}</td>\n                    <td>${registrationDate}</td>\n                    <td>${paymentMethod}</td>\n                    <td>\n                        <button class=\"secondary-button\" onclick=\"window.registrationManager.viewUserDetails('${doc.id}')\">View</button>\n                    </td>\n                `;\n\n                tbody.appendChild(row);\n            });\n\n            console.log(`updateRegistrationList - displayed ${displayedCount} users for edition ${currentEdition}`);\n\n        } catch (error) {\n            console.error('Error updating registration list:', error);\n        }\n    }\n\n    // View user details\n    async viewUserDetails(userId) {\n        try {\n            const userDoc = await this.db.collection('users').doc(userId).get();\n            if (!userDoc.exists) {\n                alert('User not found');\n                return;\n            }\n\n            const userData = userDoc.data();\n\n            // Create modal content\n            const modalContent = `\n                <div class=\"user-details-modal\">\n                    <div class=\"modal-header\">\n                        <h3>User Details</h3>\n                        <button class=\"close-modal\" onclick=\"window.registrationManager.closeUserDetailsModal()\">&times;</button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"user-info\">\n                            <h4>Personal Information</h4>\n                            <p><strong>Name:</strong> ${userData.firstName || ''} ${userData.surname || ''}</p>\n                            <p><strong>Email:</strong> ${userData.email || 'N/A'}</p>\n                            <p><strong>Display Name:</strong> ${userData.displayName || 'N/A'}</p>\n                            <p><strong>Payment Method:</strong> ${userData.paymentMethod || 'Not specified'}</p>\n                            <p><strong>Lives Remaining:</strong> ${userData.lives !== undefined ? userData.lives : 'N/A'}</p>\n                        </div>\n                        \n                        <div class=\"registration-history\">\n                            <h4>Registration History</h4>\n                            ${this.generateRegistrationHistory(userData.registrations || {})}\n                        </div>\n                        \n                        <div class=\"pick-history\">\n                            <h4>Pick History</h4>\n                            ${this.generatePickHistory(userData.picks || {})}\n                        </div>\n                        \n                        <div class=\"edition-settings\">\n                            <h4>Edition Settings</h4>\n                            <div class=\"edition-controls\">\n                                <label for=\"default-edition-${userId}\">Default Edition:</label>\n                                <select id=\"default-edition-${userId}\" onchange=\"window.registrationManager.updateUserDefaultEdition('${userId}', this.value)\">\n                                    <option value=\"\">No Default Set</option>\n                                    <option value=\"1\" ${userData.preferredEdition === 1 ? 'selected' : ''}>Edition 1</option>\n                                    <option value=\"test\" ${userData.preferredEdition === 'test' ? 'selected' : ''}>Test Weeks</option>\n                                </select>\n                                <button class=\"secondary-button\" onclick=\"window.registrationManager.saveUserDefaultEdition('${userId}')\">Save Default</button>\n                            </div>\n                            <p class=\"edition-help\">This sets which edition the user sees by default when they log in.</p>\n                        </div>\n                    </div>\n                </div>\n            `;\n\n            // Create and show modal\n            this.showModal(modalContent);\n\n        } catch (error) {\n            console.error('Error fetching user details:', error);\n            alert('Error loading user details');\n        }\n    }\n\n    // Generate registration history HTML\n    generateRegistrationHistory(registrations) {\n        if (Object.keys(registrations).length === 0) {\n            return '<p>No registrations found</p>';\n        }\n\n        let html = '<div class=\"registration-list\">';\n        Object.keys(registrations).sort().forEach(edition => {\n            const reg = registrations[edition];\n            const editionName = edition.replace('edition', 'Edition ');\n            const date = reg.registrationDate ? reg.registrationDate.toDate().toLocaleDateString('en-GB') : 'N/A';\n            html += `\n                <div class=\"registration-item\">\n                    <strong>${editionName}:</strong> ${date}\n                </div>\n            `;\n        });\n        html += '</div>';\n        return html;\n    }\n\n    // Generate pick history HTML\n    generatePickHistory(picks) {\n        if (Object.keys(picks).length === 0) {\n            return '<p>No picks made yet</p>';\n        }\n\n        let html = '<div class=\"pick-list\">';\n        const gameweeks = [\n            { key: 'gw1', label: 'Game Week 1' },\n            { key: 'gw2', label: 'Game Week 2' },\n            { key: 'gw3', label: 'Game Week 3' },\n            { key: 'gw4', label: 'Game Week 4' },\n            { key: 'gw5', label: 'Game Week 5' },\n            { key: 'gw6', label: 'Game Week 6' },\n            { key: 'gw7', label: 'Game Week 7' },\n            { key: 'gw8', label: 'Game Week 8' },\n            { key: 'gw9', label: 'Game Week 9' },\n            { key: 'gw10', label: 'Game Week 10' },\n            { key: 'gwtiebreak', label: 'Tiebreak Round' }\n        ];\n\n        gameweeks.forEach(gw => {\n            const pick = picks[gw.key];\n            const badge = pick ? this.getTeamBadge(pick) : null;\n            const badgeHtml = badge ? `<img src=\"${badge}\" alt=\"${pick}\" style=\"width: 14px; height: 14px; margin-right: 4px; vertical-align: middle;\">` : '';\n            html += `\n                <div class=\"pick-item\">\n                    <strong>${gw.label}:</strong> ${pick ? badgeHtml + pick : 'No pick made'}\n                </div>\n            `;\n        });\n        html += '</div>';\n        return html;\n    }\n\n    // Show modal\n    showModal(content) {\n        // Remove existing modal if any\n        const existingModal = document.querySelector('.modal-overlay');\n        if (existingModal) {\n            existingModal.remove();\n        }\n\n        // Create modal overlay\n        const modalOverlay = document.createElement('div');\n        modalOverlay.className = 'modal-overlay';\n        modalOverlay.innerHTML = content;\n\n        // Add to page\n        document.body.appendChild(modalOverlay);\n\n        // Add event listener to close on overlay click\n        modalOverlay.addEventListener('click', function(e) {\n            if (e.target === modalOverlay) {\n                window.registrationManager.closeUserDetailsModal();\n            }\n        });\n    }\n\n    // Close user details modal\n    closeUserDetailsModal() {\n        const modal = document.querySelector('.modal-overlay');\n        if (modal) {\n            modal.remove();\n        }\n    }\n\n    // Update user's default edition (admin function)\n    updateUserDefaultEdition(userId, edition) {\n        // Store the selected edition temporarily\n        window.tempUserEdition = edition;\n    }\n\n    // Save user's default edition (admin function)\n    async saveUserDefaultEdition(userId) {\n        try {\n            const edition = window.tempUserEdition || '';\n\n            await this.db.collection('users').doc(userId).update({\n                preferredEdition: edition || null\n            });\n\n            // Show success message\n            const editionText = edition === 'test' ? 'Test Weeks' : edition === '1' ? 'Edition 1' : 'No default';\n            alert(`Default edition updated to: ${editionText}`);\n\n            // Refresh the user details modal to show updated selection\n            this.viewUserDetails(userId);\n\n        } catch (error) {\n            console.error('Error saving user default edition:', error);\n            alert('Error saving default edition. Please try again.');\n        }\n    }\n\n    // Check registration window status\n    async checkRegistrationWindow(edition = null) {\n        try {\n            // Use provided edition or fall back to current active edition\n            const editionToCheck = edition || this.currentActiveEdition;\n            const settingsDoc = await this.db.collection('settings').doc(`registration_edition_${editionToCheck}`).get();\n            \n            if (settingsDoc.exists) {\n                const settings = settingsDoc.data();\n\n                // Update edition displays\n                document.querySelectorAll('#current-edition-display, #submit-edition-display, #re-submit-edition-display, #sidebar-edition-display').forEach(el => {\n                    if (el) el.textContent = this.currentActiveEdition;\n                });\n\n                if (!settings.enabled) {\n                    const editionText = editionToCheck === 'test' ? 'Test Weeks' : `Edition ${editionToCheck}`;\n                    this.showRegistrationClosed(`${editionText} registration is currently closed`);\n                    return false;\n                }\n\n                const now = new Date();\n                const startDate = settings.startDate ? new Date(settings.startDate.toDate()) : null;\n                const endDate = settings.endDate ? new Date(settings.endDate.toDate()) : null;\n\n                if (startDate && now < startDate) {\n                    const editionText = editionToCheck === 'test' ? 'Test Weeks' : `Edition ${editionToCheck}`;\n                    this.showRegistrationClosed(`${editionText} registration opens on ` + startDate.toLocaleDateString('en-GB'));\n                    return false;\n                }\n\n                if (endDate && now > endDate) {\n                    const editionText = editionToCheck === 'test' ? 'Test Weeks' : `Edition ${editionToCheck}`;\n                    this.showRegistrationClosed(`${editionText} registration closed on ` + endDate.toLocaleDateString('en-GB'));\n                    return false;\n                }\n\n                return true;\n            }\n            return true; // Default to open if no settings\n        } catch (error) {\n            console.error('Error checking registration window:', error);\n            return true; // Default to open on error\n        }\n    }\n\n    // Show registration closed message\n    showRegistrationClosed(message = 'Registration is currently closed') {\n        const closedDiv = document.querySelector('#registration-closed');\n        const registerForm = document.querySelector('#register-form');\n        const reRegisterForm = document.querySelector('#re-register-form');\n\n        if (closedDiv) {\n            closedDiv.querySelector('p').textContent = message;\n            closedDiv.style.display = 'block';\n        }\n        if (registerForm) registerForm.style.display = 'none';\n        if (reRegisterForm) reRegisterForm.style.display = 'none';\n    }\n\n    // Update edition displays on registration page\n    updateRegistrationPageEdition() {\n        document.querySelectorAll('#current-edition-display, #submit-edition-display, #re-submit-edition-display, #sidebar-edition-display').forEach(el => {\n            if (el) {\n                if (this.currentActiveEdition === 'test') {\n                    el.textContent = 'Test Weeks';\n                } else {\n                    el.textContent = `Edition ${this.currentActiveEdition}`;\n                }\n            }\n        });\n\n        // Update registration information based on current active edition\n        const registrationInfo = document.getElementById('registration-info');\n        if (registrationInfo) {\n            if (this.currentActiveEdition === 'test') {\n                registrationInfo.innerHTML = `\n                    <h4>Registration Information</h4>\n                    <p><strong>Status:</strong> By invitation only</p>\n                `;\n            } else {\n                registrationInfo.innerHTML = `\n                    <h4>Registration Information</h4>\n                    <p><strong>Entry Fee:</strong> £10 per edition</p>\n                    <p><strong>Prize Pool:</strong> 50% of total entry fees</p>\n                    <p><strong>Format:</strong> 10 game weeks</p>\n                `;\n            }\n        }\n    }\n\n    // Update edition display based on selection\n    updateEditionDisplay() {\n        const editionSelection = document.getElementById('edition-selection');\n        if (!editionSelection) return;\n\n        const selectedEdition = editionSelection.value;\n        let displayText = 'Edition 1'; // Default\n\n        if (selectedEdition === 'test') {\n            displayText = 'Test Weeks';\n        } else if (selectedEdition === '1') {\n            displayText = 'Edition 1';\n        }\n\n        // Update all edition displays\n        document.querySelectorAll('#current-edition-display, #submit-edition-display, #re-submit-edition-display, #sidebar-edition-display').forEach(el => {\n            if (el) {\n                el.textContent = displayText;\n            }\n        });\n\n        // Update registration information based on edition selection\n        const registrationInfo = document.getElementById('registration-info');\n        if (registrationInfo) {\n            if (selectedEdition === 'test') {\n                registrationInfo.innerHTML = `\n                    <h4>Registration Information</h4>\n                    <p><strong>Status:</strong> By invitation only</p>\n                `;\n            } else {\n                registrationInfo.innerHTML = `\n                    <h4>Registration Information</h4>\n                    <p><strong>Entry Fee:</strong> £10 per edition</p>\n                    <p><strong>Prize Pool:</strong> 50% of total entry fees</p>\n                    <p><strong>Format:</strong> 10 game weeks</p>\n                `;\n            }\n        }\n    }\n\n    // Get user's edition from registration data\n    getUserEdition(userData) {\n        if (!userData || !userData.registrations) {\n            return 1; // Default to Edition 1 if no registration data\n        }\n\n        // If user has a preferred edition set, use that\n        if (userData.preferredEdition) {\n            return userData.preferredEdition;\n        }\n\n        // Check for Test Weeks registration first\n        if (userData.registrations.editiontest) {\n            return 'test';\n        }\n\n        // Check for Edition 1 registration\n        if (userData.registrations.edition1) {\n            return 1;\n        }\n\n        // Check for other editions (2, 3, 4, etc.)\n        for (let i = 2; i <= 10; i++) {\n            if (userData.registrations[`edition${i}`]) {\n                return i;\n            }\n        }\n\n        return 1; // Default to Edition 1\n    }\n\n    // Get all editions user is registered for\n    getUserRegisteredEditions(userData) {\n        if (!userData || !userData.registrations) {\n            return [];\n        }\n\n        const editions = [];\n        Object.keys(userData.registrations).forEach(editionKey => {\n            if (editionKey.startsWith('edition')) {\n                const edition = editionKey.replace('edition', '');\n                editions.push(edition);\n            }\n        });\n\n        return editions;\n    }\n\n    // Save user's edition preference\n    async saveEditionPreference(edition, userId) {\n        try {\n            await this.db.collection('users').doc(userId).update({\n                preferredEdition: edition\n            });\n\n            // Show success message\n            alert(`Edition preference saved! You are now participating in ${edition === 'test' ? 'Test Weeks' : `Edition ${edition}`}.`);\n\n            // Reload the page to update fixtures and displays\n            window.location.reload();\n        } catch (error) {\n            console.error('Error saving edition preference:', error);\n            alert('Error saving edition preference. Please try again.');\n        }\n    }\n\n    // Load current edition and update registration page\n    async loadCurrentEditionForRegistration() {\n        try {\n            const settingsDoc = await this.db.collection('settings').doc('currentCompetition').get();\n            if (settingsDoc.exists) {\n                const settings = settingsDoc.data();\n                this.currentActiveEdition = settings.active_edition || 1;\n                this.updateRegistrationPageEdition();\n            }\n        } catch (error) {\n            console.error('Error loading current edition for registration:', error);\n        }\n    }\n\n    // Format date for input fields\n    formatDateForInput(date) {\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        const hours = String(date.getHours()).padStart(2, '0');\n        const minutes = String(date.getMinutes()).padStart(2, '0');\n        return `${year}-${month}-${day}T${hours}:${minutes}`;\n    }\n\n    // Get team badge (placeholder - should be implemented based on your team system)\n    getTeamBadge(teamName) {\n        // This should return the actual team badge URL\n        // For now, returning null as placeholder\n        return null;\n    }\n\n    // Set current active edition\n    setCurrentActiveEdition(edition) {\n        this.currentActiveEdition = edition;\n        this.currentEditionName = edition === 'test' ? 'Test Weeks' : `Edition ${edition}`;\n        // Also update the global value to keep everything in sync\n        if (window.currentActiveEdition !== edition) {\n            window.currentActiveEdition = edition;\n        }\n    }\n}\n\n// Export the RegistrationManager class\nexport default RegistrationManager;\n","// Fixtures Module\n// Handles all fixture-related functionality including management, loading, rendering, and API integrations\n\nclass FixturesManager {\n    constructor(db) {\n        this.db = db;\n        this.fixtureManagementInitialized = false;\n        this.currentGameweekFixtures = [];\n        this.lastProcessedEvents = new Set();\n        this.enhancedVidiprinterData = [];\n        this.autoUpdateInterval = null;\n        this.realTimeUpdateInterval = null;\n    }\n\n    // Initialize fixture management\n    initializeFixtureManagement() {\n        if (this.fixtureManagementInitialized) {\n            console.log('Fixture management already initialized, skipping...');\n            return;\n        }\n        \n        // Check if we're on a page that needs fixture management\n        const hasFixtureElements = document.querySelector('#gameweek-select') || \n                                  document.querySelector('#score-gameweek-select') ||\n                                  document.querySelector('#desktop-as-it-stands-gameweek') ||\n                                  document.querySelector('.gameweek-tab') ||\n                                  document.querySelector('#mobile-gameweek-navigation');\n        if (!hasFixtureElements) {\n            console.log('Fixture management elements not found on this page, skipping...');\n            return;\n        }\n        \n        console.log('Initializing fixture management...');\n        this.fixtureManagementInitialized = true;\n        \n        this.setupEventListeners();\n        this.initializeFixtureManagementTools();\n        this.addInitialFixtureRow();\n        this.loadExistingFixtures();\n        this.initializeFootballWebPagesAPI();\n        this.initializeCompetitionSettings();\n        this.startDeadlineChecker();\n    }\n\n    // Set up event listeners for fixture management\n    setupEventListeners() {\n        const addFixtureBtn = document.querySelector('#add-fixture-btn');\n        const saveFixturesBtn = document.querySelector('#save-fixtures-btn');\n        const checkFixturesBtn = document.querySelector('#check-fixtures-btn');\n        const saveScoresBtn = document.querySelector('#save-scores-btn');\n        const gameweekSelect = document.querySelector('#gameweek-select');\n        const scoreGameweekSelect = document.querySelector('#score-gameweek-select');\n        const importFootballWebPagesScoresBtn = document.querySelector('#import-football-webpages-scores-btn');\n        const scoresFileInput = document.querySelector('#scores-file-input');\n        const refreshScoresBtn = document.querySelector('#refresh-scores-btn');\n        const startAutoUpdateBtn = document.querySelector('#start-auto-update-btn');\n        const stopAutoUpdateBtn = document.querySelector('#stop-auto-update-btn');\n        const saveApiSettingsBtn = document.querySelector('#save-api-settings-btn');\n\n        if (addFixtureBtn) {\n            addFixtureBtn.addEventListener('click', () => this.addFixtureRow());\n        }\n        if (saveFixturesBtn) {\n            saveFixturesBtn.addEventListener('click', () => this.saveFixtures());\n        }\n        if (checkFixturesBtn) {\n            checkFixturesBtn.addEventListener('click', () => this.checkFixtures());\n        }\n        if (saveScoresBtn) {\n            saveScoresBtn.addEventListener('click', () => this.saveScores());\n        }\n        if (gameweekSelect) {\n            gameweekSelect.addEventListener('change', () => this.loadFixturesForGameweek());\n        }\n        if (scoreGameweekSelect) {\n            scoreGameweekSelect.addEventListener('change', () => this.loadScoresForGameweek());\n        }\n        if (importFootballWebPagesScoresBtn) {\n            importFootballWebPagesScoresBtn.addEventListener('click', () => {\n                const gameweek = scoreGameweekSelect.value;\n                this.importScoresFromFootballWebPages(gameweek);\n            });\n        }\n        if (refreshScoresBtn) {\n            refreshScoresBtn.addEventListener('click', () => {\n                this.loadScoresForGameweek();\n            });\n        }\n        if (scoresFileInput) {\n            scoresFileInput.addEventListener('change', (e) => {\n                const file = e.target.files[0];\n                if (file) {\n                    const gameweek = scoreGameweekSelect.value;\n                    this.importScoresFromFile(file, gameweek);\n                    e.target.value = ''; // Reset file input\n                }\n            });\n        }\n        if (startAutoUpdateBtn) {\n            startAutoUpdateBtn.addEventListener('click', () => {\n                const gameweek = scoreGameweekSelect.value;\n                this.startAutoScoreUpdates(gameweek);\n                \n                const statusDiv = document.getElementById('auto-update-status');\n                if (statusDiv) {\n                    statusDiv.innerHTML = '<p class=\"success\">✅ Auto score updates started. Checking every minute for half-time (45+ min) and full-time (105+ min) scores.</p>';\n                }\n            });\n        }\n        if (stopAutoUpdateBtn) {\n            stopAutoUpdateBtn.addEventListener('click', () => {\n                this.stopAutoScoreUpdates();\n                \n                const statusDiv = document.getElementById('auto-update-status');\n                if (statusDiv) {\n                    statusDiv.innerHTML = '<p class=\"info\">⏹️ Auto score updates stopped.</p>';\n                }\n            });\n        }\n        if (saveApiSettingsBtn) {\n            saveApiSettingsBtn.addEventListener('click', () => this.saveFootballWebPagesSettings());\n        }\n        \n        // Add event listener for Edit Fixtures button\n        const editFixturesBtn = document.querySelector('#edit-fixtures-btn');\n        if (editFixturesBtn) {\n            editFixturesBtn.addEventListener('click', () => this.editFixtures());\n        }\n        \n        // Add event listener for View Fixtures button\n        const viewFixturesBtn = document.querySelector('#view-fixtures-btn');\n        if (viewFixturesBtn) {\n            viewFixturesBtn.addEventListener('click', () => this.switchToViewMode());\n        }\n    }\n\n    // Initialize fixture management tools\n    initializeFixtureManagementTools() {\n        // Add event listeners for fixture management tools\n        const reallocateFixturesBtn = document.querySelector('#reallocate-fixtures-btn');\n        const deleteAllFixturesBtn = document.querySelector('#delete-all-fixtures-btn');\n        \n        if (reallocateFixturesBtn) {\n            reallocateFixturesBtn.addEventListener('click', () => this.reallocateFixtures());\n        }\n        \n        if (deleteAllFixturesBtn) {\n            deleteAllFixturesBtn.addEventListener('click', () => this.deleteAllFixtures());\n        }\n        \n        console.log('Fixture management tools initialized');\n    }\n\n    // Add initial fixture row\n    addInitialFixtureRow() {\n        this.addFixtureRow();\n    }\n\n    // Load existing fixtures\n    loadExistingFixtures() {\n        // Only load if the required elements exist\n        if (document.querySelector('#gameweek-select')) {\n            this.loadFixturesForGameweek();\n        }\n        if (document.querySelector('#score-gameweek-select')) {\n            this.loadScoresForGameweek();\n        }\n    }\n\n    // Initialize Football Web Pages API\n    initializeFootballWebPagesAPI() {\n        this.loadFootballWebPagesSettings();\n        console.log('Football Web Pages API initialized');\n    }\n\n    // Initialize competition settings\n    initializeCompetitionSettings() {\n        // Initialize competition settings when database is ready\n        const initializeCompetitionSettingsWhenReady = () => {\n            if (this.db) {\n                this.loadCompetitionSettings();\n            } else {\n                setTimeout(initializeCompetitionSettingsWhenReady, 100);\n            }\n        };\n        initializeCompetitionSettingsWhenReady();\n    }\n\n    // Start deadline checker\n    startDeadlineChecker() {\n        // Start periodic deadline checking when database is ready\n        const startDeadlineCheckerWhenReady = () => {\n            if (this.db) {\n                // Start deadline checking logic here\n                console.log('Deadline checker started');\n            } else {\n                setTimeout(startDeadlineCheckerWhenReady, 100);\n            }\n        };\n        startDeadlineCheckerWhenReady();\n    }\n\n    // Add fixture row\n    addFixtureRow() {\n        const fixturesContainer = document.querySelector('#fixtures-container');\n        if (!fixturesContainer) return;\n\n        const fixtureRow = document.createElement('div');\n        fixtureRow.className = 'fixture-row';\n        fixtureRow.innerHTML = `\n            <div class=\"fixture-inputs\">\n                <input type=\"text\" class=\"home-team\" placeholder=\"Home Team\">\n                <input type=\"text\" class=\"away-team\" placeholder=\"Away Team\">\n                <input type=\"datetime-local\" class=\"fixture-date\">\n                <input type=\"text\" class=\"venue\" placeholder=\"Venue\">\n                <button type=\"button\" class=\"remove-fixture-btn\" onclick=\"this.parentElement.parentElement.remove()\">Remove</button>\n            </div>\n        `;\n        fixturesContainer.appendChild(fixtureRow);\n    }\n\n    // Remove fixture row\n    removeFixtureRow(button) {\n        button.parentElement.parentElement.remove();\n    }\n\n    // Save fixtures\n    async saveFixtures() {\n        try {\n            const gameweek = document.querySelector('#gameweek-select').value;\n            const fixtureRows = document.querySelectorAll('.fixture-row');\n            const fixtures = [];\n\n            fixtureRows.forEach(row => {\n                const homeTeam = row.querySelector('.home-team').value.trim();\n                const awayTeam = row.querySelector('.away-team').value.trim();\n                const dateTimeInput = row.querySelector('.fixture-date').value;\n                const venue = row.querySelector('.venue').value.trim();\n\n                if (homeTeam && awayTeam && dateTimeInput) {\n                    // Parse the datetime-local input to get date and kick-off time\n                    const dateTime = new Date(dateTimeInput);\n                    const date = dateTime.toISOString().split('T')[0]; // YYYY-MM-DD format\n                    const kickOffTime = dateTime.toTimeString().split(' ')[0]; // HH:MM:SS format\n                    \n                    fixtures.push({\n                        homeTeam,\n                        awayTeam,\n                        date,\n                        kickOffTime,\n                        dateTime: dateTimeInput, // Keep the full datetime for editing\n                        venue: venue || 'TBD',\n                        status: 'NS'\n                    });\n                }\n            });\n\n            if (fixtures.length === 0) {\n                alert('Please add at least one fixture');\n                return;\n            }\n\n            // Use the same format as the main app.js file\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${window.currentActiveEdition}_${gameweekKey}`;\n            await this.db.collection('fixtures').doc(editionGameweekKey).set({\n                fixtures: fixtures,\n                gameweek: gameweek,\n                edition: window.currentActiveEdition,\n                lastUpdated: new Date()\n            });\n\n            alert(`Saved ${fixtures.length} fixtures for gameweek ${gameweek}`);\n            \n            // After saving, show the Current Fixtures table and switch to view mode\n            const fixturesTableContainer = document.querySelector('#fixtures-table-container');\n            if (fixturesTableContainer) {\n                fixturesTableContainer.style.display = 'block';\n            }\n            this.loadFixturesForGameweek();\n\n        } catch (error) {\n            console.error('Error saving fixtures:', error);\n            alert('Error saving fixtures: ' + error.message);\n        }\n    }\n\n    // Check fixtures\n    async checkFixtures() {\n        try {\n            const gameweek = document.querySelector('#gameweek-select').value;\n            // Use the same format as the main app.js file\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${window.currentActiveEdition}_${gameweekKey}`;\n            \n            const doc = await this.db.collection('fixtures').doc(editionGameweekKey).get();\n            if (!doc.exists) {\n                alert('No fixtures found for this gameweek');\n                return;\n            }\n\n            const fixtures = doc.data().fixtures || [];\n            if (fixtures.length === 0) {\n                alert('No fixtures found for this gameweek');\n                return;\n            }\n\n            // Check for duplicate teams\n            const teamCounts = {};\n            fixtures.forEach(fixture => {\n                teamCounts[fixture.homeTeam] = (teamCounts[fixture.homeTeam] || 0) + 1;\n                teamCounts[fixture.awayTeam] = (teamCounts[fixture.awayTeam] || 0) + 1;\n            });\n\n            const duplicates = Object.entries(teamCounts).filter(([team, count]) => count > 1);\n            if (duplicates.length > 0) {\n                alert(`Warning: Teams appearing multiple times: ${duplicates.map(([team, count]) => `${team} (${count}x)`).join(', ')}`);\n            } else {\n                alert('All fixtures look good! No duplicate teams found.');\n            }\n\n            // Enhanced validation: Check fixtures against API for current date alignment\n            await this.validateFixturesAgainstAPI(fixtures, gameweek);\n\n        } catch (error) {\n            console.error('Error checking fixtures:', error);\n            alert('Error checking fixtures: ' + error.message);\n        }\n    }\n\n    // Reallocate fixtures between game weeks\n    async reallocateFixtures() {\n        try {\n            const sourceGameweek = document.querySelector('#source-gameweek').value;\n            const targetGameweek = document.querySelector('#target-gameweek').value;\n            \n            if (sourceGameweek === targetGameweek) {\n                alert('Source and target game weeks must be different');\n                return;\n            }\n            \n            if (!confirm(`Are you sure you want to move all fixtures from Game Week ${sourceGameweek} to Game Week ${targetGameweek}? This will overwrite any existing fixtures in the target game week.`)) {\n                return;\n            }\n            \n            // Get source fixtures\n            const sourceGameweekKey = sourceGameweek === 'tiebreak' ? 'gwtiebreak' : `gw${sourceGameweek}`;\n            const sourceEditionGameweekKey = `edition${window.currentActiveEdition}_${sourceGameweekKey}`;\n            const sourceDoc = await this.db.collection('fixtures').doc(sourceEditionGameweekKey).get();\n            \n            if (!sourceDoc.exists) {\n                alert(`No fixtures found for Game Week ${sourceGameweek}`);\n                return;\n            }\n            \n            const sourceFixtures = sourceDoc.data().fixtures || [];\n            if (sourceFixtures.length === 0) {\n                alert(`No fixtures found for Game Week ${sourceGameweek}`);\n                return;\n            }\n            \n            // Save to target game week\n            const targetGameweekKey = targetGameweek === 'tiebreak' ? 'gwtiebreak' : `gw${targetGameweek}`;\n            const targetEditionGameweekKey = `edition${window.currentActiveEdition}_${targetGameweekKey}`;\n            \n            await this.db.collection('fixtures').doc(targetEditionGameweekKey).set({\n                fixtures: sourceFixtures,\n                gameweek: targetGameweek,\n                edition: window.currentActiveEdition,\n                lastUpdated: new Date()\n            });\n            \n            // Delete source fixtures\n            await this.db.collection('fixtures').doc(sourceEditionGameweekKey).delete();\n            \n            alert(`Successfully moved ${sourceFixtures.length} fixtures from Game Week ${sourceGameweek} to Game Week ${targetGameweek}`);\n            \n            // Refresh the display for the current gameweek\n            this.loadFixturesForGameweek();\n            \n            // Update status display\n            const statusElement = document.querySelector('#reallocate-status');\n            if (statusElement) {\n                statusElement.textContent = `✅ Successfully moved ${sourceFixtures.length} fixtures from Game Week ${sourceGameweek} to Game Week ${targetGameweek}`;\n                statusElement.style.color = '#28a745';\n                setTimeout(() => {\n                    statusElement.textContent = '';\n                }, 5000);\n            }\n            \n        } catch (error) {\n            console.error('Error reallocating fixtures:', error);\n            alert('Error reallocating fixtures: ' + error.message);\n            \n            // Update status display\n            const statusElement = document.querySelector('#reallocate-status');\n            if (statusElement) {\n                statusElement.textContent = `❌ Error: ${error.message}`;\n                statusElement.style.color = '#dc3545';\n            }\n        }\n    }\n\n    // Delete all fixtures from a game week\n    async deleteAllFixtures() {\n        try {\n            const gameweek = document.querySelector('#delete-gameweek').value;\n            \n            if (!confirm(`Are you sure you want to delete ALL fixtures from Game Week ${gameweek}? This action cannot be undone.`)) {\n                return;\n            }\n            \n            // Use the same format as the main app.js file\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${window.currentActiveEdition}_${gameweekKey}`;\n            \n            await this.db.collection('fixtures').doc(editionGameweekKey).delete();\n            \n            alert(`Successfully deleted all fixtures from Game Week ${gameweek}`);\n            \n            // Clear the display and show empty state\n            this.displayFixtures([]);\n            \n            // Update status display\n            const statusElement = document.querySelector('#delete-status');\n            if (statusElement) {\n                statusElement.textContent = `✅ Successfully deleted all fixtures from Game Week ${gameweek}`;\n                statusElement.style.color = '#28a745';\n                setTimeout(() => {\n                    statusElement.textContent = '';\n                }, 5000);\n            }\n            \n        } catch (error) {\n            console.error('Error deleting fixtures:', error);\n            alert('Error deleting fixtures: ' + error.message);\n            \n            // Update status display\n            const statusElement = document.querySelector('#delete-status');\n            if (statusElement) {\n                statusElement.textContent = `❌ Error: ${error.message}`;\n                statusElement.style.color = '#dc3545';\n            }\n        }\n    }\n\n    // Validate fixtures against API for current date alignment\n    async validateFixturesAgainstAPI(fixtures, gameweek) {\n        try {\n            console.log('🔍 Validating fixtures against API for current date alignment...');\n            \n            // Get current date\n            const currentDate = new Date();\n            const currentDateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD format\n            \n            console.log(`📅 Current date: ${currentDateString}`);\n            console.log(`🎯 Checking ${fixtures.length} fixtures for Game Week ${gameweek}`);\n            \n            // Extract unique dates from fixtures\n            const fixtureDates = [...new Set(fixtures.map(f => f.date))];\n            console.log(`📅 Fixture dates found: ${fixtureDates.join(', ')}`);\n            \n            // Check if any fixtures are scheduled for today or recent dates\n            const today = new Date(currentDateString);\n            const recentFixtures = fixtures.filter(fixture => {\n                if (!fixture.date) return false;\n                const fixtureDate = new Date(fixture.date);\n                const diffTime = Math.abs(today - fixtureDate);\n                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                return diffDays <= 7; // Check fixtures within 7 days\n            });\n            \n            if (recentFixtures.length > 0) {\n                console.log(`🎯 Found ${recentFixtures.length} recent fixtures within 7 days:`);\n                recentFixtures.forEach(f => {\n                    const fixtureDate = new Date(f.date);\n                    const diffTime = Math.abs(today - fixtureDate);\n                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                    console.log(`  - ${f.homeTeam} vs ${f.awayTeam} on ${f.date} (${diffDays} days ${diffDays === 0 ? 'from now' : diffDays > 0 ? 'ago' : 'from now'})`);\n                });\n                \n                // Check if we should validate against API\n                const shouldValidateAPI = recentFixtures.some(f => {\n                    const fixtureDate = new Date(f.date);\n                    const diffTime = Math.abs(today - fixtureDate);\n                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                    return diffDays <= 3; // Only validate fixtures within 3 days\n                });\n                \n                if (shouldValidateAPI) {\n                    console.log('🔍 Recent fixtures found - validating against API...');\n                    await this.validateRecentFixturesAgainstAPI(recentFixtures);\n                } else {\n                    console.log('📅 Fixtures are recent but not close enough to warrant API validation');\n                }\n            } else {\n                console.log('📅 No recent fixtures found - all fixtures are more than 7 days away');\n            }\n            \n            // Show validation summary\n            this.showFixtureValidationSummary(fixtures, recentFixtures);\n            \n        } catch (error) {\n            console.error('❌ Error validating fixtures against API:', error);\n        }\n    }\n\n    // Validate recent fixtures against API\n    async validateRecentFixturesAgainstAPI(recentFixtures) {\n        try {\n            console.log('🔍 Fetching API data to validate recent fixtures...');\n            \n            // Get the first recent fixture to determine the date range\n            const firstFixture = recentFixtures[0];\n            const fixtureDate = new Date(firstFixture.date);\n            \n            // Format date for API (YYYY-MM-DD)\n            const apiDate = fixtureDate.toISOString().split('T')[0];\n            \n            // Check if we have API configuration\n            if (!window.footballWebPagesConfig || !window.footballWebPagesConfig.RAPIDAPI_KEY) {\n                console.log('⚠️ No API configuration found - skipping API validation');\n                return;\n            }\n            \n            // Fetch fixtures from API for this date\n            const apiUrl = `https://football-web-pages1.p.rapidapi.com/fixtures-results.json?from=${apiDate}&to=${apiDate}&comp=5&season=2025-2026`;\n            \n            console.log(`🔍 Fetching API data for ${apiDate}: ${apiUrl}`);\n            \n            const response = await fetch(apiUrl, {\n                method: 'GET',\n                headers: {\n                    'X-RapidAPI-Key': window.footballWebPagesConfig.RAPIDAPI_KEY,\n                    'X-RapidAPI-Host': window.footballWebPagesConfig.RAPIDAPI_HOST\n                }\n            });\n            \n            if (response.ok) {\n                const apiData = await response.json();\n                console.log('✅ API data fetched successfully:', apiData);\n                \n                // Validate fixtures against API data\n                this.validateFixturesWithAPIData(recentFixtures, apiData);\n            } else {\n                console.log(`⚠️ API request failed: ${response.status} ${response.statusText}`);\n            }\n            \n        } catch (error) {\n            console.error('❌ Error fetching API data for validation:', error);\n        }\n    }\n\n    // Validate fixtures with API data\n    validateFixturesWithAPIData(fixtures, apiData) {\n        try {\n            console.log('🔍 Validating fixtures against API data...');\n            \n            // Extract fixtures from API response\n            let apiFixtures = [];\n            if (apiData['fixtures-results']) {\n                const fixturesData = apiData['fixtures-results'];\n                if (fixturesData.matches && Array.isArray(fixturesData.matches)) {\n                    apiFixtures = fixturesData.matches;\n                }\n            }\n            \n            console.log(`📅 Found ${apiFixtures.length} fixtures in API response`);\n            \n            // Check each fixture against API data\n            fixtures.forEach(fixture => {\n                const fixtureDate = new Date(fixture.date);\n                const apiDate = fixtureDate.toISOString().split('T')[0];\n                \n                // Find matching API fixture\n                const matchingAPIFixture = apiFixtures.find(apiFixture => {\n                    const apiFixtureDate = apiFixture.date;\n                    if (!apiFixtureDate) return false;\n                    \n                    // Check if dates match\n                    const apiDateObj = new Date(apiFixtureDate);\n                    const fixtureDateObj = new Date(fixture.date);\n                    \n                    return apiDateObj.toDateString() === fixtureDateObj.toDateString();\n                });\n                \n                if (matchingAPIFixture) {\n                    console.log(`✅ Fixture validated: ${fixture.homeTeam} vs ${fixture.awayTeam} on ${fixture.date}`);\n                    console.log(`  - API data: ${matchingAPIFixture['home-team']?.name || 'N/A'} vs ${matchingAPIFixture['away-team']?.name || 'N/A'}`);\n                } else {\n                    console.log(`⚠️ Fixture not found in API: ${fixture.homeTeam} vs ${fixture.awayTeam} on ${fixture.date}`);\n                }\n            });\n            \n        } catch (error) {\n            console.error('❌ Error validating fixtures with API data:', error);\n        }\n    }\n\n    // Show fixture validation summary\n    showFixtureValidationSummary(fixtures, recentFixtures) {\n        const validationResults = document.querySelector('#fixture-validation-results');\n        const validationStatus = document.querySelector('#validation-status');\n        const validationDetails = document.querySelector('#validation-details');\n        \n        if (!validationResults || !validationStatus || !validationDetails) {\n            console.log('Validation results elements not found');\n            return;\n        }\n        \n        const totalFixtures = fixtures.length;\n        const recentCount = recentFixtures.length;\n        const currentDate = new Date().toISOString().split('T')[0];\n        \n        let statusHtml = `<h4>🔍 Fixture Validation Complete</h4>`;\n        statusHtml += `<p><strong>Total Fixtures:</strong> ${totalFixtures}</p>`;\n        statusHtml += `<p><strong>Recent Fixtures (within 7 days):</strong> ${recentCount}</p>`;\n        statusHtml += `<p><strong>Current Date:</strong> ${currentDate}</p>`;\n        \n        if (recentCount > 0) {\n            statusHtml += `<p><strong>Recent Fixtures:</strong></p>`;\n            statusHtml += `<ul>`;\n            recentFixtures.forEach(fixture => {\n                const fixtureDate = new Date(fixture.date);\n                const today = new Date();\n                const diffTime = Math.abs(today - fixtureDate);\n                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                \n                let timeDescription;\n                if (diffDays === 0) {\n                    timeDescription = 'Today';\n                } else if (diffDays === 1) {\n                    timeDescription = 'Yesterday';\n                } else if (diffDays > 0) {\n                    timeDescription = `${diffDays} days ago`;\n                } else {\n                    timeDescription = `${Math.abs(diffDays)} days from now`;\n                }\n                \n                statusHtml += `<li>${fixture.homeTeam} vs ${fixture.awayTeam} on ${fixture.date} (${timeDescription})</li>`;\n            });\n            statusHtml += `</ul>`;\n        }\n        \n        validationStatus.innerHTML = statusHtml;\n        validationStatus.className = 'validation-status success';\n        \n        // Show additional details\n        validationDetails.innerHTML = `\n            <h5>Validation Details:</h5>\n            <ul>\n                <li>✅ Basic fixture validation completed</li>\n                <li>🔍 API validation attempted for recent fixtures</li>\n                <li>📅 Date alignment checked against current date</li>\n                <li>🎯 Recent fixtures highlighted for attention</li>\n            </ul>\n        `;\n        \n        validationResults.style.display = 'block';\n    }\n\n    // Load fixtures for gameweek\n    loadFixturesForGameweek() {\n        const gameweekSelect = document.querySelector('#gameweek-select');\n        if (!gameweekSelect) {\n            console.log('Gameweek select not found, skipping fixture load');\n            return;\n        }\n        \n        const gameweek = gameweekSelect.value;\n        // Use the same format as the main app.js file\n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        const editionGameweekKey = `edition${window.currentActiveEdition}_${gameweekKey}`;\n        \n        this.db.collection('fixtures').doc(editionGameweekKey).get().then(doc => {\n            if (doc.exists) {\n                const fixtures = doc.data().fixtures || [];\n                this.displayFixtures(fixtures);\n            } else {\n                this.displayFixtures([]);\n            }\n        }).catch(error => {\n            console.error('Error loading fixtures:', error);\n            this.displayFixtures([]);\n        });\n    }\n\n    // Display fixtures\n    displayFixtures(fixtures) {\n        const fixturesContainer = document.querySelector('#fixtures-container');\n        if (!fixturesContainer) return;\n\n        fixturesContainer.innerHTML = '';\n        \n        if (fixtures.length === 0) {\n            this.addFixtureRow();\n            // Clear the table display when no fixtures\n            const fixturesTableContainer = document.querySelector('#fixtures-table-container');\n            if (fixturesTableContainer) {\n                fixturesTableContainer.innerHTML = '<p>No fixtures found for this gameweek</p>';\n            }\n            return;\n        }\n\n        // Only show the table format for viewing, not the input forms\n        this.displayFixturesTable(fixtures);\n    }\n\n    // Display fixtures in edit mode (input forms)\n    displayFixturesForEditing(fixtures) {\n        const fixturesContainer = document.querySelector('#fixtures-container');\n        if (!fixturesContainer) return;\n\n        fixturesContainer.innerHTML = '';\n        \n        if (fixtures.length === 0) {\n            this.addFixtureRow();\n            return;\n        }\n\n        fixtures.forEach(fixture => {\n            this.addFixtureRowWithData(fixture);\n        });\n    }\n\n    // Edit fixtures - switch to edit mode\n    async editFixtures() {\n        try {\n            const gameweek = document.querySelector('#gameweek-select').value;\n            if (!gameweek) {\n                alert('Please select a gameweek first');\n                return;\n            }\n\n            // Hide the Current Fixtures table when switching to edit mode\n            const fixturesTableContainer = document.querySelector('#fixtures-table-container');\n            if (fixturesTableContainer) {\n                fixturesTableContainer.style.display = 'none';\n            }\n\n            // Load fixtures for editing\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${window.currentActiveEdition}_${gameweekKey}`;\n            \n            const doc = await this.db.collection('fixtures').doc(editionGameweekKey).get();\n            if (doc.exists) {\n                const fixtures = doc.data().fixtures || [];\n                this.displayFixturesForEditing(fixtures);\n            } else {\n                // No fixtures exist, show empty edit form\n                this.displayFixturesForEditing([]);\n            }\n        } catch (error) {\n            console.error('Error loading fixtures for editing:', error);\n            alert('Error loading fixtures for editing: ' + error.message);\n        }\n    }\n\n    // Switch back to view mode\n    switchToViewMode() {\n        // Show the Current Fixtures table when switching back to view mode\n        const fixturesTableContainer = document.querySelector('#fixtures-table-container');\n        if (fixturesTableContainer) {\n            fixturesTableContainer.style.display = 'block';\n        }\n        this.loadFixturesForGameweek();\n    }\n\n    // Display fixtures in a table format for admin viewing\n    displayFixturesTable(fixtures) {\n        const fixturesTableContainer = document.querySelector('#fixtures-table-container');\n        if (!fixturesTableContainer) return;\n\n        if (fixtures.length === 0) {\n            fixturesTableContainer.innerHTML = '<p>No fixtures found for this gameweek</p>';\n            return;\n        }\n\n        let tableHTML = `\n            <h4>Current Fixtures</h4>\n            <table class=\"league-table\">\n                <thead>\n                    <tr>\n                        <th>Home Team</th>\n                        <th>Away Team</th>\n                        <th>Date</th>\n                        <th>Kick-Off Time</th>\n                        <th>Venue</th>\n                        <th>Status</th>\n                    </tr>\n                </thead>\n                <tbody>\n        `;\n\n        fixtures.forEach(fixture => {\n            // Format the date and time properly\n            let dateDisplay = 'TBD';\n            let timeDisplay = 'TBD';\n            \n            if (fixture.date) {\n                try {\n                    const dateObj = new Date(fixture.date);\n                    if (!isNaN(dateObj.getTime())) {\n                        dateDisplay = dateObj.toLocaleDateString('en-GB', {\n                            weekday: 'short',\n                            year: 'numeric',\n                            month: 'short',\n                            day: 'numeric'\n                        });\n                    }\n                } catch (e) {\n                    console.warn('Invalid date format:', fixture.date);\n                }\n            }\n            \n            // Prioritize kickOffTime over dateTime for time display\n            if (fixture.kickOffTime && fixture.kickOffTime !== 'TBD') {\n                try {\n                    // Parse the time string (HH:MM:SS or HH:MM)\n                    const timeParts = fixture.kickOffTime.split(':');\n                    if (timeParts.length >= 2) {\n                        const hours = timeParts[0];\n                        const minutes = timeParts[1];\n                        timeDisplay = `${hours}:${minutes}`;\n                        console.log(`Time display from kickOffTime: ${timeDisplay} (from ${fixture.kickOffTime})`);\n                    }\n                } catch (e) {\n                    console.warn('Invalid time format:', fixture.kickOffTime);\n                }\n            } else if (fixture.time && fixture.time !== 'TBD') {\n                // Handle 'time' field from API imports\n                try {\n                    const timeParts = fixture.time.split(':');\n                    if (timeParts.length >= 2) {\n                        const hours = timeParts[0];\n                        const minutes = timeParts[1];\n                        timeDisplay = `${hours}:${minutes}`;\n                        console.log(`Time display from time field: ${timeDisplay} (from ${fixture.time})`);\n                    }\n                } catch (e) {\n                    console.warn('Invalid time format:', fixture.time);\n                }\n            } else if (fixture.dateTime) {\n                try {\n                    const dateTimeObj = new Date(fixture.dateTime);\n                    if (!isNaN(dateTimeObj.getTime())) {\n                        timeDisplay = dateTimeObj.toLocaleTimeString('en-GB', {\n                            hour: '2-digit',\n                            minute: '2-digit',\n                            hour12: false\n                        });\n                        console.log(`Time display from dateTime: ${timeDisplay} (from ${fixture.dateTime})`);\n                    }\n                } catch (e) {\n                    console.warn('Invalid datetime format:', fixture.dateTime);\n                }\n            }\n            \n            // Debug logging\n            console.log(`Fixture ${fixture.homeTeam} vs ${fixture.awayTeam}:`, {\n                date: fixture.date,\n                kickOffTime: fixture.kickOffTime,\n                time: fixture.time,\n                dateTime: fixture.dateTime,\n                finalTimeDisplay: timeDisplay\n            });\n\n            tableHTML += `\n                <tr>\n                    <td>${fixture.homeTeam || 'TBD'}</td>\n                    <td>${fixture.awayTeam || 'TBD'}</td>\n                    <td>${dateDisplay}</td>\n                    <td>${timeDisplay}</td>\n                    <td>${fixture.venue || 'TBD'}</td>\n                    <td>${fixture.status || 'NS'}</td>\n                </tr>\n            `;\n        });\n\n        tableHTML += `\n                </tbody>\n            </table>\n        `;\n\n        fixturesTableContainer.innerHTML = tableHTML;\n    }\n\n    // Add fixture row with data\n    addFixtureRowWithData(fixture) {\n        const fixturesContainer = document.querySelector('#fixtures-container');\n        if (!fixturesContainer) return;\n\n        // Reconstruct the datetime-local value from date and kickOffTime\n        let datetimeValue = '';\n        if (fixture.date && (fixture.kickOffTime || fixture.time)) {\n            try {\n                // Use kickOffTime first, fallback to time field\n                const timeValue = fixture.kickOffTime && fixture.kickOffTime !== 'TBD' ? fixture.kickOffTime : fixture.time;\n                \n                // Combine date and time into ISO format for datetime-local input\n                const dateTime = new Date(`${fixture.date}T${timeValue}`);\n                if (!isNaN(dateTime.getTime())) {\n                    // Format as YYYY-MM-DDTHH:MM for datetime-local input\n                    const year = dateTime.getFullYear();\n                    const month = String(dateTime.getMonth() + 1).padStart(2, '0');\n                    const day = String(dateTime.getDate()).padStart(2, '0');\n                    const hours = String(dateTime.getHours()).padStart(2, '0');\n                    const minutes = String(dateTime.getMinutes()).padStart(2, '0');\n                    datetimeValue = `${year}-${month}-${day}T${hours}:${minutes}`;\n                    console.log(`Reconstructed datetime for editing: ${datetimeValue} from date: ${fixture.date}, time: ${timeValue}`);\n                }\n            } catch (e) {\n                console.warn('Error reconstructing datetime:', e);\n                // Fallback to original dateTime if available\n                datetimeValue = fixture.dateTime || '';\n            }\n        } else if (fixture.dateTime) {\n            // Use original dateTime if available\n            datetimeValue = fixture.dateTime;\n        }\n\n        const fixtureRow = document.createElement('div');\n        fixtureRow.className = 'fixture-row';\n        fixtureRow.innerHTML = `\n            <div class=\"fixture-inputs\">\n                <input type=\"text\" class=\"home-team\" value=\"${fixture.homeTeam || ''}\" placeholder=\"Home Team\">\n                <input type=\"text\" class=\"away-team\" value=\"${fixture.awayTeam || ''}\" placeholder=\"Away Team\">\n                <input type=\"datetime-local\" class=\"fixture-date\" value=\"${datetimeValue}\">\n                <input type=\"text\" class=\"venue\" value=\"${fixture.venue || ''}\" placeholder=\"Venue\">\n                <button type=\"button\" class=\"remove-fixture-btn\" onclick=\"this.parentElement.parentElement.remove()\">Remove</button>\n            </div>\n        `;\n        fixturesContainer.appendChild(fixtureRow);\n    }\n\n    // Load scores for gameweek\n    loadScoresForGameweek() {\n        const scoreGameweekSelect = document.querySelector('#score-gameweek-select');\n        if (!scoreGameweekSelect) {\n            console.log('Score gameweek select not found, skipping scores load');\n            return;\n        }\n        \n        const gameweek = scoreGameweekSelect.value;\n        // Use the same format as the main app.js file\n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        const editionGameweekKey = `edition${window.currentActiveEdition}_${gameweekKey}`;\n        \n        this.db.collection('fixtures').doc(editionGameweekKey).get().then(doc => {\n            if (doc.exists) {\n                const fixtures = doc.data().fixtures || [];\n                this.displayScores(fixtures);\n            } else {\n                this.displayScores([]);\n            }\n        }).catch(error => {\n            console.error('Error loading scores:', error);\n            this.displayScores([]);\n        });\n    }\n\n    // Display scores\n    displayScores(fixtures) {\n        const scoresContainer = document.querySelector('#scores-container');\n        if (!scoresContainer) return;\n\n        scoresContainer.innerHTML = '';\n        \n        if (fixtures.length === 0) {\n            scoresContainer.innerHTML = '<p>No fixtures found for this gameweek</p>';\n            return;\n        }\n\n        fixtures.forEach((fixture, index) => {\n            this.addScoreRow(fixture, index);\n        });\n    }\n\n    // Add score row\n    addScoreRow(fixture, index) {\n        const scoresContainer = document.querySelector('#scores-container');\n        if (!scoresContainer) return;\n\n        const scoreRow = document.createElement('div');\n        scoreRow.className = 'score-row';\n        scoreRow.innerHTML = `\n            <div class=\"score-inputs\">\n                <span class=\"team-names\">${fixture.homeTeam} vs ${fixture.awayTeam}</span>\n                <input type=\"number\" class=\"home-score\" value=\"${fixture.homeScore || ''}\" placeholder=\"0\" min=\"0\">\n                <span>-</span>\n                <input type=\"number\" class=\"away-score\" value=\"${fixture.awayScore || ''}\" placeholder=\"0\" min=\"0\">\n                <select class=\"fixture-status\">\n                    <option value=\"NS\" ${fixture.status === 'NS' ? 'selected' : ''}>Not Started</option>\n                    <option value=\"1H\" ${fixture.status === '1H' ? 'selected' : ''}>First Half</option>\n                    <option value=\"HT\" ${fixture.status === 'HT' ? 'selected' : ''}>Half Time</option>\n                    <option value=\"2H\" ${fixture.status === '2H' ? 'selected' : ''}>Second Half</option>\n                    <option value=\"FT\" ${fixture.status === 'FT' ? 'selected' : ''}>Full Time</option>\n                    <option value=\"AET\" ${fixture.status === 'AET' ? 'selected' : ''}>Extra Time</option>\n                    <option value=\"PEN\" ${fixture.status === 'PEN' ? 'selected' : ''}>Penalties</option>\n                </select>\n                <span class=\"fixture-date\">${fixture.date ? new Date(fixture.date).toLocaleDateString('en-GB') : 'TBD'}</span>\n            </div>\n        `;\n        scoresContainer.appendChild(scoreRow);\n    }\n\n    // Save scores\n    async saveScores() {\n        try {\n            if (!window.currentActiveEdition) {\n                alert('No active edition selected. Please select an edition first.');\n                return;\n            }\n            \n            const gameweek = document.querySelector('#score-gameweek-select').value;\n            if (!gameweek) {\n                alert('No gameweek selected. Please select a gameweek first.');\n                return;\n            }\n            \n            // Use the same format as the main app.js file\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${window.currentActiveEdition}_${gameweekKey}`;\n            \n            const scoresContainer = document.querySelector('#scores-container');\n            if (!scoresContainer) {\n                alert('Scores container not found. Please ensure you are on the correct page.');\n                return;\n            }\n            \n            const scoreRows = document.querySelectorAll('.score-row');\n            if (scoreRows.length === 0) {\n                alert('No score rows found. Please load fixtures first.');\n                return;\n            }\n            \n            const fixtures = [];\n\n            scoreRows.forEach(row => {\n                const teamNamesElement = row.querySelector('.team-names');\n                const dateElement = row.querySelector('.fixture-date');\n                \n                if (!teamNamesElement || !dateElement) {\n                    console.warn('Missing required elements in score row:', row);\n                    return; // Skip this row\n                }\n                \n                const teamNames = teamNamesElement.textContent;\n                if (!teamNames) {\n                    console.warn('Team names element has no text content:', teamNamesElement);\n                    return; // Skip this row\n                }\n                \n                const [homeTeam, awayTeam] = teamNames.split(' vs ');\n                if (!homeTeam || !awayTeam) {\n                    console.warn('Invalid team names format:', teamNames);\n                    return; // Skip this row\n                }\n                \n                const homeScore = parseInt(row.querySelector('.home-score').value) || 0;\n                const awayScore = parseInt(row.querySelector('.away-score').value) || 0;\n                const status = row.querySelector('.fixture-status').value;\n                \n                // Handle both input and span elements for fixture-date\n                let date;\n                if (dateElement.tagName === 'INPUT') {\n                    date = dateElement.value;\n                } else {\n                    date = dateElement.textContent;\n                }\n\n                fixtures.push({\n                    homeTeam: homeTeam.trim(),\n                    awayTeam: awayTeam.trim(),\n                    homeScore,\n                    awayScore,\n                    status,\n                    date: date && date !== 'TBD' ? new Date(date).toISOString() : null\n                });\n            });\n\n            if (fixtures.length === 0) {\n                alert('No scores to save');\n                return;\n            }\n\n            await this.db.collection('fixtures').doc(editionGameweekKey).set({\n                fixtures: fixtures,\n                gameweek: gameweek,\n                edition: window.currentActiveEdition,\n                lastUpdated: new Date()\n            });\n\n            alert(`Saved scores for ${fixtures.length} fixtures in gameweek ${gameweek}`);\n\n        } catch (error) {\n            console.error('Error saving scores:', error);\n            console.error('Error details:', {\n                message: error.message,\n                stack: error.stack,\n                scoreRowsCount: document.querySelectorAll('.score-row').length,\n                scoresContainer: !!document.querySelector('#scores-container')\n            });\n            alert('Error saving scores: ' + error.message);\n        }\n    }\n\n    // Load current gameweek fixtures\n    async loadCurrentGameweekFixtures() {\n        try {\n            const currentGameweek = this.getActiveGameweek();\n            if (!currentGameweek) {\n                console.log('No active game week found');\n                return;\n            }\n            \n            const fixturesDoc = await this.db.collection('fixtures').doc(`gameweek_${currentGameweek}`).get();\n            if (fixturesDoc.exists) {\n                this.currentGameweekFixtures = fixturesDoc.data().fixtures || [];\n                console.log(`Loaded ${this.currentGameweekFixtures.length} fixtures for game week ${currentGameweek}`);\n            }\n        } catch (error) {\n            console.error('Error loading current game week fixtures:', error);\n        }\n    }\n\n    // Get active gameweek (placeholder - should be implemented based on your logic)\n    getActiveGameweek() {\n        // This should return the current active gameweek\n        // Implementation depends on your existing logic\n        return '1'; // Placeholder\n    }\n\n    // Load fixtures for deadline\n    async loadFixturesForDeadline(gameweek, userData = null, userId = null) {\n        const fixturesDisplayContainer = document.querySelector('#fixtures-display-container');\n        if (!fixturesDisplayContainer) return;\n\n        const fixturesDisplay = document.querySelector('#fixtures-display');\n        if (!fixturesDisplay) return;\n\n        try {\n            // Use the same format as the main app.js file\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${window.currentActiveEdition}_${gameweekKey}`;\n            \n            console.log('Loading fixtures for deadline:', editionGameweekKey);\n            \n            // Load edition-specific fixtures only\n            const doc = await this.db.collection('fixtures').doc(editionGameweekKey).get();\n            if (doc.exists) {\n                const fixtures = doc.data().fixtures;\n                if (fixtures && fixtures.length > 0) {\n                    console.log('Found fixtures:', fixtures.length);\n                    \n                    // Always render fixtures - let the render method handle status display\n                    this.renderFixturesDisplay(fixtures, userData, gameweek, userId);\n                    fixturesDisplayContainer.style.display = 'block';\n                } else {\n                    console.log('No fixtures found for gameweek');\n                    fixturesDisplay.innerHTML = '<p>No fixtures available for this gameweek.</p>';\n                    fixturesDisplayContainer.style.display = 'block';\n                }\n            } else {\n                console.log('No fixtures document found for:', editionGameweekKey);\n                fixturesDisplay.innerHTML = '<p>No fixtures available for this gameweek.</p>';\n                fixturesDisplayContainer.style.display = 'block';\n            }\n        } catch (error) {\n            console.error('Error loading fixtures for deadline:', error);\n            fixturesDisplay.innerHTML = '<p>Error loading fixtures. Please try again.</p>';\n            fixturesDisplayContainer.style.display = 'block';\n        }\n    }\n\n    // Render fixtures display\n    async renderFixturesDisplay(fixtures, userData = null, currentGameWeek = null, userId = null) {\n        const fixturesDisplayContainer = document.querySelector('#fixtures-display-container');\n        const fixturesDisplay = document.querySelector('#fixtures-display');\n        const deadlineDate = document.querySelector('#deadline-date');\n        const deadlineStatus = document.querySelector('#deadline-status');\n        const pickStatusDisplay = document.querySelector('#pick-status-display');\n        \n        if (!fixturesDisplayContainer || !fixturesDisplay) {\n            console.warn('Fixtures display containers not found');\n            return;\n        }\n        \n        console.log('Rendering fixtures display for', fixtures.length, 'fixtures');\n        \n        try {\n            // Show the container\n            fixturesDisplayContainer.style.display = 'block';\n            \n            if (!fixtures || fixtures.length === 0) {\n                fixturesDisplay.innerHTML = '<p>No fixtures available for this gameweek.</p>';\n                return;\n            }\n            \n            // Find the earliest fixture (deadline)\n            const earliestFixture = fixtures.reduce((earliest, fixture) => {\n                const fixtureDate = new Date(fixture.date);\n                const earliestDate = new Date(earliest.date);\n                return fixtureDate < earliestDate ? fixture : earliest;\n            });\n            \n            // Update deadline display\n            if (deadlineDate && earliestFixture.date) {\n                const deadlineDateObj = new Date(earliestFixture.date);\n                // Format the date without timezone conversion to preserve the original time\n                const year = deadlineDateObj.getFullYear();\n                const month = deadlineDateObj.getMonth();\n                const day = deadlineDateObj.getDate();\n                const hours = deadlineDateObj.getHours();\n                const minutes = deadlineDateObj.getMinutes();\n                \n                // Create a new date object in the user's local timezone but preserve the original time\n                const localDeadlineDate = new Date(year, month, day, hours, minutes);\n                \n                const formattedDeadline = localDeadlineDate.toLocaleDateString('en-GB', {\n                    weekday: 'short',\n                    month: 'short',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    timeZone: 'Europe/London' // Force UK timezone\n                });\n                deadlineDate.textContent = formattedDeadline;\n            }\n            \n            // Check if all fixtures are completed\n            const allFixturesCompleted = fixtures.every(fixture =>\n                fixture.status && (fixture.status === 'FT' || fixture.status === 'AET' || fixture.status === 'PEN')\n            );\n            \n            // Check if all fixtures have finished\n            const allFixturesFinished = fixtures.every(fixture =>\n                fixture.status && fixture.status !== 'NS' && fixture.status !== '1H' && fixture.status !== 'HT' && fixture.status !== '2H'\n            );\n            \n            // Update status display\n            if (deadlineStatus) {\n                if (allFixturesCompleted) {\n                    deadlineStatus.textContent = 'All fixtures completed';\n                    deadlineStatus.style.color = '#28a745';\n                } else if (allFixturesFinished) {\n                    deadlineStatus.textContent = 'All fixtures finished, processing results...';\n                    deadlineStatus.style.color = '#ffc107';\n                } else {\n                    deadlineStatus.textContent = 'Fixtures in progress';\n                    deadlineStatus.style.color = '#007bff';\n                }\n            }\n            \n            // Update pick status\n            if (pickStatusDisplay && userData && userData.picks) {\n                const gameweekKey = currentGameWeek === 'tiebreak' ? 'gwtiebreak' : `gw${currentGameWeek}`;\n                const userPick = userData.picks[gameweekKey];\n                \n                if (userPick) {\n                    pickStatusDisplay.textContent = `Pick made: ${userPick.team}`;\n                    pickStatusDisplay.style.color = '#28a745';\n                } else {\n                    pickStatusDisplay.textContent = 'No pick made yet';\n                    pickStatusDisplay.style.color = '#dc3545';\n                }\n            }\n            \n            // Render fixtures\n            let fixturesHTML = '<div class=\"fixtures-list\">';\n            fixtures.forEach((fixture, index) => {\n                const fixtureDate = new Date(fixture.date);\n                // Format the date without timezone conversion to preserve the original time\n                const year = fixtureDate.getFullYear();\n                const month = fixtureDate.getMonth();\n                const day = fixtureDate.getDate();\n                const hours = fixtureDate.getHours();\n                const minutes = fixtureDate.getMinutes();\n                \n                // Create a new date object in the user's local timezone but preserve the original time\n                const localFixtureDate = new Date(year, month, day, hours, minutes);\n                \n                const formattedDate = localFixtureDate.toLocaleDateString('en-GB', {\n                    weekday: 'short',\n                    month: 'short',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    timeZone: 'Europe/London' // Force UK timezone\n                });\n                \n                let statusClass = 'fixture-status';\n                let statusText = fixture.status || 'NS';\n                \n                if (fixture.status === 'FT' || fixture.status === 'AET' || fixture.status === 'PEN') {\n                    statusClass += ' completed';\n                } else if (fixture.status === '1H' || fixture.status === 'HT' || fixture.status === '2H') {\n                    statusClass += ' in-progress';\n                } else if (fixture.status === 'NS') {\n                    statusClass += ' not-started';\n                }\n                \n                fixturesHTML += `\n                    <div class=\"fixture-item\">\n                        <div class=\"fixture-header\">\n                            <span class=\"fixture-date\">${formattedDate}</span>\n                            <span class=\"${statusClass}\">${statusText}</span>\n                        </div>\n                        <div class=\"fixture-teams\">\n                            <span class=\"team home-team\">${fixture.homeTeam}</span>\n                            <span class=\"vs\">v</span>\n                            <span class=\"team away-team\">${fixture.awayTeam}</span>\n                        </div>\n                        ${fixture.homeScore !== undefined && fixture.awayScore !== undefined ? \n                            `<div class=\"fixture-score\">${fixture.homeScore} - ${fixture.awayScore}</div>` : \n                            '<div class=\"fixture-score\">-</div>'\n                        }\n                    </div>\n                `;\n            });\n            \n            fixturesHTML += '</div>';\n            fixturesDisplay.innerHTML = fixturesHTML;\n            \n        } catch (error) {\n            console.error('Error rendering fixtures display:', error);\n            fixturesDisplay.innerHTML = '<p>Error loading fixtures. Please try again.</p>';\n        }\n    }\n\n    // Load mobile fixtures for deadline\n    async loadMobileFixturesForDeadline(gameweek, userData = null, userId = null) {\n        const fixturesDisplayContainer = document.querySelector('#mobile-fixtures-display-container');\n        if (!fixturesDisplayContainer) return;\n\n        const fixturesDisplay = document.querySelector('#mobile-fixtures-display');\n        if (!fixturesDisplay) return;\n\n        try {\n            // Use the same format as the main app.js file\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${window.currentActiveEdition}_${gameweekKey}`;\n            \n            console.log('Loading mobile fixtures for deadline:', editionGameweekKey);\n            \n            // Load edition-specific fixtures only\n            const doc = await this.db.collection('fixtures').doc(editionGameweekKey).get();\n            if (doc.exists) {\n                const fixtures = doc.data().fixtures;\n                if (fixtures && fixtures.length > 0) {\n                    console.log('Found mobile fixtures:', fixtures.length);\n                    \n                    // Always render fixtures - let the render method handle status display\n                    this.renderMobileFixturesDisplay(fixtures, userData, gameweek, userId);\n                    fixturesDisplayContainer.style.display = 'block';\n                } else {\n                    console.log('No mobile fixtures found for gameweek');\n                    fixturesDisplay.innerHTML = '<p>No fixtures available for this gameweek.</p>';\n                    fixturesDisplayContainer.style.display = 'block';\n                }\n            } else {\n                console.log('No mobile fixtures document found for:', editionGameweekKey);\n                fixturesDisplay.innerHTML = '<p>No fixtures available for this gameweek.</p>';\n                fixturesDisplayContainer.style.display = 'block';\n            }\n        } catch (error) {\n            console.error('Error loading mobile fixtures for deadline:', error);\n            fixturesDisplay.innerHTML = '<p>Error loading fixtures. Please try again.</p>';\n            fixturesDisplayContainer.style.display = 'block';\n        }\n    }\n\n    // Render mobile fixtures display\n    async renderMobileFixturesDisplay(fixtures, userData = null, currentGameWeek = null, userId = null) {\n        const fixturesDisplayContainer = document.querySelector('#mobile-fixtures-display-container');\n        const fixturesDisplay = document.querySelector('#mobile-fixtures-display');\n        const deadlineDate = document.querySelector('#mobile-deadline-date');\n        const deadlineStatus = document.querySelector('#mobile-deadline-status');\n        const pickStatusDisplay = document.querySelector('#mobile-pick-status-display');\n        \n        if (!fixturesDisplayContainer || !fixturesDisplay) {\n            console.warn('Mobile fixtures display containers not found');\n            return;\n        }\n        \n        console.log('Rendering mobile fixtures display for', fixtures.length, 'fixtures');\n        \n        try {\n            // Show the container\n            fixturesDisplayContainer.style.display = 'block';\n            \n            if (!fixtures || fixtures.length === 0) {\n                fixturesDisplay.innerHTML = '<p>No fixtures available for this gameweek.</p>';\n                return;\n            }\n            \n            // Find the earliest fixture (deadline)\n            const earliestFixture = fixtures.reduce((earliest, fixture) => {\n                const fixtureDate = new Date(fixture.date);\n                const earliestDate = new Date(earliest.date);\n                return fixtureDate < earliestDate ? fixture : earliest;\n            });\n            \n            // Update deadline display\n            if (deadlineDate && earliestFixture.date) {\n                const deadlineDateObj = new Date(earliestFixture.date);\n                // Format the date without timezone conversion to preserve the original time\n                const year = deadlineDateObj.getFullYear();\n                const month = deadlineDateObj.getMonth();\n                const day = deadlineDateObj.getDate();\n                const hours = deadlineDateObj.getHours();\n                const minutes = deadlineDateObj.getMinutes();\n                \n                // Create a new date object in the user's local timezone but preserve the original time\n                const localDeadlineDate = new Date(year, month, day, hours, minutes);\n                \n                const formattedDeadline = localDeadlineDate.toLocaleDateString('en-GB', {\n                    weekday: 'short',\n                    month: 'short',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    timeZone: 'Europe/London' // Force UK timezone\n                });\n                deadlineDate.textContent = formattedDeadline;\n            }\n            \n            // Check if all fixtures are completed\n            const allFixturesCompleted = fixtures.every(fixture =>\n                fixture.status && (fixture.status === 'FT' || fixture.status === 'AET' || fixture.status === 'PEN')\n            );\n            \n            // Check if all fixtures have finished\n            const allFixturesFinished = fixtures.every(fixture =>\n                fixture.status && fixture.status !== 'NS' && fixture.status !== '1H' && fixture.status !== 'HT' && fixture.status !== '2H'\n            );\n            \n            // Update status display\n            if (deadlineStatus) {\n                if (allFixturesCompleted) {\n                    deadlineStatus.textContent = 'All fixtures completed';\n                    deadlineStatus.style.color = '#28a745';\n                } else if (allFixturesFinished) {\n                    deadlineStatus.textContent = 'All fixtures finished, processing results...';\n                    deadlineStatus.style.color = '#ffc107';\n                } else {\n                    deadlineStatus.textContent = 'Fixtures in progress';\n                    deadlineStatus.style.color = '#007bff';\n                }\n            }\n            \n            // Update pick status\n            if (pickStatusDisplay && userData && userData.picks) {\n                const gameweekKey = currentGameWeek === 'tiebreak' ? 'gwtiebreak' : `gw${currentGameWeek}`;\n                const userPick = userData.picks[gameweekKey];\n                \n                if (userPick) {\n                    pickStatusDisplay.textContent = `Pick made: ${userPick.team}`;\n                    pickStatusDisplay.style.color = '#28a745';\n                } else {\n                    pickStatusDisplay.textContent = 'No pick made yet';\n                    pickStatusDisplay.style.color = '#dc3545';\n                }\n            }\n            \n            // Render fixtures\n            let fixturesHTML = '<div class=\"mobile-fixtures-list\">';\n            fixtures.forEach((fixture, index) => {\n                const fixtureDate = new Date(fixture.date);\n                // Format the date without timezone conversion to preserve the original time\n                const year = fixtureDate.getFullYear();\n                const month = fixtureDate.getMonth();\n                const day = fixtureDate.getDate();\n                const hours = fixtureDate.getHours();\n                const minutes = fixtureDate.getMinutes();\n                \n                // Create a new date object in the user's local timezone but preserve the original time\n                const localFixtureDate = new Date(year, month, day, hours, minutes);\n                \n                const formattedDate = localFixtureDate.toLocaleDateString('en-GB', {\n                    month: 'short',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    timeZone: 'Europe/London' // Force UK timezone\n                });\n                \n                let statusClass = 'mobile-fixture-status';\n                let statusText = fixture.status || 'NS';\n                \n                if (fixture.status === 'FT' || fixture.status === 'AET' || fixture.status === 'PEN') {\n                    statusClass += ' completed';\n                } else if (fixture.status === '1H' || fixture.status === 'HT' || fixture.status === '2H') {\n                    statusClass += ' in-progress';\n                } else if (fixture.status === 'NS') {\n                    statusClass += ' not-started';\n                }\n                \n                fixturesHTML += `\n                    <div class=\"mobile-fixture-item\">\n                        <div class=\"mobile-fixture-header\">\n                            <span class=\"mobile-fixture-date\">${formattedDate}</span>\n                            <span class=\"${statusClass}\">${statusText}</span>\n                        </div>\n                        <div class=\"mobile-fixture-teams\">\n                            <span class=\"mobile-team home-team\">${fixture.homeTeam}</span>\n                            <span class=\"mobile-vs\">v</span>\n                            <span class=\"mobile-team away-team\">${fixture.awayTeam}</span>\n                        </div>\n                        ${fixture.homeScore !== undefined && fixture.awayScore !== undefined ? \n                            `<div class=\"mobile-fixture-score\">${fixture.homeScore} - ${fixture.awayScore}</div>` : \n                            '<div class=\"mobile-fixture-score\">-</div>'\n                        }\n                    </div>\n                `;\n            });\n            \n            fixturesHTML += '</div>';\n            fixturesDisplay.innerHTML = fixturesHTML;\n            \n        } catch (error) {\n            console.error('Error rendering mobile fixtures display:', error);\n            fixturesDisplay.innerHTML = '<p>Error loading fixtures. Please try again.</p>';\n        }\n    }\n\n    // Switch to fixtures tab\n    switchToFixturesTab() {\n        // Switch mobile tab to fixtures\n        const mobileFixturesTab = document.querySelector('.mobile-tabs .tab-btn[data-tab=\"fixtures\"]');\n        const mobileFixturesPane = document.getElementById('fixtures-tab');\n\n        if (mobileFixturesTab) mobileFixturesTab.classList.add('active');\n        if (mobileFixturesPane) mobileFixturesPane.classList.add('active');\n\n        // Switch desktop tab to fixtures\n        const desktopFixturesTab = document.querySelector('.desktop-tabs .desktop-tab-btn[data-tab=\"fixtures\"]');\n        const desktopFixturesPane = document.getElementById('desktop-fixtures-tab');\n\n        if (desktopFixturesTab) desktopFixturesTab.classList.add('active');\n        if (desktopFixturesPane) desktopFixturesPane.classList.add('active');\n    }\n\n    // Load competition settings\n    async loadCompetitionSettings() {\n        try {\n            const doc = await this.db.collection('settings').doc('competition').get();\n            if (doc.exists) {\n                const settings = doc.data();\n                // Apply competition settings to the UI\n                console.log('Competition settings loaded:', settings);\n            }\n        } catch (error) {\n            console.error('Error loading competition settings:', error);\n        }\n    }\n\n    // Load Football Web Pages settings\n    async loadFootballWebPagesSettings() {\n        try {\n            const doc = await this.db.collection('settings').doc('footballWebPages').get();\n            if (doc.exists) {\n                const settings = doc.data();\n                // Apply API settings to the UI\n                console.log('Football Web Pages settings loaded:', settings);\n            }\n        } catch (error) {\n            console.error('Error loading Football Web Pages settings:', error);\n        }\n    }\n\n    // Save Football Web Pages settings\n    async saveFootballWebPagesSettings() {\n        try {\n            const league = document.querySelector('#football-webpages-league')?.value;\n            const season = document.querySelector('#football-webpages-season')?.value;\n            \n            if (!league || !season) {\n                alert('Please fill in all required fields');\n                return;\n            }\n\n            await this.db.collection('settings').doc('footballWebPages').set({\n                league,\n                season,\n                lastUpdated: new Date()\n            });\n\n            alert('API settings saved successfully');\n        } catch (error) {\n            console.error('Error saving API settings:', error);\n            alert('Error saving API settings: ' + error.message);\n        }\n    }\n\n    // Import scores from Football Web Pages\n    async importScoresFromFootballWebPages(gameweek) {\n        try {\n            // Implementation for importing scores from Football Web Pages API\n            console.log('Importing scores from Football Web Pages for gameweek:', gameweek);\n            alert('Score import functionality would be implemented here');\n        } catch (error) {\n            console.error('Error importing scores:', error);\n            alert('Error importing scores: ' + error.message);\n        }\n    }\n\n    // Import scores from file\n    async importScoresFromFile(file, gameweek) {\n        try {\n            // Implementation for importing scores from file\n            console.log('Importing scores from file for gameweek:', gameweek);\n            alert('File import functionality would be implemented here');\n        } catch (error) {\n            console.error('Error importing scores from file:', error);\n            alert('Error importing scores from file: ' + error.message);\n        }\n    }\n\n    // Start auto score updates\n    startAutoScoreUpdates(gameweek) {\n        if (this.autoUpdateInterval) {\n            clearInterval(this.autoUpdateInterval);\n        }\n\n        this.autoUpdateInterval = setInterval(async () => {\n            await this.performAutoScoreUpdate(gameweek);\n        }, 60000); // Check every minute\n\n        console.log('Auto score updates started for gameweek:', gameweek);\n    }\n\n    // Stop auto score updates\n    stopAutoScoreUpdates() {\n        if (this.autoUpdateInterval) {\n            clearInterval(this.autoUpdateInterval);\n            this.autoUpdateInterval = null;\n        }\n        console.log('Auto score updates stopped');\n    }\n\n    // Perform auto score update\n    async performAutoScoreUpdate(gameweek) {\n        try {\n            // Implementation for automatic score updates\n            console.log('Performing auto score update for gameweek:', gameweek);\n        } catch (error) {\n            console.error('Error in auto score update:', error);\n        }\n    }\n\n    // Start real-time score updates\n    startRealTimeScoreUpdates(gameweek) {\n        if (this.realTimeUpdateInterval) {\n            clearInterval(this.realTimeUpdateInterval);\n        }\n\n        this.realTimeUpdateInterval = setInterval(async () => {\n            await this.performRealTimeUpdate(gameweek);\n        }, 30000); // Check every 30 seconds\n\n        console.log('Real-time score updates started for gameweek:', gameweek);\n    }\n\n    // Stop real-time score updates\n    stopRealTimeScoreUpdates() {\n        if (this.realTimeUpdateInterval) {\n            clearInterval(this.realTimeUpdateInterval);\n            this.realTimeUpdateInterval = null;\n        }\n        console.log('Real-time score updates stopped');\n    }\n\n    // Perform real-time update\n    async performRealTimeUpdate(gameweek) {\n        try {\n            // Implementation for real-time score updates\n            console.log('Performing real-time update for gameweek:', gameweek);\n        } catch (error) {\n            console.error('Error in real-time update:', error);\n        }\n    }\n\n    // Process results\n    processResults(gameweek, fixtures) {\n        try {\n            // Implementation for processing gameweek results\n            console.log('Processing results for gameweek:', gameweek, 'with', fixtures.length, 'fixtures');\n        } catch (error) {\n            console.error('Error processing results:', error);\n        }\n    }\n\n    // Check pick validity\n    checkPickStillValid(pick, fixtures) {\n        try {\n            // Implementation for checking if a pick is still valid\n            return true; // Placeholder\n        } catch (error) {\n            console.error('Error checking pick validity:', error);\n            return false;\n        }\n    }\n\n    // Calculate pick result\n    calculatePickResult(pick, fixtures) {\n        try {\n            // Implementation for calculating pick results\n            return 'win'; // Placeholder\n        } catch (error) {\n            console.error('Error calculating pick result:', error);\n            return 'unknown';\n        }\n    }\n\n    // Render player scores\n    async renderPlayerScores(fixtures, gameweek) {\n        try {\n            // Implementation for rendering player scores\n            console.log('Rendering player scores for gameweek:', gameweek, 'with', fixtures.length, 'fixtures');\n        } catch (error) {\n            console.error('Error rendering player scores:', error);\n        }\n    }\n\n    // Render desktop player scores\n    renderDesktopPlayerScores(fixtures, gameweek) {\n        try {\n            // Implementation for rendering desktop player scores\n            console.log('Rendering desktop player scores for gameweek:', gameweek, 'with', fixtures.length, 'fixtures');\n        } catch (error) {\n            console.error('Error rendering desktop player scores:', error);\n        }\n    }\n\n    // Render mobile player scores\n    renderMobilePlayerScores(fixtures, gameweek) {\n        try {\n            // Implementation for rendering mobile player scores\n            console.log('Rendering mobile player scores for gameweek:', gameweek, 'with', fixtures.length, 'fixtures');\n        } catch (error) {\n            console.error('Error rendering mobile player scores:', error);\n        }\n    }\n\n    // Render as-it-stands standings\n    async renderAsItStandsStandings(players, fixtures, gameweek, edition, platform) {\n        try {\n            // Implementation for rendering as-it-stands standings\n            console.log('Rendering as-it-stands standings for gameweek:', gameweek, 'edition:', edition, 'platform:', platform);\n        } catch (error) {\n            console.error('Error rendering as-it-stands standings:', error);\n        }\n    }\n\n    // Cleanup method\n    cleanup() {\n        if (this.autoUpdateInterval) {\n            clearInterval(this.autoUpdateInterval);\n        }\n        if (this.realTimeUpdateInterval) {\n            clearInterval(this.realTimeUpdateInterval);\n        }\n        console.log('FixturesManager cleaned up');\n    }\n}\n\n// Export the FixturesManager class\nexport default FixturesManager;\n","// Live Scoring Module\n// Handles real-time score updates, auto-updates, and live score management\n\nexport class LiveScoring {\n    constructor(db, currentActiveEdition = 1) {\n        this.db = db;\n        this.currentActiveEdition = currentActiveEdition;\n        this.autoUpdateInterval = null;\n        this.realTimeUpdateInterval = null;\n        this.isLoadingScores = false; // Flag to prevent multiple simultaneous loads\n    }\n\n    // Initialize live scoring functionality\n    initializeLiveScoring() {\n        console.log('Initializing live scoring...');\n        this.setupEventListeners();\n    }\n\n    // Set up event listeners for live scoring functionality\n    setupEventListeners() {\n        // Auto score update buttons\n        const startAutoUpdatesBtn = document.querySelector('#start-auto-updates-btn');\n        const stopAutoUpdatesBtn = document.querySelector('#stop-auto-updates-btn');\n        const statusDiv = document.querySelector('#auto-update-status');\n\n        if (startAutoUpdatesBtn) {\n            startAutoUpdatesBtn.addEventListener('click', () => {\n                const gameweek = document.querySelector('#score-gameweek-select')?.value;\n                if (gameweek) {\n                    this.startAutoScoreUpdates(gameweek);\n                    if (statusDiv) {\n                        statusDiv.innerHTML = '<p class=\"success\">✅ Auto score updates started. Checking every minute for half-time (45+ min) and full-time (105+ min) scores.</p>';\n                    }\n                }\n            });\n        }\n\n        if (stopAutoUpdatesBtn) {\n            stopAutoUpdatesBtn.addEventListener('click', () => {\n                this.stopAutoScoreUpdates();\n                if (statusDiv) {\n                    statusDiv.innerHTML = '<p class=\"info\">⏹️ Auto score updates stopped.</p>';\n                }\n            });\n        }\n\n        // Refresh scores button\n        const refreshScoresBtn = document.querySelector('#refresh-scores-btn');\n        if (refreshScoresBtn) {\n            refreshScoresBtn.addEventListener('click', () => this.loadScoresForGameweek());\n        }\n    }\n\n    // Load scores for a specific gameweek\n    loadScoresForGameweek() {\n        // Prevent multiple simultaneous loads\n        if (this.isLoadingScores) {\n            console.log('Scores already loading, skipping duplicate call');\n            return Promise.resolve([]);\n        }\n        \n        const scoreGameweekSelect = document.querySelector('#score-gameweek-select');\n        const container = document.querySelector('#scores-container');\n        \n        if (!scoreGameweekSelect) {\n            console.log('Score gameweek select not found, skipping scores load');\n            return Promise.resolve([]);\n        }\n        \n        if (!container) {\n            console.log('Scores container not found, skipping scores load');\n            return Promise.resolve([]);\n        }\n        \n        const gameweek = scoreGameweekSelect.value;\n        \n        console.log(`loadScoresForGameweek called - gameweek: ${gameweek}, currentActiveEdition: ${this.currentActiveEdition}`);\n        \n        this.isLoadingScores = true;\n        \n        // Clear existing scores more thoroughly\n        container.innerHTML = '';\n        container.textContent = '';\n        \n        // Return a promise that resolves with the fixtures data\n        return new Promise((resolve, reject) => {\n            // Add a small delay to ensure DOM is cleared before loading new content\n            setTimeout(async () => {\n                try {\n                    const fixtures = await this.loadScoresContent(gameweek, container);\n                    resolve(fixtures);\n                } catch (error) {\n                    // Reset loading flag on error\n                    this.isLoadingScores = false;\n                    reject(error);\n                } finally {\n                    // Ensure loading flag is always reset\n                    this.isLoadingScores = false;\n                }\n            }, 10);\n        });\n    }\n    \n        // Separate function to load the actual scores content\n    async loadScoresContent(gameweek, container) {\n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        const editionGameweekKey = `edition${this.currentActiveEdition}_${gameweekKey}`;\n        \n        console.log(`Looking for fixtures in: ${editionGameweekKey}`);\n        \n        try {\n            const doc = await this.db.collection('fixtures').doc(editionGameweekKey).get();\n            \n            if (doc.exists) {\n                const fixtures = doc.data().fixtures;\n                \n                // Initialize missing half-time score fields for fixtures that don't have them\n                const updatedFixtures = fixtures.map(fixture => {\n                    // Ensure homeScoreHT and awayScoreHT fields exist\n                    if (fixture.homeScoreHT === undefined) {\n                        fixture.homeScoreHT = null;\n                    }\n                    if (fixture.awayScoreHT === undefined) {\n                        fixture.awayScoreHT = null;\n                    }\n                    return fixture;\n                });\n                \n                // Update the database with the initialized fields if any were missing\n                const needsUpdate = fixtures.some(fixture => \n                    fixture.homeScoreHT === undefined || fixture.awayScoreHT === undefined\n                );\n                \n                if (needsUpdate) {\n                    console.log('Initializing missing half-time score fields in database');\n                    this.db.collection('fixtures').doc(editionGameweekKey).update({\n                        fixtures: updatedFixtures\n                    }).catch(error => {\n                        console.error('Error updating fixtures with initialized fields:', error);\n                    });\n                }\n                \n                updatedFixtures.forEach((fixture, index) => {\n                    this.addScoreRow(fixture, index);\n                });\n                \n                console.log(`✅ Scores loaded successfully for ${updatedFixtures.length} fixtures`);\n                \n                // Reset loading flag\n                this.isLoadingScores = false;\n                \n                // Return the fixtures data\n                return updatedFixtures;\n            } else {\n                // No fixtures found for this edition and gameweek - don't fall back to old structure\n                console.log(`No fixtures found for Edition ${this.currentActiveEdition} Game Week ${gameweek} - not falling back to old structure`);\n                container.innerHTML = `<p>No fixtures found for Edition ${this.currentActiveEdition} Game Week ${gameweek}. Please add fixtures first.</p>`;\n                \n                // Reset loading flag\n                this.isLoadingScores = false;\n                \n                // Return empty array\n                return [];\n            }\n        } catch (error) {\n            console.error('Error loading scores from new structure:', error);\n            container.innerHTML = `<p>Error loading fixtures for Edition ${this.currentActiveEdition} Game Week ${gameweek}. Please try again.</p>`;\n            \n            // Reset loading flag on error too\n            this.isLoadingScores = false;\n            \n            // Re-throw the error\n            throw error;\n        }\n    }\n\n    // Add a score row for a fixture\n    addScoreRow(fixture, index) {\n        const container = document.querySelector('#scores-container');\n        const scoreRow = document.createElement('div');\n        scoreRow.className = 'score-row';\n        \n        // Format match time properly\n        const matchTime = fixture.time ? fixture.time : (fixture.matchTime || 'TBC');\n        \n        // Determine which scores to show based on match status\n        const isCompleted = fixture.completed || fixture.status === 'FT' || fixture.status === 'COMP';\n        const hasHalfTimeScores = fixture.homeScoreHT !== null && fixture.homeScoreHT !== undefined && fixture.awayScoreHT !== null && fixture.awayScoreHT !== undefined;\n        const hasFullTimeScores = fixture.homeScore !== null && fixture.homeScore !== undefined && fixture.awayScore !== null && fixture.awayScore !== undefined;\n        \n        // Show current score if we have any scores and match is not completed\n        const hasCurrentScores = fixture.homeScore !== null && fixture.homeScore !== undefined && fixture.awayScore !== null && fixture.awayScore !== undefined;\n        const showCurrentScore = !isCompleted && hasCurrentScores;\n        \n        // Show full-time scores only if match is completed and we have scores\n        const showFullTimeScore = isCompleted && hasFullTimeScores;\n        \n        // Debug logging\n        console.log(`Fixture ${index}: ${fixture.homeTeam} vs ${fixture.awayTeam}`, {\n            homeScore: fixture.homeScore,\n            awayScore: fixture.awayScore,\n            hasCurrentScores,\n            showCurrentScore,\n            showFullTimeScore,\n            isCompleted,\n            status: fixture.status\n        });\n        \n        const currentScoreHtml = showCurrentScore ? `\n                    <div class=\"current-scores\">\n                        <label>Current Score:</label>\n                        <input type=\"number\" class=\"home-score-current\" placeholder=\"Home\" value=\"${fixture.homeScore !== null && fixture.homeScore !== undefined ? fixture.homeScore : ''}\" min=\"0\">\n                        <span>-</span>\n                        <input type=\"number\" class=\"away-score-current\" placeholder=\"Away\" value=\"${fixture.awayScore !== null && fixture.awayScore !== undefined ? fixture.awayScore : ''}\" min=\"0\">\n                    </div>\n                    ` : '';\n        \n        const halfTimeHtml = (hasHalfTimeScores || !isCompleted) ? `\n                    <div class=\"half-time-scores\">\n                        <label>Half Time:</label>\n                        <input type=\"number\" class=\"home-score-ht\" placeholder=\"HT\" value=\"${fixture.homeScoreHT !== null && fixture.homeScoreHT !== undefined ? fixture.homeScoreHT : ''}\" min=\"0\">\n                        <span>-</span>\n                        <input type=\"number\" class=\"away-score-ht\" placeholder=\"HT\" value=\"${fixture.awayScoreHT !== null && fixture.awayScoreHT !== undefined ? fixture.awayScoreHT : ''}\" min=\"0\">\n                    </div>\n                    ` : '';\n        \n        const fullTimeHtml = showFullTimeScore ? `\n                    <div class=\"full-time-scores\">\n                        <label>Full Time:</label>\n                        <input type=\"number\" class=\"home-score\" placeholder=\"Home\" value=\"${fixture.homeScore !== null && fixture.homeScore !== undefined ? fixture.homeScore : ''}\" min=\"0\">\n                        <span>-</span>\n                        <input type=\"number\" class=\"away-score\" placeholder=\"Away\" value=\"${fixture.awayScore !== null && fixture.awayScore !== undefined ? fixture.awayScore : ''}\" min=\"0\">\n                    </div>\n                    ` : '';\n        \n        scoreRow.innerHTML = `\n            <div class=\"score-inputs\">\n                <div class=\"fixture-info\">\n                    <span class=\"fixture-display\">${fixture.homeTeam} vs ${fixture.awayTeam}</span>\n                    <span class=\"match-time\">${matchTime}</span>\n                    <span class=\"match-status ${fixture.status || 'NS'}\">${this.getStatusDisplay(fixture.status)}</span>\n                </div>\n                <div class=\"score-section\">\n                    ${currentScoreHtml}\n                    ${halfTimeHtml}\n                    ${fullTimeHtml}\n                </div>\n                <div class=\"match-controls\">\n                    <input type=\"checkbox\" class=\"fixture-completed\" ${isCompleted ? 'checked' : ''}>\n                    <label>Completed</label>\n                    <select class=\"match-status-select\">\n                        <option value=\"NS\" ${fixture.status === 'NS' ? 'selected' : ''}>Not Started</option>\n                        <option value=\"POSTP\" ${fixture.status === 'POSTP' ? 'selected' : ''}>Postponed</option>\n                        <option value=\"KO\" ${fixture.status === 'KO' ? 'selected' : ''}>Kicked Off</option>\n                        <option value=\"HT\" ${fixture.status === 'HT' ? 'selected' : ''}>Half-time</option>\n                        <option value=\"FT\" ${fixture.status === 'FT' ? 'selected' : ''}>Full-time</option>\n                        <option value=\"COMP\" ${fixture.status === 'COMP' ? 'selected' : ''}>Completed</option>\n                    </select>\n                </div>\n            </div>\n        `;\n        \n        container.appendChild(scoreRow);\n    }\n\n    // Helper function to display match status\n    getStatusDisplay(status) {\n        const statusMap = {\n            'NS': 'Not Started',\n            'POSTP': 'Postponed',\n            'KO': 'Kicked Off',\n            '1H': 'First Half',\n            'HT': 'Half Time',\n            '2H': 'Second Half',\n            'FT': 'Full Time',\n            'AET': 'Extra Time',\n            'PEN': 'Penalties',\n            'COMP': 'Completed',\n            'LIVE': 'Live'\n        };\n        return statusMap[status] || status || 'Unknown';\n    }\n\n    // Start auto score updates\n    startAutoScoreUpdates(gameweek) {\n        console.log(`Starting auto score updates for gameweek ${gameweek}`);\n        \n        if (this.autoUpdateInterval) {\n            clearInterval(this.autoUpdateInterval);\n        }\n        \n        this.autoUpdateInterval = setInterval(() => {\n            this.performAutoScoreUpdate(gameweek);\n        }, 60000); // Check every minute\n    }\n\n    // Stop auto score updates\n    stopAutoScoreUpdates() {\n        console.log('Stopping auto score updates');\n        \n        if (this.autoUpdateInterval) {\n            clearInterval(this.autoUpdateInterval);\n            this.autoUpdateInterval = null;\n        }\n    }\n\n    // Perform auto score update\n    async performAutoScoreUpdate(gameweek) {\n        console.log(`Performing auto score update for gameweek ${gameweek}`);\n        \n        try {\n            // This would implement the actual score update logic\n            // For now, just log the attempt\n            console.log('Auto score update logic not yet implemented');\n        } catch (error) {\n            console.error('Error during auto score update:', error);\n        }\n    }\n\n    // Start real-time score updates\n    startRealTimeScoreUpdates(gameweek) {\n        console.log(`Starting real-time score updates for gameweek ${gameweek}`);\n        \n        if (this.realTimeUpdateInterval) {\n            clearInterval(this.realTimeUpdateInterval);\n        }\n        \n        this.realTimeUpdateInterval = setInterval(() => {\n            this.performRealTimeUpdate(gameweek);\n        }, 30000); // Check every 30 seconds\n    }\n\n    // Stop real-time score updates\n    stopRealTimeScoreUpdates() {\n        console.log('Stopping real-time score updates');\n        \n        if (this.realTimeUpdateInterval) {\n            clearInterval(this.realTimeUpdateInterval);\n            this.realTimeUpdateInterval = null;\n        }\n    }\n\n    // Perform real-time update\n    async performRealTimeUpdate(gameweek) {\n        console.log(`Performing real-time update for gameweek ${gameweek}`);\n        \n        try {\n            // This would implement the real-time score update logic\n            // For now, just log the attempt\n            console.log('Real-time update logic not yet implemented');\n        } catch (error) {\n            console.error('Error during real-time update:', error);\n        }\n    }\n\n    // Cleanup resources\n    cleanup() {\n        this.stopAutoScoreUpdates();\n        this.stopRealTimeScoreUpdates();\n    }\n}\n","// Statistics Engine Module\n// Handles score processing, result calculations, player lives management, and statistics\n\nexport class StatisticsEngine {\n    constructor(db, currentActiveEdition = 1, currentActiveGameweek = '1') {\n        this.db = db;\n        this.currentActiveEdition = currentActiveEdition;\n        this.currentActiveGameweek = currentActiveGameweek;\n        this.processedGameweeks = new Set();\n    }\n\n    // Process results and update player lives\n    processResults(gameweek, fixtures) {\n        // This function processes the results and deducts lives from players\n        // who picked losing teams\n        const displayText = gameweek === 'tiebreak' ? 'Tiebreak Round' : `Game Week ${gameweek}`;\n        console.log(`Processing results for ${displayText}`);\n        \n        // Check if this gameweek has already been processed\n        if (this.processedGameweeks.has(gameweek)) {\n            console.log(`Gameweek ${gameweek} has already been processed, skipping to prevent duplicate life deduction`);\n            return;\n        }\n        \n        // Only process if we have completed fixtures\n        const completedFixtures = fixtures.filter(fixture => fixture.completed && fixture.homeScore !== null && fixture.awayScore !== null);\n        \n        if (completedFixtures.length === 0) {\n            console.log('No completed fixtures to process');\n            return;\n        }\n        \n        // Mark this gameweek as processed\n        this.processedGameweeks.add(gameweek);\n        console.log(`Marking gameweek ${gameweek} as processed`);\n        \n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        \n        // Get all users and their picks for this gameweek\n        this.db.collection('users').get().then(querySnapshot => {\n            querySnapshot.forEach(userDoc => {\n                const userData = userDoc.data();\n                \n                // Get user's edition to determine the correct pick key\n                const userEdition = this.getUserEdition(userData);\n                const editionGameweekKey = `edition${userEdition}_${gameweekKey}`;\n                \n                // Try new structure first, then fallback to old structure\n                let userPick = userData.picks && userData.picks[editionGameweekKey];\n                if (!userPick && userData.picks && userData.picks[gameweekKey]) {\n                    userPick = userData.picks[gameweekKey];\n                    console.log(`Using old pick structure for user ${userData.displayName}`);\n                }\n                \n                if (!userPick) {\n                    console.log(`No pick found for user ${userData.displayName} in ${editionGameweekKey} or ${gameweekKey}`);\n                    return;\n                }\n                \n                console.log(`Processing results for ${userData.displayName}: picked ${userPick} in ${editionGameweekKey}`);\n                \n                // Check if the user's pick lost any matches\n                let livesLost = 0;\n                \n                completedFixtures.forEach(fixture => {\n                    const homeTeam = fixture.homeTeam;\n                    const awayTeam = fixture.awayTeam;\n                    const homeScore = fixture.homeScore;\n                    const awayScore = fixture.awayScore;\n                    \n                    // Determine the winner (or if it's a draw)\n                    let winner = null;\n                    if (homeScore > awayScore) {\n                        winner = homeTeam;\n                    } else if (awayScore > homeScore) {\n                        winner = awayTeam;\n                    }\n                    \n                    // If there's a winner and the user's pick is the loser, they lose a life\n                    if (winner && winner !== userPick) {\n                        if (userPick === homeTeam || userPick === awayTeam) {\n                            livesLost++;\n                            console.log(`${userData.displayName} loses a life: picked ${userPick}, ${winner} won`);\n                        }\n                    }\n                });\n                \n                // Update user's lives if they lost any\n                if (livesLost > 0) {\n                    const currentLives = userData.lives || 2;\n                    const newLives = Math.max(0, currentLives - livesLost);\n                    \n                    this.db.collection('users').doc(userDoc.id).update({\n                        lives: newLives\n                    }).then(() => {\n                        console.log(`${userData.displayName}: ${currentLives} → ${newLives} lives (lost ${livesLost})`);\n                    }).catch(error => {\n                        console.error(`Error updating lives for ${userData.displayName}:`, error);\n                    });\n                } else {\n                    console.log(`${userData.displayName} didn't lose any lives this gameweek`);\n                }\n            });\n        }).catch(error => {\n            console.error('Error processing results:', error);\n        });\n    }\n\n    // Get user's edition\n    getUserEdition(userData) {\n        if (userData.defaultEdition) {\n            return userData.defaultEdition;\n        }\n        \n        if (userData.registeredEditions && userData.registeredEditions.length > 0) {\n            return userData.registeredEditions[0];\n        }\n        \n        return 1; // Default to Edition 1\n    }\n\n    // Check if pick is still valid\n    checkPickStillValid(pick, fixtures) {\n        const completedFixtures = fixtures.filter(f => f.status === 'completed' && f.homeScore !== null && f.awayScore !== null);\n        \n        for (const fixture of completedFixtures) {\n            const homeScore = fixture.homeScore;\n            const awayScore = fixture.awayScore;\n            \n            if (homeScore > awayScore && fixture.awayTeam === pick) {\n                return false; // Pick lost\n            } else if (awayScore > homeScore && fixture.homeTeam === pick) {\n                return false; // Pick lost\n            } else if (homeScore === awayScore) {\n                // Draw - pick is still valid\n            }\n        }\n        \n        return true; // Pick is still valid\n    }\n\n    // Calculate pick result\n    calculatePickResult(pick, fixtures) {\n        const completedFixtures = fixtures.filter(f => f.status === 'completed' && f.homeScore !== null && f.awayScore !== null);\n        \n        for (const fixture of completedFixtures) {\n            const homeScore = fixture.homeScore;\n            const awayScore = fixture.awayScore;\n            \n            if (homeScore > awayScore && fixture.awayTeam === pick) {\n                return 'lost'; // Pick lost\n            } else if (awayScore > homeScore && fixture.homeTeam === pick) {\n                return 'lost'; // Pick lost\n            } else if (homeScore === awayScore) {\n                return 'draw'; // Draw\n            }\n        }\n        \n        return 'valid'; // Pick is still valid\n    }\n\n    // Load player scores for scores tab\n    async loadPlayerScores() {\n        try {\n            const gameweek = this.currentActiveGameweek;\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${this.currentActiveEdition}_${gameweekKey}`;\n            \n            const doc = await this.db.collection('fixtures').doc(editionGameweekKey).get();\n            \n            if (doc.exists) {\n                const fixtures = doc.data().fixtures;\n                console.log(`Found ${fixtures.length} fixtures for player scores`);\n                return fixtures;\n            } else {\n                console.log('No fixtures found for player scores');\n                return [];\n            }\n        } catch (error) {\n            console.error('Error loading player scores:', error);\n            return [];\n        }\n    }\n\n    // Render player scores for scores tab\n    async renderPlayerScores(fixtures, gameweek) {\n        try {\n            this.renderDesktopPlayerScores(fixtures, gameweek);\n            this.renderMobilePlayerScores(fixtures, gameweek);\n        } catch (error) {\n            console.error('Error rendering player scores:', error);\n        }\n    }\n\n    // Render desktop player scores\n    renderDesktopPlayerScores(fixtures, gameweek) {\n        console.log('renderDesktopPlayerScores called with:', { fixtures, gameweek });\n        \n        const desktopScoresDisplay = document.querySelector('#desktop-scores-display');\n        if (!desktopScoresDisplay) {\n            console.error('Desktop scores display element not found');\n            return;\n        }\n        \n        if (!fixtures || fixtures.length === 0) {\n            console.log('No fixtures to render for desktop');\n            return;\n        }\n        \n        // Sort fixtures by date\n        const sortedFixtures = fixtures.sort((a, b) => new Date(a.date) - new Date(b.date));\n        \n        let scoresHTML = `\n            <div class=\"scores-header\">\n                <h4>Game Week ${gameweek === 'tiebreak' ? 'Tiebreak' : gameweek} Results</h4>\n            </div>\n            <div class=\"scores-container\">\n        `;\n        \n        for (const fixture of sortedFixtures) {\n            const fixtureDate = new Date(fixture.date);\n            const homeBadge = this.getTeamBadge(fixture.homeTeam);\n            const awayBadge = this.getTeamBadge(fixture.awayTeam);\n            \n            const homeBadgeHtml = homeBadge ? `<img src=\"${homeBadge}\" alt=\"${fixture.homeTeam}\" class=\"team-badge\">` : '';\n            const awayBadgeHtml = awayBadge ? `<img src=\"${awayBadge}\" alt=\"${fixture.awayTeam}\" class=\"team-badge\">` : '';\n            \n            // Determine score display\n            let scoreDisplay = '';\n            let statusClass = '';\n            \n            if (fixture.completed || fixture.status === 'FT' || fixture.status === 'AET' || fixture.status === 'PEN') {\n                // Full-time result with half-time scores if available\n                const hasHalfTimeScores = fixture.homeScoreHT !== null && fixture.awayScoreHT !== null;\n                scoreDisplay = `\n                    <div class=\"score-result\">\n                        <span class=\"score\">${fixture.homeScore || 0}</span>\n                        <span class=\"score-separator\">-</span>\n                        <span class=\"score\">${fixture.awayScore || 0}</span>\n                    </div>\n                    ${hasHalfTimeScores ? `\n                        <div class=\"half-time-scores\">\n                            <small>Half Time: ${fixture.homeScoreHT} - ${fixture.awayScoreHT}</small>\n                        </div>\n                    ` : ''}\n                `;\n                statusClass = 'completed';\n            } else if (fixture.status === 'HT' && fixture.homeScoreHT !== null && fixture.awayScoreHT !== null) {\n                // Half-time result\n                scoreDisplay = `\n                    <div class=\"score-result\">\n                        <span class=\"score\">${fixture.homeScoreHT}</span>\n                        <span class=\"score-separator\">-</span>\n                        <span class=\"score\">${fixture.awayScoreHT}</span>\n                        <span class=\"score-status\">HT</span>\n                    </div>\n                `;\n                statusClass = 'half-time';\n            } else if (fixture.status === '1H' || fixture.status === '2H' || fixture.status === 'LIVE') {\n                // Live match with current scores and half-time if available\n                const hasHalfTimeScores = fixture.homeScoreHT !== null && fixture.awayScoreHT !== null;\n                scoreDisplay = `\n                    <div class=\"score-result\">\n                        <span class=\"score\">${fixture.homeScore || 0}</span>\n                        <span class=\"score-separator\">-</span>\n                        <span class=\"score\">${fixture.awayScore || 0}</span>\n                        <span class=\"score-status live\">LIVE</span>\n                    </div>\n                    ${hasHalfTimeScores ? `\n                        <div class=\"half-time-scores\">\n                            <small>Half Time: ${fixture.homeScoreHT} - ${fixture.awayScoreHT}</small>\n                        </div>\n                    ` : ''}\n                `;\n                statusClass = 'live';\n            } else {\n                // Not started\n                scoreDisplay = `\n                    <div class=\"score-result\">\n                        <span class=\"score-placeholder\">vs</span>\n                    </div>\n                `;\n                statusClass = 'not-started';\n            }\n            \n            scoresHTML += `\n                <div class=\"score-fixture ${statusClass}\">\n                    <div class=\"fixture-teams\">\n                        <div class=\"team home-team\">\n                            ${homeBadgeHtml}\n                            <span class=\"team-name\">${fixture.homeTeam}</span>\n                        </div>\n                        ${scoreDisplay}\n                        <div class=\"team away-team\">\n                            <span class=\"team-name\">${fixture.awayTeam}</span>\n                            ${awayBadgeHtml}\n                        </div>\n                    </div>\n                    <div class=\"fixture-info\">\n                        <div class=\"fixture-time\">${fixtureDate.toLocaleTimeString('en-GB', { timeZone: 'Europe/London', hour: '2-digit', minute: '2-digit' })}</div>\n                        <div class=\"fixture-date\">${fixtureDate.toLocaleDateString('en-GB', { timeZone: 'Europe/London', weekday: 'short', month: 'short', day: 'numeric' })}</div>\n                        <div class=\"fixture-status\">${this.getStatusDisplay(fixture.status)}</div>\n                    </div>\n                </div>\n            `;\n        }\n        \n        scoresHTML += '</div>';\n        desktopScoresDisplay.innerHTML = scoresHTML;\n    }\n\n    // Render mobile player scores\n    renderMobilePlayerScores(fixtures, gameweek) {\n        console.log('renderMobilePlayerScores called with:', { fixtures, gameweek });\n        \n        const mobileScoresDisplay = document.querySelector('#mobile-scores-display');\n        if (!mobileScoresDisplay) {\n            console.error('Mobile scores display element not found');\n            return;\n        }\n        \n        if (!fixtures || fixtures.length === 0) {\n            console.log('No fixtures to render for mobile');\n            return;\n        }\n        \n        // Sort fixtures by date\n        const sortedFixtures = fixtures.sort((a, b) => new Date(a.date) - new Date(b.date));\n        \n        let scoresHTML = `\n            <div class=\"mobile-scores-header\">\n                <h4>Game Week ${gameweek === 'tiebreak' ? 'Tiebreak' : gameweek} Results</h4>\n            </div>\n            <div class=\"mobile-scores-container\">\n        `;\n        \n        for (const fixture of sortedFixtures) {\n            const fixtureDate = new Date(fixture.date);\n            const homeBadge = this.getTeamBadge(fixture.homeTeam);\n            const awayBadge = this.getTeamBadge(fixture.awayTeam);\n            \n            const homeBadgeHtml = homeBadge ? `<img src=\"${homeBadge}\" alt=\"${fixture.homeTeam}\" class=\"team-badge\">` : '';\n            const awayBadgeHtml = awayBadge ? `<img src=\"${awayBadge}\" alt=\"${fixture.awayTeam}\" class=\"team-badge\">` : '';\n            \n            // Determine score display\n            let scoreDisplay = '';\n            let statusClass = '';\n            \n            if (fixture.completed || fixture.status === 'FT' || fixture.status === 'AET' || fixture.status === 'PEN') {\n                // Full-time result with half-time scores if available\n                const hasHalfTimeScores = fixture.homeScoreHT !== null && fixture.awayScoreHT !== null;\n                scoreDisplay = `\n                    <div class=\"mobile-score-result\">\n                        <span class=\"mobile-score\">${fixture.homeScore || 0}</span>\n                        <span class=\"mobile-score-separator\">-</span>\n                        <span class=\"mobile-score\">${fixture.awayScore || 0}</span>\n                    </div>\n                    ${hasHalfTimeScores ? `\n                        <div class=\"mobile-half-time-scores\">\n                            <small>Half Time: ${fixture.homeScoreHT} - ${fixture.awayScoreHT}</small>\n                        </div>\n                    ` : ''}\n                `;\n                statusClass = 'completed';\n            } else if (fixture.status === 'HT' && fixture.homeScoreHT !== null && fixture.awayScoreHT !== null) {\n                // Half-time result\n                scoreDisplay = `\n                    <div class=\"mobile-score-result\">\n                        <span class=\"mobile-score\">${fixture.homeScoreHT}</span>\n                        <span class=\"mobile-score-separator\">-</span>\n                        <span class=\"mobile-score\">${fixture.awayScoreHT}</span>\n                        <span class=\"mobile-score-status\">HT</span>\n                    </div>\n                `;\n                statusClass = 'half-time';\n            } else if (fixture.status === '1H' || fixture.status === '2H' || fixture.status === 'LIVE') {\n                // Live match with current scores and half-time if available\n                const hasHalfTimeScores = fixture.homeScoreHT !== null && fixture.awayScoreHT !== null;\n                scoreDisplay = `\n                    <div class=\"mobile-score-result\">\n                        <span class=\"mobile-score\">${fixture.homeScore || 0}</span>\n                        <span class=\"mobile-score-separator\">-</span>\n                        <span class=\"mobile-score\">${fixture.awayScore || 0}</span>\n                        <span class=\"mobile-score-status live\">LIVE</span>\n                    </div>\n                    ${hasHalfTimeScores ? `\n                        <div class=\"mobile-half-time-scores\">\n                            <small>Half Time: ${fixture.homeScoreHT} - ${fixture.awayScoreHT}</span>\n                        </div>\n                    ` : ''}\n                `;\n                statusClass = 'live';\n            } else {\n                // Not started\n                scoreDisplay = `\n                    <div class=\"mobile-score-result\">\n                        <span class=\"mobile-score-placeholder\">vs</span>\n                    </div>\n                `;\n                statusClass = 'not-started';\n            }\n            \n            scoresHTML += `\n                <div class=\"mobile-score-fixture ${statusClass}\">\n                    <div class=\"mobile-fixture-teams\">\n                        <div class=\"mobile-team home-team\">\n                            ${homeBadgeHtml}\n                            <span class=\"mobile-team-name\">${fixture.homeTeam}</span>\n                        </div>\n                        ${scoreDisplay}\n                        <div class=\"mobile-team away-team\">\n                            <span class=\"mobile-team-name\">${fixture.awayTeam}</span>\n                            ${awayBadgeHtml}\n                        </div>\n                    </div>\n                    <div class=\"mobile-fixture-info\">\n                        <div class=\"mobile-fixture-time\">${fixtureDate.toLocaleTimeString('en-GB', { timeZone: 'Europe/London', hour: '2-digit', minute: '2-digit' })}</div>\n                        <div class=\"mobile-fixture-date\">${fixtureDate.toLocaleDateString('en-GB', { timeZone: 'Europe/London', weekday: 'short', month: 'short', day: 'numeric' })}</div>\n                        <div class=\"mobile-fixture-status\">${this.getStatusDisplay(fixture.status)}</div>\n                    </div>\n                </div>\n            `;\n        }\n        \n        scoresHTML += '</div>';\n        mobileScoresDisplay.innerHTML = scoresHTML;\n    }\n\n    // Helper function to display match status\n    getStatusDisplay(status) {\n        const statusMap = {\n            'NS': 'Not Started',\n            'POSTP': 'Postponed',\n            'KO': 'Kicked Off',\n            '1H': 'First Half',\n            'HT': 'Half Time',\n            '2H': 'Second Half',\n            'FT': 'Full Time',\n            'AET': 'Extra Time',\n            'PEN': 'Penalties',\n            'COMP': 'Completed',\n            'LIVE': 'Live'\n        };\n        return statusMap[status] || status || 'Unknown';\n    }\n\n    // Get team badge (placeholder - would need to be implemented)\n    getTeamBadge(teamName) {\n        // This would return the URL to the team's badge image\n        // For now, return null\n        return null;\n    }\n\n    // Show no scores message\n    showNoScoresMessage(edition = null) {\n        const desktopScoresDisplay = document.querySelector('#desktop-scores-display');\n        const mobileScoresDisplay = document.querySelector('#mobile-scores-display');\n        \n        let noScoresMessage = '';\n        \n        if (edition === 'test') {\n            noScoresMessage = `\n                <div class=\"no-scores-message\">\n                    <h3>Test Edition - No Fixtures Available</h3>\n                    <p>This is the test edition. No fixtures have been created yet.</p>\n                    <p>To see scores, you would need to:</p>\n                    <ul>\n                        <li>Create fixtures in the admin panel</li>\n                        <li>Or switch to a different edition that has fixtures</li>\n                    </ul>\n                    <p>For now, you can explore the other tabs to see how the app works!</p>\n                </div>\n            `;\n        } else {\n            noScoresMessage = `\n                <div class=\"no-scores-message\">\n                    <p>No scores available for this gameweek yet.</p>\n                    <p>Scores will appear here once matches are played and results are updated.</p>\n                </div>\n            `;\n        }\n        \n        if (desktopScoresDisplay) {\n            desktopScoresDisplay.innerHTML = noScoresMessage;\n        }\n        if (mobileScoresDisplay) {\n            mobileScoresDisplay.innerHTML = noScoresMessage;\n        }\n    }\n\n    // Cleanup resources\n    cleanup() {\n        this.processedGameweeks.clear();\n    }\n}\n","// History Manager Module\n// Handles score saving, importing from external sources, and historical score management\n\nexport class HistoryManager {\n    constructor(db, currentActiveEdition = 1, apiManager = null) {\n        this.db = db;\n        this.currentActiveEdition = currentActiveEdition;\n        this.apiManager = apiManager;\n    }\n\n    // Save scores for a gameweek\n    saveScores(onResultsProcessed = null) {\n        const gameweek = document.querySelector('#score-gameweek-select').value;\n        const scoreRows = document.querySelectorAll('.score-row');\n        const updatedFixtures = [];\n\n        console.log(`saveScores called - gameweek: ${gameweek}, currentActiveEdition: ${this.currentActiveEdition}`);\n\n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        const editionGameweekKey = `edition${this.currentActiveEdition}_${gameweekKey}`;\n        \n        console.log(`Attempting to save scores for ${editionGameweekKey}`);\n        this.db.collection('fixtures').doc(editionGameweekKey).get().then(doc => {\n            if (doc.exists) {\n                const fixtures = doc.data().fixtures;\n                console.log(`Found ${fixtures.length} fixtures for ${editionGameweekKey}`);\n                \n                scoreRows.forEach((row, index) => {\n                    if (fixtures[index]) {\n                        // Handle current scores (if present)\n                        const currentHomeScore = row.querySelector('.home-score-current');\n                        const currentAwayScore = row.querySelector('.away-score-current');\n                        \n                        // Use current score if available, otherwise use full-time score\n                        let homeScore, awayScore;\n                        if (currentHomeScore && currentAwayScore) {\n                            homeScore = currentHomeScore.value;\n                            awayScore = currentAwayScore.value;\n                        } else {\n                            const homeScoreElement = row.querySelector('.home-score');\n                            const awayScoreElement = row.querySelector('.away-score');\n                            homeScore = homeScoreElement ? homeScoreElement.value : null;\n                            awayScore = awayScoreElement ? awayScoreElement.value : null;\n                        }\n                        \n                        const homeScoreHTElement = row.querySelector('.home-score-ht');\n                        const awayScoreHTElement = row.querySelector('.away-score-ht');\n                        const completedElement = row.querySelector('.fixture-completed');\n                        const statusElement = row.querySelector('.match-status-select');\n                        \n                        const homeScoreHT = homeScoreHTElement ? homeScoreHTElement.value : null;\n                        const awayScoreHT = awayScoreHTElement ? awayScoreHTElement.value : null;\n                        const completed = completedElement ? completedElement.checked : false;\n                        const status = statusElement ? statusElement.value : 'FT';\n                        \n                        updatedFixtures.push({\n                            ...fixtures[index],\n                            homeScore: homeScore ? parseInt(homeScore) : null,\n                            awayScore: awayScore ? parseInt(awayScore) : null,\n                            homeScoreHT: homeScoreHT ? parseInt(homeScoreHT) : null,\n                            awayScoreHT: awayScoreHT ? parseInt(awayScoreHT) : null,\n                            completed: completed,\n                            status: status\n                        });\n                    }\n                });\n\n                this.db.collection('fixtures').doc(editionGameweekKey).update({\n                    fixtures: updatedFixtures\n                }).then(() => {\n                    const displayText = gameweek === 'tiebreak' ? 'Tiebreak Round' : `Game Week ${gameweek}`;\n                    alert(`Scores saved for ${displayText}`);\n                    // Process results to update lives\n                    // Process results if callback provided\n                    if (onResultsProcessed) {\n                        onResultsProcessed(gameweek, updatedFixtures);\n                    }\n                }).catch(error => {\n                    console.error('Error saving scores:', error);\n                    alert('Error saving scores');\n                });\n            } else {\n                console.log(`No fixtures document found for ${editionGameweekKey} - checking old structure`);\n                \n                // Fallback to old structure\n                this.db.collection('fixtures').doc(gameweekKey).get().then(oldDoc => {\n                    if (oldDoc.exists) {\n                        const fixtures = oldDoc.data().fixtures;\n                        console.log(`Found ${fixtures.length} fixtures in old structure for ${gameweekKey}`);\n                        \n                        scoreRows.forEach((row, index) => {\n                            if (fixtures[index]) {\n                                // Handle current scores (if present)\n                                const currentHomeScore = row.querySelector('.home-score-current');\n                                const currentAwayScore = row.querySelector('.away-score-current');\n                                \n                                // Use current score if available, otherwise use full-time score\n                                let homeScore, awayScore;\n                                if (currentHomeScore && currentAwayScore) {\n                                    homeScore = currentHomeScore.value;\n                                    awayScore = currentAwayScore.value;\n                                } else {\n                                    const homeScoreElement = row.querySelector('.home-score');\n                                    const awayScoreElement = row.querySelector('.away-score');\n                                    homeScore = homeScoreElement ? homeScoreElement.value : null;\n                                    awayScore = awayScoreElement ? awayScoreElement.value : null;\n                                }\n                                \n                                const homeScoreHTElement = row.querySelector('.home-score-ht');\n                                const awayScoreHTElement = row.querySelector('.away-score-ht');\n                                const completedElement = row.querySelector('.fixture-completed');\n                                const statusElement = row.querySelector('.match-status-select');\n                                \n                                const homeScoreHT = homeScoreHTElement ? homeScoreHTElement.value : null;\n                                const awayScoreHT = awayScoreHTElement ? awayScoreHTElement.value : null;\n                                const completed = completedElement ? completedElement.checked : false;\n                                const status = statusElement ? statusElement.value : 'FT';\n                                \n                                fixtures[index] = {\n                                    ...fixtures[index],\n                                    homeScore: homeScore ? parseInt(homeScore) : null,\n                                    awayScore: awayScore ? parseInt(awayScore) : null,\n                                    homeScoreHT: homeScoreHT ? parseInt(homeScoreHT) : null,\n                                    awayScoreHT: awayScoreHT ? parseInt(awayScoreHT) : null,\n                                    completed: completed,\n                                    status: status\n                                };\n                            }\n                        });\n\n                        // Save to old structure\n                        this.db.collection('fixtures').doc(gameweekKey).update({\n                            fixtures: fixtures\n                        }).then(() => {\n                            const displayText = gameweek === 'tiebreak' ? 'Tiebreak Round' : `Game Week ${gameweek}`;\n                            alert(`Scores saved for ${displayText}`);\n                            // Process results to update lives\n                            // Process results if callback provided\n                            if (onResultsProcessed) {\n                                onResultsProcessed(gameweek, fixtures);\n                            }\n                        }).catch(error => {\n                            console.error('Error saving scores to old structure:', error);\n                            alert('Error saving scores');\n                        });\n                    } else {\n                        console.log(`No fixtures document found in old structure either - creating empty document`);\n                        \n                        // Create empty fixtures array for this gameweek\n                        const emptyFixtures = [];\n                        \n                        // Create the document with empty fixtures\n                        this.db.collection('fixtures').doc(editionGameweekKey).set({\n                            fixtures: emptyFixtures\n                        }).then(() => {\n                            console.log(`Created empty fixtures document for ${editionGameweekKey}`);\n                            alert(`Created empty fixtures document for ${gameweek === 'tiebreak' ? 'Tiebreak Round' : `Game Week ${gameweek}`}. Please add fixtures first, then save scores.`);\n                        }).catch(error => {\n                            console.error('Error creating fixtures document:', error);\n                            alert('Error creating fixtures document. Please try again.');\n                        });\n                    }\n                }).catch(oldError => {\n                    console.error('Error checking old structure:', oldError);\n                    alert('Error accessing fixtures. Please try again.');\n                });\n            }\n        }).catch(error => {\n            console.error('Error accessing fixtures document:', error);\n            alert('Error accessing fixtures. Please try again.');\n        });\n    }\n\n    // Import scores from file\n    async importScoresFromFile(file, gameweek) {\n        console.log('importScoresFromFile called with gameweek:', gameweek);\n        \n        try {\n            const text = await file.text();\n            const scores = JSON.parse(text);\n            \n            if (Array.isArray(scores)) {\n                console.log(`Importing ${scores.length} scores from file`);\n                // Process the imported scores\n                // This would need to be implemented based on the file format\n            } else {\n                console.error('Invalid file format: expected array of scores');\n                alert('Invalid file format. Please check the file and try again.');\n            }\n        } catch (error) {\n            console.error('Error importing scores from file:', error);\n            alert('Error importing scores: ' + error.message);\n        }\n    }\n\n    // Import scores from Football WebPages API\n    async importScoresFromFootballWebPages(gameweek) {\n        console.log(`📥 Importing scores from Football WebPages for gameweek ${gameweek}`);\n        \n        try {\n            // Check if API configuration is available\n            if (!this.apiManager || !this.apiManager.footballWebPagesConfig) {\n                console.error('❌ API configuration not available');\n                alert('API configuration not available. Please check the API settings.');\n                return;\n            }\n            \n            // Get the current edition and gameweek\n            const edition = this.currentActiveEdition || 'edition1';\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${edition}_${gameweekKey}`;\n            \n            console.log(`📥 Importing scores for ${editionGameweekKey}`);\n            \n            // First, get the fixtures for this gameweek from the database\n            const fixturesDoc = await this.db.collection('fixtures').doc(editionGameweekKey).get();\n            \n            if (!fixturesDoc.exists) {\n                console.error('❌ No fixtures found for this gameweek');\n                alert('No fixtures found for this gameweek. Please import fixtures first.');\n                return;\n            }\n            \n            const fixturesData = fixturesDoc.data();\n            const fixtures = fixturesData.fixtures || [];\n            \n            if (fixtures.length === 0) {\n                console.error('❌ No fixtures in database for this gameweek');\n                alert('No fixtures found in database for this gameweek. Please import fixtures first.');\n                return;\n            }\n            \n            console.log(`📥 Found ${fixtures.length} fixtures in database for gameweek ${gameweek}`);\n            \n            // Get the league and season from the API settings\n            const league = document.querySelector('#football-webpages-league')?.value || '5';\n            const season = document.querySelector('#football-webpages-season')?.value || '2025-26';\n            \n            console.log(`📥 Fetching scores for league ${league}, season ${season}`);\n            \n            // Fetch fixtures from the API to get current scores\n            const apiResponse = await fetch(`https://football-web-pages1.p.rapidapi.com/fixtures-results.json?comp=${league}&round=0&team=0`, {\n                method: 'GET',\n                headers: {\n                    'X-RapidAPI-Key': this.apiManager.footballWebPagesConfig.RAPIDAPI_KEY,\n                    'X-RapidAPI-Host': this.apiManager.footballWebPagesConfig.RAPIDAPI_HOST\n                }\n            });\n            \n            if (!apiResponse.ok) {\n                throw new Error(`HTTP ${apiResponse.status}: ${apiResponse.statusText}`);\n            }\n            \n            const apiData = await apiResponse.json();\n            console.log('📥 API response received:', apiData);\n            \n            // Extract fixtures from API response\n            let apiFixtures = [];\n            if (apiData['fixtures-results']) {\n                const fixturesData = apiData['fixtures-results'];\n                \n                if (Array.isArray(fixturesData)) {\n                    apiFixtures = fixturesData;\n                } else if (fixturesData.fixtures && Array.isArray(fixturesData.fixtures)) {\n                    apiFixtures = fixturesData.fixtures;\n                } else if (fixturesData.matches && Array.isArray(fixturesData.matches)) {\n                    apiFixtures = fixturesData.matches;\n                } else {\n                    // Try to find any array in the response\n                    const keys = Object.keys(fixturesData);\n                    for (const key of keys) {\n                        if (Array.isArray(fixturesData[key])) {\n                            apiFixtures = fixturesData[key];\n                            break;\n                        }\n                    }\n                }\n            }\n            \n            console.log(`📥 Found ${apiFixtures.length} fixtures in API response`);\n            \n            if (apiFixtures.length === 0) {\n                console.error('❌ No fixtures found in API response');\n                alert('No fixtures found in API response. Please check the API settings and try again.');\n                return;\n            }\n            \n            // Update scores for each fixture in our database\n            let updatedCount = 0;\n            const updatedFixtures = fixtures.map(fixture => {\n                // Find matching fixture in API response with flexible matching\n                const apiFixture = apiFixtures.find(apiFixture => {\n                    const apiHomeTeam = apiFixture['home-team']?.name || apiFixture.homeTeam || apiFixture.home || 'TBD';\n                    const apiAwayTeam = apiFixture['away-team']?.name || apiFixture.awayTeam || apiFixture.away || 'TBD';\n                    \n                    // Try exact match first\n                    if (apiHomeTeam === fixture.homeTeam && apiAwayTeam === fixture.awayTeam) {\n                        return true;\n                    }\n                    \n                    // Try case-insensitive match\n                    if (apiHomeTeam.toLowerCase() === fixture.homeTeam.toLowerCase() && \n                        apiAwayTeam.toLowerCase() === fixture.awayTeam.toLowerCase()) {\n                        return true;\n                    }\n                    \n                    // Try partial match (in case of slight name differences)\n                    if (apiHomeTeam.toLowerCase().includes(fixture.homeTeam.toLowerCase()) && \n                        apiAwayTeam.toLowerCase().includes(fixture.awayTeam.toLowerCase())) {\n                        return true;\n                    }\n                    \n                    return false;\n                });\n                \n                if (apiFixture) {\n                    const apiHomeTeam = apiFixture['home-team']?.name || apiFixture.homeTeam || apiFixture.home || 'TBD';\n                    const apiAwayTeam = apiFixture['away-team']?.name || apiFixture.awayTeam || apiFixture.away || 'TBD';\n                    console.log(`📥 Found matching fixture: ${fixture.homeTeam} vs ${fixture.awayTeam} (API: ${apiHomeTeam} vs ${apiAwayTeam})`);\n                    \n                    // Extract scores from API fixture with improved logic\n                    let homeScore = null;\n                    let awayScore = null;\n                    let homeScoreHT = null;\n                    let awayScoreHT = null;\n                    \n                    // Method 1: Direct score properties from home-team/away-team objects\n                    if (apiFixture['home-team'] && apiFixture['away-team']) {\n                        homeScore = apiFixture['home-team'].score ?? apiFixture['home-team'].goals ?? apiFixture['home-team'].result;\n                        awayScore = apiFixture['away-team'].score ?? apiFixture['away-team'].goals ?? apiFixture['away-team'].result;\n                    }\n                    \n                    // Method 2: Alternative score properties\n                    if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined)) {\n                        homeScore = apiFixture.homeScore ?? apiFixture.homeGoals ?? apiFixture.score1 ?? apiFixture.home_result;\n                        awayScore = apiFixture.awayScore ?? apiFixture.awayGoals ?? apiFixture.score2 ?? apiFixture.away_result;\n                    }\n                    \n                    // Method 3: Split score strings (most common format)\n                    if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined)) {\n                        // Try full-time score first\n                        if (apiFixture.ft_score && apiFixture.ft_score.includes('-')) {\n                            const ftParts = apiFixture.ft_score.split('-');\n                            homeScore = parseInt(ftParts[0].trim());\n                            awayScore = parseInt(ftParts[1].trim());\n                        }\n                        \n                        // Try general score field\n                        if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined) && apiFixture.score && apiFixture.score.includes('-')) {\n                            const scoreParts = apiFixture.score.split('-');\n                            homeScore = parseInt(scoreParts[0].trim());\n                            awayScore = parseInt(scoreParts[1].trim());\n                        }\n                        \n                        // Try result field\n                        if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined) && apiFixture.result && apiFixture.result.includes('-')) {\n                            const resultParts = apiFixture.result.split('-');\n                            homeScore = parseInt(resultParts[0].trim());\n                            awayScore = parseInt(resultParts[1].trim());\n                        }\n                    }\n                    \n                    // Method 4: Check for individual goal properties\n                    if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined)) {\n                        homeScore = apiFixture.homeGoals ?? apiFixture.goals1 ?? apiFixture.home_goals;\n                        awayScore = apiFixture.awayGoals ?? apiFixture.goals2 ?? apiFixture.away_goals;\n                    }\n                    \n                    // Method 5: Check for any numeric score-like properties\n                    if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined)) {\n                        // Look for any property that might contain scores\n                        const possibleScoreProps = ['score', 'result', 'goals', 'ft_score', 'ht_score', 'final_score'];\n                        for (const prop of possibleScoreProps) {\n                            if (apiFixture[prop] && typeof apiFixture[prop] === 'string' && apiFixture[prop].includes('-')) {\n                                const parts = apiFixture[prop].split('-');\n                                if (parts.length === 2 && !isNaN(parseInt(parts[0])) && !isNaN(parseInt(parts[1]))) {\n                                    homeScore = parseInt(parts[0].trim());\n                                    awayScore = parseInt(parts[1].trim());\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Extract half-time scores\n                    // Method 1: Check home-team and away-team objects for half-time-score\n                    if (apiFixture['home-team'] && apiFixture['away-team']) {\n                        homeScoreHT = apiFixture['home-team']['half-time-score'] ?? apiFixture['home-team']['ht_score'] ?? apiFixture['home-team']['half_time_score'];\n                        awayScoreHT = apiFixture['away-team']['half-time-score'] ?? apiFixture['away-team']['ht_score'] ?? apiFixture['away-team']['half_time_score'];\n                    }\n                    \n                    // Method 2: Check top-level properties\n                    if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n                        if (apiFixture.ht_score && apiFixture.ht_score.includes('-')) {\n                            const htParts = apiFixture.ht_score.split('-');\n                            homeScoreHT = parseInt(htParts[0].trim());\n                            awayScoreHT = parseInt(htParts[1].trim());\n                        } else if (apiFixture.half_time_score && apiFixture.half_time_score.includes('-')) {\n                            const htParts = apiFixture.half_time_score.split('-');\n                            homeScoreHT = parseInt(htParts[0].trim());\n                            awayScoreHT = parseInt(htParts[1].trim());\n                        } else if (apiFixture.ht_result && apiFixture.ht_result.includes('-')) {\n                            const htParts = apiFixture.ht_result.split('-');\n                            homeScoreHT = parseInt(htParts[0].trim());\n                            awayScoreHT = parseInt(htParts[1].trim());\n                        }\n                    }\n                    \n                    // Method 3: Check for halfTimeScore properties (from netlify function)\n                    if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n                        if (apiFixture.halfTimeScore && apiFixture.halfTimeScore.includes('-')) {\n                            const htParts = apiFixture.halfTimeScore.split('-');\n                            homeScoreHT = parseInt(htParts[0].trim());\n                            awayScoreHT = parseInt(htParts[1].trim());\n                        }\n                    }\n                    \n                    // Method 4: Check for halfTime properties (from netlify function)\n                    if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n                        if (apiFixture.halfTime && apiFixture.halfTime.includes('-')) {\n                            const htParts = apiFixture.halfTime.split('-');\n                            homeScoreHT = parseInt(htParts[0].trim());\n                            awayScoreHT = parseInt(htParts[1].trim());\n                        }\n                    }\n                    \n                    // Method 5: Check for ht properties (from netlify function)\n                    if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n                        if (apiFixture.ht && apiFixture.ht.includes('-')) {\n                            const htParts = apiFixture.ht.split('-');\n                            homeScoreHT = parseInt(htParts[0].trim());\n                            awayScoreHT = parseInt(htParts[1].trim());\n                        }\n                    }\n                    \n                    // Method 6: Check for any property containing 'half' or 'ht' that might have scores\n                    if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n                        const possibleHTProps = ['halfTimeScore', 'halfTime', 'ht', 'ht_score', 'half_time_score', 'ht_result', 'halfTimeResult'];\n                        for (const prop of possibleHTProps) {\n                            if (apiFixture[prop] && typeof apiFixture[prop] === 'string' && apiFixture[prop].includes('-')) {\n                                const parts = apiFixture[prop].split('-');\n                                if (parts.length === 2 && !isNaN(parseInt(parts[0])) && !isNaN(parseInt(parts[1]))) {\n                                    homeScoreHT = parseInt(parts[0].trim());\n                                    awayScoreHT = parseInt(parts[1].trim());\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Convert to numbers and handle invalid values\n                    homeScore = homeScore !== null && homeScore !== undefined && homeScore !== '' ? parseInt(homeScore) : null;\n                    awayScore = awayScore !== null && awayScore !== undefined && awayScore !== '' ? parseInt(awayScore) : null;\n                    homeScoreHT = homeScoreHT !== null && homeScoreHT !== undefined && homeScoreHT !== '' ? parseInt(homeScoreHT) : null;\n                    awayScoreHT = awayScoreHT !== null && awayScoreHT !== undefined && awayScoreHT !== '' ? parseInt(awayScoreHT) : null;\n                    \n                    // Extract status from API fixture and update based on scores\n                    let status = apiFixture.status?.full || apiFixture.status?.short || fixture.status || 'NS';\n                    \n                    // If we have full-time scores, automatically set status to FT\n                    if (homeScore !== null && awayScore !== null) {\n                        status = 'FT';\n                    }\n                    \n                    console.log(`📥 Updating scores: ${fixture.homeTeam} ${homeScore} - ${awayScore} ${fixture.awayTeam} (Status: ${status})`);\n                    console.log(`📥 Half-time scores: ${fixture.homeTeam} ${homeScoreHT} - ${awayScoreHT} ${fixture.awayTeam}`);\n                    \n                    updatedCount++;\n                    \n                    return {\n                        ...fixture,\n                        homeScore: homeScore,\n                        awayScore: awayScore,\n                        homeScoreHT: homeScoreHT,\n                        awayScoreHT: awayScoreHT,\n                        status: status,\n                        completed: (homeScore !== null && awayScore !== null), // Also set completed flag\n                        lastUpdated: new Date()\n                    };\n                } else {\n                    console.log(`⚠️ No matching fixture found in API for: ${fixture.homeTeam} vs ${fixture.awayTeam}`);\n                    return fixture;\n                }\n            });\n            \n            // Save updated fixtures back to database\n            await this.db.collection('fixtures').doc(editionGameweekKey).update({\n                fixtures: updatedFixtures,\n                lastUpdated: new Date(),\n                scoresImportedFrom: 'Football Web Pages API'\n            });\n            \n            console.log(`✅ Successfully updated ${updatedCount} out of ${fixtures.length} fixtures with scores from API`);\n            \n            // Show success message\n            alert(`Successfully imported scores for ${updatedCount} out of ${fixtures.length} fixtures from Football Web Pages API!`);\n            \n            // Refresh the scores display\n            // Note: This will need to be handled by the calling code\n            console.log('Scores imported successfully. Please refresh the scores display manually.');\n            \n            // Update status message if available\n            const statusElement = document.querySelector('#import-status');\n            if (statusElement) {\n                statusElement.textContent = `Successfully imported scores for ${updatedCount} fixtures from Football Web Pages API`;\n                statusElement.className = 'status-message success';\n            }\n            \n        } catch (error) {\n            console.error('❌ Error importing scores from Football WebPages:', error);\n            alert('Error importing scores from Football WebPages: ' + error.message);\n            \n            // Update status message if available\n            const statusElement = document.querySelector('#import-status');\n            if (statusElement) {\n                statusElement.textContent = 'Error importing scores: ' + error.message;\n                statusElement.className = 'status-message error';\n            }\n        }\n    }\n\n    // Test API function for debugging (exposed globally)\n    async testFootballWebPagesAPI() {\n        console.log('🧪 Testing Football Web Pages API...');\n        try {\n            if (!this.apiManager || !this.apiManager.footballWebPagesConfig) {\n                console.error('❌ API configuration not available');\n                return;\n            }\n            \n            const response = await fetch('https://football-web-pages1.p.rapidapi.com/fixtures-results.json?comp=5', {\n                method: 'GET',\n                headers: {\n                    'X-RapidAPI-Key': this.apiManager.footballWebPagesConfig.RAPIDAPI_KEY,\n                    'X-RapidAPI-Host': this.apiManager.footballWebPagesConfig.RAPIDAPI_HOST\n                }\n            });\n            \n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            \n            const data = await response.json();\n            console.log('🧪 API Response Structure:', data);\n            \n            if (data['fixtures-results'] && data['fixtures-results'].matches) {\n                console.log('🧪 Found matches:', data['fixtures-results'].matches.length);\n                if (data['fixtures-results'].matches.length > 0) {\n                    console.log('🧪 First match:', data['fixtures-results'].matches[0]);\n                }\n            }\n            \n            return data;\n        } catch (error) {\n            console.error('❌ Error testing API:', error);\n        }\n    }\n\n    // Cleanup resources\n    cleanup() {\n        // No specific cleanup needed for this module\n    }\n}\n","// Main Scores Manager\n// Orchestrates all score functionality modules\n\nimport { LiveScoring } from './liveScoring.js';\nimport { StatisticsEngine } from './statisticsEngine.js';\nimport { HistoryManager } from './historyManager.js';\n\nexport class ScoresManager {\n    constructor(db, currentActiveEdition = 1, currentActiveGameweek = '1', apiManager = null) {\n        this.db = db;\n        this.currentActiveEdition = currentActiveEdition;\n        this.currentActiveGameweek = currentActiveGameweek;\n        this.apiManager = apiManager;\n        this.scoresManagementInitialized = false;\n\n        // Initialize module instances\n        this.liveScoring = new LiveScoring(db, currentActiveEdition);\n        this.statisticsEngine = new StatisticsEngine(db, currentActiveEdition, currentActiveGameweek);\n        this.historyManager = new HistoryManager(db, currentActiveEdition, apiManager);\n    }\n\n    // Initialize scores management\n    initializeScoresManagement() {\n        if (this.scoresManagementInitialized) {\n            console.log('Scores management already initialized, skipping...');\n            return;\n        }\n        \n        // Check if we're on a page that needs scores management\n        const hasScoresElements = document.querySelector('#score-gameweek-select') || document.querySelector('#scores-container');\n        if (!hasScoresElements) {\n            console.log('Scores management elements not found on this page, skipping...');\n            return;\n        }\n        \n        console.log('Initializing scores management...');\n        this.scoresManagementInitialized = true;\n        \n        this.setupEventListeners();\n        this.initializeScoresDisplay();\n    }\n\n    // Set up event listeners for scores functionality\n    setupEventListeners() {\n        // Save scores button\n        const saveScoresBtn = document.querySelector('#save-scores-btn');\n        if (saveScoresBtn) {\n            saveScoresBtn.addEventListener('click', () => this.historyManager.saveScores());\n        }\n\n        // Score gameweek selector\n        const scoreGameweekSelect = document.querySelector('#score-gameweek-select');\n        if (scoreGameweekSelect) {\n            scoreGameweekSelect.addEventListener('change', () => this.liveScoring.loadScoresForGameweek());\n        }\n\n        // Import Football WebPages scores button\n        const importFootballWebPagesScoresBtn = document.querySelector('#import-football-webpages-scores-btn');\n        if (importFootballWebPagesScoresBtn) {\n            importFootballWebPagesScoresBtn.addEventListener('click', () => {\n                const gameweek = scoreGameweekSelect.value;\n                this.historyManager.importScoresFromFootballWebPages(gameweek);\n            });\n        }\n\n        // Scores file input\n        const scoresFileInput = document.querySelector('#scores-file-input');\n        if (scoresFileInput) {\n            scoresFileInput.addEventListener('change', (e) => {\n                const file = e.target.files[0];\n                const gameweek = scoreGameweekSelect.value;\n                this.historyManager.importScoresFromFile(file, gameweek);\n            });\n        }\n\n        // Initialize live scoring event listeners\n        this.liveScoring.initializeLiveScoring();\n    }\n\n    // Initialize scores display\n    initializeScoresDisplay() {\n        // Only load if the required elements exist\n        if (document.querySelector('#score-gameweek-select') && document.querySelector('#scores-container')) {\n            // Load initial scores for the current edition\n            if (typeof this.liveScoring.loadScoresForGameweek === 'function') {\n                this.liveScoring.loadScoresForGameweek();\n            }\n        }\n    }\n\n    // Delegate methods to appropriate modules\n\n    // Live Scoring methods\n    loadScoresForGameweek() {\n        return this.liveScoring.loadScoresForGameweek();\n    }\n\n    addScoreRow(fixture, index) {\n        return this.liveScoring.addScoreRow(fixture, index);\n    }\n\n    startAutoScoreUpdates(gameweek) {\n        return this.liveScoring.startAutoScoreUpdates(gameweek);\n    }\n\n    stopAutoScoreUpdates() {\n        return this.liveScoring.stopAutoScoreUpdates();\n    }\n\n    startRealTimeScoreUpdates(gameweek) {\n        return this.liveScoring.startRealTimeScoreUpdates(gameweek);\n    }\n\n    stopRealTimeScoreUpdates() {\n        return this.liveScoring.stopRealTimeScoreUpdates();\n    }\n\n    // Statistics Engine methods\n    processResults(gameweek, fixtures) {\n        return this.statisticsEngine.processResults(gameweek, fixtures);\n    }\n\n    getUserEdition(userData) {\n        return this.statisticsEngine.getUserEdition(userData);\n    }\n\n    checkPickStillValid(pick, fixtures) {\n        return this.statisticsEngine.checkPickStillValid(pick, fixtures);\n    }\n\n    calculatePickResult(pick, fixtures) {\n        return this.statisticsEngine.calculatePickResult(pick, fixtures);\n    }\n\n    loadPlayerScores() {\n        return this.statisticsEngine.loadPlayerScores();\n    }\n\n    renderPlayerScores(fixtures, gameweek) {\n        return this.statisticsEngine.renderPlayerScores(fixtures, gameweek);\n    }\n\n    renderDesktopPlayerScores(fixtures, gameweek) {\n        return this.statisticsEngine.renderDesktopPlayerScores(fixtures, gameweek);\n    }\n\n    renderMobilePlayerScores(fixtures, gameweek) {\n        return this.statisticsEngine.renderMobilePlayerScores(fixtures, gameweek);\n    }\n\n    showNoScoresMessage(edition = null) {\n        return this.statisticsEngine.showNoScoresMessage(edition);\n    }\n\n    // History Manager methods\n    saveScores() {\n        // Save scores and process results using the callback\n        this.historyManager.saveScores((gameweek, fixtures) => {\n            this.statisticsEngine.processResults(gameweek, fixtures);\n        });\n    }\n\n    importScoresFromFile(file, gameweek) {\n        return this.historyManager.importScoresFromFile(file, gameweek);\n    }\n\n    importScoresFromFootballWebPages(gameweek) {\n        return this.historyManager.importScoresFromFootballWebPages(gameweek);\n    }\n\n    testFootballWebPagesAPI() {\n        return this.historyManager.testFootballWebPagesAPI();\n    }\n\n    // Utility methods that are shared\n    getStatusDisplay(status) {\n        // This method exists in both LiveScoring and StatisticsEngine, so we can use either\n        return this.liveScoring.getStatusDisplay(status);\n    }\n\n    getTeamBadge(teamName) {\n        // This method exists in StatisticsEngine\n        return this.statisticsEngine.getTeamBadge(teamName);\n    }\n\n    // Cleanup resources\n    cleanup() {\n        this.liveScoring.cleanup();\n        this.statisticsEngine.cleanup();\n        this.historyManager.cleanup();\n        this.scoresManagementInitialized = false;\n    }\n}\n\n// Export the ScoresManager class as default\nexport default ScoresManager;\n","// UI Module\n// Handles all user interface components, display logic, and responsive design functionality\n\nclass UIManager {\n    constructor(db) {\n        this.db = db;\n        this.uiManagementInitialized = false;\n        this.vidiprinterInterval = null;\n        this.vidiprinterData = [];\n        this.isVidiprinterRunning = false;\n        this.autoScrollEnabled = true;\n        this.processedEvents = new Set(); // Track processed events to prevent duplicates\n    }\n\n    // Initialize UI management\n    initializeUIManagement() {\n        if (this.uiManagementInitialized) {\n            console.log('UI management already initialized, skipping...');\n            return;\n        }\n        \n        console.log('Initializing UI management...');\n        this.uiManagementInitialized = true;\n        \n        this.setupEventListeners();\n        this.initializeTestimonialModal();\n        // Registration window display will be initialized manually after global references are set\n        this.initializeVidiprinter();\n        \n        // Initialize tab functionality\n        this.initializeMobileTabs();\n        this.initializeDesktopTabs();\n    }\n\n    // Set up event listeners for UI functionality\n    setupEventListeners() {\n        // Testimonial toggle\n        const testimonialToggle = document.querySelector('.testimonial-toggle');\n        if (testimonialToggle) {\n            testimonialToggle.addEventListener('click', () => this.toggleTestimonials());\n        }\n    }\n\n    // Modal management\n    showModal(content) {\n        // Remove existing modal if any\n        const existingModal = document.querySelector('.modal-overlay');\n        if (existingModal) {\n            existingModal.remove();\n        }\n        \n        // Create modal overlay\n        const modalOverlay = document.createElement('div');\n        modalOverlay.className = 'modal-overlay';\n        modalOverlay.innerHTML = content;\n        \n        // Add to page\n        document.body.appendChild(modalOverlay);\n        \n        // Add event listener to close on overlay click\n        modalOverlay.addEventListener('click', (e) => {\n            if (e.target === modalOverlay) {\n                this.closeUserDetailsModal();\n            }\n        });\n    }\n\n    closeUserDetailsModal() {\n        const modal = document.querySelector('.modal-overlay');\n        if (modal) {\n            modal.remove();\n        }\n    }\n\n    // Tab management\n    initializeMobileTabs() {\n        console.log('Initializing mobile tabs...');\n        const tabButtons = document.querySelectorAll('.mobile-tabs .tab-btn');\n        const tabPanes = document.querySelectorAll('.mobile-tab-content .tab-pane');\n        \n        console.log(`Found ${tabButtons.length} mobile tab buttons and ${tabPanes.length} mobile tab panes`);\n        \n        tabButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                const targetTab = button.getAttribute('data-tab');\n                console.log(`Mobile tab clicked: ${targetTab}`);\n                \n                // Remove active class from all tabs and panes\n                tabButtons.forEach(btn => btn.classList.remove('active'));\n                tabPanes.forEach(pane => pane.classList.remove('active'));\n                \n                // Add active class to clicked tab and corresponding pane\n                button.classList.add('active');\n                const targetPane = document.getElementById(`${targetTab}-tab`);\n                if (targetPane) {\n                    targetPane.classList.add('active');\n                }\n                \n                // Load content based on tab\n                this.handleTabContentLoad(targetTab);\n            });\n        });\n    }\n\n    initializeDesktopTabs() {\n        console.log('Initializing desktop tabs...');\n        const tabButtons = document.querySelectorAll('.desktop-tabs .desktop-tab-btn');\n        const tabPanes = document.querySelectorAll('.desktop-tab-content .desktop-tab-pane');\n        \n        console.log(`Found ${tabButtons.length} desktop tab buttons and ${tabPanes.length} desktop tab panes`);\n        \n        tabButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                const targetTab = button.getAttribute('data-tab');\n                console.log(`Desktop tab clicked: ${targetTab}`);\n                \n                // Remove active class from all tabs and panes\n                tabButtons.forEach(btn => btn.classList.remove('active'));\n                tabPanes.forEach(pane => pane.classList.remove('active'));\n                \n                // Add active class to clicked tab and corresponding pane\n                button.classList.add('active');\n                const targetPane = document.getElementById(`desktop-${targetTab}-tab`);\n                if (targetPane) {\n                    targetPane.classList.add('active');\n                }\n                \n                // Load content based on tab\n                this.handleTabContentLoad(targetTab);\n            });\n        });\n    }\n\n    // Handle tab content loading\n    handleTabContentLoad(targetTab) {\n        if (targetTab === 'as-it-stands') {\n            console.log('As It Stands tab clicked');\n            // Run diagnostics first\n            if (window.app && window.app.utilitiesManager) {\n                window.app.utilitiesManager.diagnoseAsItStandsElements();\n            }\n            // Only initialize if not already done\n            if (!window.asItStandsInitialized_desktop && !window.asItStandsInitialized_mobile) {\n                if (window.app && window.app.adminManagementManager && window.app.adminManagementManager.teamOperations) {\n                    window.app.adminManagementManager.teamOperations.initializeAsItStandsTab('desktop');\n                } else if (window.app && window.app.teamOperations) {\n                    // Fallback for direct access\n                    window.app.teamOperations.initializeAsItStandsTab('desktop');\n                }\n            }\n        } else if (targetTab === 'scores') {\n            if (window.app && window.app.scoresManager) {\n                try {\n                    const loadMethod = window.app.scoresManager.loadScoresForGameweek.bind(window.app.scoresManager);\n                    loadMethod().then(async fixtures => {\n                        console.log('loadScoresForGameweek returned:', fixtures);\n                        // Get current gameweek for display\n                        const currentGameweek = window.app.currentActiveGameweek;\n                        if (window.app && window.app.scoresManager) {\n                            await window.app.scoresManager.renderPlayerScores(fixtures, currentGameweek);\n                        }\n                        if (window.app && window.app.scoresManager) {\n                            window.app.scoresManager.renderMobilePlayerScores(fixtures, currentGameweek);\n                        }\n                    }).catch(error => {\n                        console.error('Error loading player scores:', error);\n                        if (window.app && window.app.scoresManager) {\n                            window.app.scoresManager.showNoScoresMessage();\n                        }\n                    });\n                } catch (error) {\n                    console.error('Error calling loadScoresForGameweek:', error);\n                }\n            }\n        } else if (targetTab === 'vidiprinter') {\n            if (window.app && window.app.apiManager) {\n                window.app.apiManager.initializePlayerVidiprinter();\n            }\n        }\n    }\n\n    // Dashboard rendering\n    async renderDashboard(user) {\n        // Initialize both mobile and desktop tabs\n        console.log('Starting tab initialization...');\n        this.initializeMobileTabs();\n        console.log('Mobile tabs initialized');\n        this.initializeDesktopTabs();\n        console.log('Desktop tabs initialized');\n        \n        // Run diagnostics to check DOM elements\n        console.log('Dashboard rendered, running As It Stands diagnostics...');\n        setTimeout(() => {\n            console.log('Running delayed diagnostics...');\n            if (window.app && window.app.utilitiesManager) {\n                window.app.utilitiesManager.diagnoseAsItStandsElements();\n            }\n        }, 1000);\n        \n        // Pre-load all deadlines for this user's edition to avoid individual calls during rendering\n        const userDoc = await this.db.collection('users').doc(user.uid).get();\n        if (userDoc.exists) {\n            const userData = userDoc.data();\n            const userEdition = this.getUserEdition(userData);\n            const allGameweeks = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'tiebreak'];\n            if (window.app && window.app.gameLogicManager) {\n                await window.app.gameLogicManager.batchCheckDeadlines(allGameweeks, userEdition);\n            }\n        }\n        \n        const welcomeMessage = document.querySelector('#welcome-message');\n        const mobileWelcomeMessage = document.querySelector('#mobile-welcome-message');\n        const livesRemaining = document.querySelector('#lives-remaining');\n        const mobileLivesRemaining = document.querySelector('#mobile-lives-remaining');\n        const desktopLivesRemaining = document.querySelector('#desktop-lives-remaining');\n        const picksHistoryContainer = document.querySelector('#picks-history');\n        const mobilePicksHistoryContainer = document.querySelector('#mobile-picks-history');\n        const desktopPicksHistoryContainer = document.querySelector('#desktop-picks-history');\n        const logoutButtonContainer = document.querySelector('#user-logged-in-view');\n        const fixturesDisplayContainer = document.querySelector('#fixtures-display-container');\n        const mobileFixturesDisplayContainer = document.querySelector('#mobile-fixtures-display-container');\n        const gameweekNavigation = document.querySelector('#gameweek-navigation');\n        const mobileGameweekNavigation = document.querySelector('#mobile-gameweek-navigation');\n\n        if (logoutButtonContainer) logoutButtonContainer.style.display = 'block';\n        if (gameweekNavigation) gameweekNavigation.style.display = 'block';\n        if (mobileGameweekNavigation) mobileGameweekNavigation.style.display = 'block';\n\n        try {\n            const settingsDoc = await this.db.collection('settings').doc('currentCompetition').get();\n            if (!settingsDoc.exists) {\n                console.error(\"CRITICAL: Settings document not found!\");\n                return;\n            }\n            const settings = settingsDoc.data();\n            const currentGameWeek = settings.active_gameweek;\n\n            const userDoc = await this.db.collection('users').doc(user.uid).get();\n            if (userDoc.exists) {\n                const userData = userDoc.data();\n                \n                // Get user's edition from registration data\n                const userEdition = this.getUserEdition(userData);\n                const userRegisteredEditions = this.getUserRegisteredEditions(userData);\n                \n                // Show edition selection if user is registered for multiple editions\n                this.setupEditionSelection(userData, userEdition, userRegisteredEditions, user.uid);\n                \n                // Update edition displays\n                this.updateEditionDisplays(userEdition);\n                \n                // Update welcome messages for both desktop and mobile\n                if (welcomeMessage) welcomeMessage.textContent = `Welcome, ${userData.displayName}!`;\n                if (mobileWelcomeMessage) mobileWelcomeMessage.textContent = `Welcome, ${userData.displayName}!`;\n                \n                // Display card status based on lives remaining\n                this.updateLivesDisplay(userData, livesRemaining, mobileLivesRemaining, desktopLivesRemaining);\n\n                // Render pick history for desktop, mobile, and legacy (only if containers exist)\n                if (window.app && window.app.gameLogicManager) {\n                    if (picksHistoryContainer) {\n                        await window.app.gameLogicManager.renderPickHistory(userData.picks || {}, picksHistoryContainer, user.uid, userData);\n                    }\n                    if (mobilePicksHistoryContainer) {\n                        await window.app.gameLogicManager.renderPickHistory(userData.picks || {}, mobilePicksHistoryContainer, user.uid, userData);\n                    }\n                    if (desktopPicksHistoryContainer) {\n                        await window.app.gameLogicManager.renderPickHistory(userData.picks || {}, desktopPicksHistoryContainer, user.uid, userData);\n                    }\n                }\n                \n                // Initialize gameweek navigation for both desktop and mobile\n                if (window.app && window.app.gameLogicManager) {\n                    window.app.gameLogicManager.initializeGameweekNavigation(currentGameWeek, userData, user.uid);\n                }\n                if (window.app && window.app.gameLogicManager) {\n                    window.app.gameLogicManager.initializeMobileGameweekNavigation(currentGameWeek, userData, user.uid);\n                }\n                \n                // Check for auto-picks needed\n                if (typeof checkAndAssignAutoPicks === 'function') {\n                    checkAndAssignAutoPicks(userData, currentGameWeek, user.uid);\n                }\n                \n                // Load fixtures for current gameweek to get deadline (with user data)\n                if (typeof loadFixturesForDeadline === 'function') {\n                    loadFixturesForDeadline(currentGameWeek, userData, user.uid);\n                }\n                \n                // Load mobile fixtures for current gameweek\n                if (typeof loadMobileFixturesForDeadline === 'function') {\n                    loadMobileFixturesForDeadline(currentGameWeek, userData, user.uid);\n                }\n                \n                // Update pick status headers for both desktop and mobile\n                // TODO: Implement these functions if needed\n                // if (typeof updatePickStatusHeader === 'function') {\n                //     updatePickStatusHeader(currentGameWeek, userData, user.uid);\n                // }\n                // if (typeof updateMobilePickStatusHeader === 'function') {\n                //     updateMobilePickStatusHeader(currentGameWeek, userData, user.uid);\n                // }\n                \n                // Load player scores for current gameweek\n                if (typeof loadPlayerScores === 'function') {\n                    loadPlayerScores();\n                }\n                \n                // Initialize enhanced vidiprinter\n                // TODO: Implement this function if needed\n                // if (typeof initializeEnhancedVidiprinter === 'function') {\n                //     initializeEnhancedVidiprinter();\n                // }\n                \n                // Start deadline checker\n                if (typeof startDeadlineChecker === 'function') {\n                    startDeadlineChecker();\n                }\n            } else {\n                console.warn('User document not found for:', user.uid);\n            }\n        } catch (error) {\n            console.error(\"Error rendering dashboard:\", error);\n        }\n    }\n\n    // Setup edition selection\n    setupEditionSelection(userData, userEdition, userRegisteredEditions, userId) {\n        if (userRegisteredEditions.length > 1) {\n            const desktopContainer = document.getElementById('edition-selection-container');\n            const mobileContainer = document.getElementById('mobile-edition-selection-container');\n            const desktopSelector = document.getElementById('dashboard-edition-selector');\n            const mobileSelector = document.getElementById('mobile-dashboard-edition-selector');\n            \n            if (desktopContainer && mobileContainer) {\n                desktopContainer.style.display = 'block';\n                mobileContainer.style.display = 'block';\n                \n                // Populate edition selectors\n                if (desktopSelector && mobileSelector) {\n                    desktopSelector.innerHTML = '';\n                    mobileSelector.innerHTML = '';\n                    \n                    userRegisteredEditions.forEach(edition => {\n                        const optionText = edition === 'test' ? 'Test Weeks' : `Edition ${edition}`;\n                        const optionValue = edition;\n                        \n                        const desktopOption = document.createElement('option');\n                        desktopOption.value = optionValue;\n                        desktopOption.textContent = optionText;\n                        if (edition === userEdition) {\n                            desktopOption.selected = true;\n                        }\n                        desktopSelector.appendChild(desktopOption);\n                        \n                        const mobileOption = document.createElement('option');\n                        mobileOption.value = optionValue;\n                        mobileOption.textContent = optionText;\n                        if (edition === userEdition) {\n                            mobileOption.selected = true;\n                        }\n                        mobileSelector.appendChild(mobileOption);\n                    });\n                }\n                \n                // Add event listeners for save buttons\n                const desktopSaveBtn = document.getElementById('save-edition-preference');\n                const mobileSaveBtn = document.getElementById('mobile-save-edition-preference');\n                \n                if (desktopSaveBtn) {\n                    desktopSaveBtn.onclick = () => {\n                        if (typeof saveEditionPreference === 'function') {\n                            saveEditionPreference(desktopSelector.value, userId);\n                        }\n                    };\n                }\n                if (mobileSaveBtn) {\n                    mobileSaveBtn.onclick = () => {\n                        if (typeof saveEditionPreference === 'function') {\n                            saveEditionPreference(mobileSelector.value, userId);\n                        }\n                    };\n                }\n            }\n        }\n    }\n\n    // Update edition displays\n    updateEditionDisplays(userEdition) {\n        document.querySelectorAll('#current-edition-display, #submit-edition-display, #re-submit-edition-display, #sidebar-edition-display').forEach(el => {\n            if (el) {\n                if (userEdition === 'test') {\n                    el.textContent = 'Test Weeks';\n                } else {\n                    el.textContent = `Edition ${userEdition}`;\n                }\n            }\n        });\n    }\n\n    // Update lives display\n    updateLivesDisplay(userData, livesRemaining, mobileLivesRemaining, desktopLivesRemaining) {\n        let cardDisplay = '';\n        if (userData.lives === 2) {\n            cardDisplay = '<p style=\"text-align: center; margin-top: 10px; color: #28a745; font-weight: bold;\">All is well, you haven\\'t got a card yet</p>';\n        } else if (userData.lives === 1) {\n            cardDisplay = '<img src=\"images/Yellow Card.png\" alt=\"Yellow Card\" style=\"width: 240px; height: 240px; display: block; margin: 0 auto; margin-top: 10px;\">';\n        } else if (userData.lives === 0) {\n            cardDisplay = '<img src=\"images/redcard.png\" alt=\"Red Card\" style=\"width: 240px; height: 240px; display: block; margin: 0 auto; margin-top: 10px;\">';\n        }\n        \n        // Update lives remaining for desktop, mobile, and legacy\n        if (livesRemaining) livesRemaining.innerHTML = cardDisplay;\n        if (mobileLivesRemaining) mobileLivesRemaining.innerHTML = cardDisplay;\n        if (desktopLivesRemaining) desktopLivesRemaining.innerHTML = cardDisplay;\n    }\n\n    // Get user's edition\n    getUserEdition(userData) {\n        if (userData.defaultEdition) {\n            return userData.defaultEdition;\n        }\n        \n        if (userData.registeredEditions && userData.registeredEditions.length > 0) {\n            return userData.registeredEditions[0];\n        }\n        \n        return 1; // Default to Edition 1\n    }\n\n    // Get user's registered editions\n    getUserRegisteredEditions(userData) {\n        if (userData.registeredEditions && Array.isArray(userData.registeredEditions)) {\n            return userData.registeredEditions;\n        }\n        return [];\n    }\n\n    // Testimonial modal functionality\n    initializeTestimonialModal() {\n        // Create modal dynamically and append to document body\n        let modal = document.getElementById('imageModal');\n        let modalImg = document.getElementById('modalImage');\n        let closeBtn = document.querySelector('.modal-close');\n        \n        // If modal doesn't exist, create it dynamically\n        if (!modal) {\n            modal = document.createElement('div');\n            modal.id = 'imageModal';\n            modal.className = 'modal';\n            modal.style.cssText = 'display: none; position: fixed !important; z-index: 999999 !important; left: 0 !important; top: 0 !important; width: 100vw !important; height: 100vh !important; background-color: rgba(0, 0, 0, 0.8) !important; backdrop-filter: blur(5px) !important;';\n            \n            closeBtn = document.createElement('span');\n            closeBtn.className = 'modal-close';\n            closeBtn.innerHTML = '&times;';\n            closeBtn.style.cssText = 'position: absolute !important; top: -50px !important; right: 0 !important; color: white !important; font-size: 40px !important; font-weight: bold !important; cursor: pointer !important; background: none !important; border: none !important; padding: 0 !important; line-height: 1 !important; z-index: 1000000 !important;';\n            \n            modalImg = document.createElement('img');\n            modalImg.className = 'modal-content';\n            modalImg.id = 'modalImage';\n            modalImg.style.cssText = 'position: absolute !important; top: 50% !important; left: 50% !important; transform: translate(-50%, -50%) !important; max-width: 90% !important; max-height: 90% !important; border-radius: 12px !important; box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4) !important; z-index: 1000001 !important;';\n            \n            modal.appendChild(closeBtn);\n            modal.appendChild(modalImg);\n            document.body.appendChild(modal);\n        }\n        \n        const testimonialImages = document.querySelectorAll('.testimonial-image');\n        \n        // Add click event to all testimonial images\n        testimonialImages.forEach(img => {\n            img.addEventListener('click', function() {\n                modal.style.display = 'block';\n                modalImg.src = this.src;\n                modalImg.alt = this.alt;\n            });\n        });\n        \n        // Close modal when clicking the close button\n        if (closeBtn) {\n            closeBtn.addEventListener('click', function() {\n                modal.style.display = 'none';\n            });\n        }\n        \n        // Close modal when clicking outside the image\n        modal.addEventListener('click', function(e) {\n            if (e.target === modal) {\n                modal.style.display = 'none';\n            }\n        });\n        \n        // Close modal with Escape key\n        document.addEventListener('keydown', function(e) {\n            if (e.key === 'Escape' && modal.style.display === 'block') {\n                modal.style.display = 'none';\n            }\n        });\n    }\n\n    // Toggle testimonials\n    toggleTestimonials() {\n        const testimonials = document.getElementById('mobile-testimonials');\n        const toggleIcon = document.querySelector('.toggle-icon');\n        const toggleText = document.querySelector('.toggle-text');\n        \n        if (testimonials && toggleIcon && toggleText) {\n            if (testimonials.style.display === 'block') {\n                testimonials.style.display = 'none';\n                toggleIcon.textContent = '▼';\n                toggleText.textContent = 'What Our Players Say...';\n            } else {\n                testimonials.style.display = 'block';\n                toggleIcon.textContent = '▲';\n                toggleText.textContent = 'Hide Testimonials';\n            }\n        }\n    }\n\n    // Registration window display functionality\n    async initializeRegistrationWindowDisplay() {\n        // Clear any existing timer to prevent duplicates\n        if (this.registrationUpdateTimer) {\n            clearInterval(this.registrationUpdateTimer);\n        }\n        \n        await this.updateRegistrationWindowDisplay();\n        // Update every 5 minutes to reduce load\n        this.registrationUpdateTimer = setInterval(() => this.updateRegistrationWindowDisplay(), 300000);\n    }\n\n    async updateRegistrationWindowDisplay() {\n        // Prevent multiple simultaneous calls\n        if (this.isUpdatingRegistrationWindow) {\n            console.log('Registration window update already in progress, skipping...');\n            return;\n        }\n        \n        this.isUpdatingRegistrationWindow = true;\n        \n        try {\n            // Ensure database is available before proceeding\n            if (!this.db) {\n                console.warn('Database not available yet, showing default registration window');\n                this.showDefaultRegistrationWindow();\n                this.isUpdatingRegistrationWindow = false;\n                return;\n            }\n            \n            // Ensure registration manager is available\n            if (!window.registrationManager) {\n                console.warn('Registration manager not available yet, showing default registration window');\n                this.showDefaultRegistrationWindow();\n                this.isUpdatingRegistrationWindow = false;\n                return;\n            }\n            \n            console.log('✅ Registration manager is now available, proceeding with update...');\n            \n            const settingsDoc = await this.db.collection('settings').doc(`registration_edition_${window.currentActiveEdition || 1}`).get();\n            if (!settingsDoc.exists) {\n                console.log('No registration settings found, showing default registration window');\n                this.showDefaultRegistrationWindow();\n                return;\n            }\n\n            const settings = settingsDoc.data();\n            const now = new Date();\n            \n            // Check if registration is currently open\n            if (typeof window.registrationManager.checkRegistrationWindow === 'function') {\n                const isCurrentlyOpen = await window.registrationManager.checkRegistrationWindow();\n                \n                if (isCurrentlyOpen) {\n                    // Registration is open - show countdown to end\n                    const endDate = settings.endDate ? new Date(settings.endDate.toDate()) : null;\n                    if (endDate) {\n                        this.showRegistrationCountdown(endDate);\n                    } else {\n                        this.showDefaultRegistrationWindow();\n                    }\n                    this.showRegisterButton(true);\n                } else {\n                    // Registration is closed - check for next window\n                    const nextStartDate = settings.nextStartDate ? new Date(settings.nextStartDate.toDate()) : null;\n                    if (nextStartDate && nextStartDate > now) {\n                        this.showNextRegistrationCountdown(nextStartDate);\n                    } else {\n                        this.showDefaultRegistrationWindow();\n                    }\n                    this.showRegisterButton(false);\n                }\n            } else {\n                console.warn('Registration manager checkRegistrationWindow function not available');\n                this.showDefaultRegistrationWindow();\n                this.showRegisterButton(false);\n            }\n        } catch (error) {\n            console.error('Error updating registration window display:', error);\n            this.showDefaultRegistrationWindow();\n            this.showRegisterButton(false);\n        } finally {\n            // Always reset the flag\n            this.isUpdatingRegistrationWindow = false;\n        }\n    }\n\n    // Show default registration window when settings are not available\n    showDefaultRegistrationWindow() {\n        const countdownDiv = document.querySelector('#registration-countdown');\n        const nextCountdownDiv = document.querySelector('#next-registration-countdown');\n        \n        if (countdownDiv && nextCountdownDiv) {\n            // Show the current registration window with a default message\n            countdownDiv.style.display = 'block';\n            nextCountdownDiv.style.display = 'none';\n            \n            const timerSpan = document.querySelector('#countdown-timer');\n            if (timerSpan) {\n                timerSpan.textContent = 'Registration Open';\n            }\n            \n            // Show the register button\n            this.showRegisterButton(true);\n        }\n    }\n\n    // Cleanup method to clear timers\n    cleanupRegistrationTimers() {\n        if (this.registrationUpdateTimer) {\n            clearInterval(this.registrationUpdateTimer);\n            this.registrationUpdateTimer = null;\n        }\n        if (this.countdownTimer) {\n            clearInterval(this.countdownTimer);\n            this.countdownTimer = null;\n        }\n    }\n\n    showRegistrationCountdown(endDate) {\n        const countdownDiv = document.querySelector('#registration-countdown');\n        const nextCountdownDiv = document.querySelector('#next-registration-countdown');\n        const timerSpan = document.querySelector('#countdown-timer');\n        \n        if (countdownDiv && timerSpan) {\n            countdownDiv.style.display = 'block';\n            if (nextCountdownDiv) nextCountdownDiv.style.display = 'none';\n            \n            // Update countdown every second\n            const updateCountdown = () => {\n                const now = new Date();\n                const timeLeft = endDate - now;\n                \n                if (timeLeft <= 0) {\n                    // Registration window has ended\n                    this.hideRegistrationCountdowns();\n                    this.showRegisterButton(false);\n                    // Don't call updateRegistrationWindowDisplay here - let the interval handle it\n                    return;\n                }\n                \n                const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n                const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n                const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);\n                \n                let countdownText = '';\n                if (days > 0) countdownText += `${days}d `;\n                if (hours > 0 || days > 0) countdownText += `${hours}h `;\n                if (minutes > 0 || hours > 0 || days > 0) countdownText += `${minutes}m `;\n                countdownText += `${seconds}s`;\n                \n                timerSpan.textContent = countdownText;\n            };\n            \n            updateCountdown();\n            // Clear any existing countdown timer\n            if (this.countdownTimer) {\n                clearInterval(this.countdownTimer);\n            }\n            // Update every second\n            this.countdownTimer = setInterval(updateCountdown, 1000);\n        }\n    }\n\n    showNextRegistrationCountdown(startDate) {\n        const countdownDiv = document.querySelector('#registration-countdown');\n        const nextCountdownDiv = document.querySelector('#next-registration-countdown');\n        const nextTimerSpan = document.querySelector('#next-countdown-timer');\n        \n        if (nextCountdownDiv && nextTimerSpan) {\n            nextCountdownDiv.style.display = 'block';\n            if (countdownDiv) countdownDiv.style.display = 'none';\n            \n            // Update countdown every second\n            const updateCountdown = () => {\n                const now = new Date();\n                const timeLeft = startDate - now;\n                \n                if (timeLeft <= 0) {\n                    // Next registration window has started\n                    this.hideRegistrationCountdowns();\n                    // Refresh the display to check current window\n                    setTimeout(() => this.updateRegistrationWindowDisplay(), 1000);\n                    return;\n                }\n                \n                const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n                const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n                const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);\n                \n                let countdownText = '';\n                if (days > 0) countdownText += `${days}d `;\n                if (hours > 0 || days > 0) countdownText += `${hours}h `;\n                if (minutes > 0 || hours > 0 || days > 0) countdownText += `${minutes}m `;\n                countdownText += `${seconds}s`;\n                \n                nextTimerSpan.textContent = countdownText;\n            };\n            \n            updateCountdown();\n            // Clear any existing countdown timer\n            if (this.countdownTimer) {\n                clearInterval(this.countdownTimer);\n            }\n            // Update every second\n            this.countdownTimer = setInterval(updateCountdown, 1000);\n        }\n    }\n\n    hideRegistrationCountdowns() {\n        const countdownDiv = document.querySelector('#registration-countdown');\n        const nextCountdownDiv = document.querySelector('#next-registration-countdown');\n        \n        if (countdownDiv) countdownDiv.style.display = 'none';\n        if (nextCountdownDiv) nextCountdownDiv.style.display = 'none';\n    }\n\n    showRegisterButton(show) {\n        const registerButton = document.querySelector('#register-now-button');\n        if (registerButton) {\n            registerButton.style.display = show ? 'inline-block' : 'none';\n        }\n    }\n\n    // Vidiprinter functionality\n    initializeVidiprinter() {\n        console.log('Initializing Vidiprinter...');\n        const startBtn = document.querySelector('#start-vidiprinter-btn');\n        const stopBtn = document.querySelector('#stop-vidiprinter-btn');\n        const clearBtn = document.querySelector('#clear-vidiprinter-btn');\n        const autoScrollBtn = document.querySelector('#auto-scroll-toggle');\n        const compSelect = document.querySelector('#vidiprinter-comp');\n        const refreshRateSelect = document.querySelector('#vidiprinter-refresh-rate');\n        \n        console.log('Vidiprinter elements found:', {\n            startBtn: !!startBtn,\n            stopBtn: !!stopBtn,\n            clearBtn: !!clearBtn,\n            autoScrollBtn: !!autoScrollBtn,\n            compSelect: !!compSelect,\n            refreshRateSelect: !!refreshRateSelect\n        });\n\n        if (startBtn) {\n            startBtn.addEventListener('click', () => this.startVidiprinter());\n        }\n        \n        if (stopBtn) {\n            stopBtn.addEventListener('click', () => this.stopVidiprinter());\n        }\n        \n        if (clearBtn) {\n            clearBtn.addEventListener('click', () => this.clearVidiprinterFeed());\n        }\n        \n        if (autoScrollBtn) {\n            autoScrollBtn.addEventListener('click', () => this.toggleAutoScroll());\n        }\n        \n        if (compSelect) {\n            compSelect.addEventListener('change', () => {\n                if (this.isVidiprinterRunning) {\n                    this.stopVidiprinter();\n                    setTimeout(() => this.startVidiprinter(), 100);\n                }\n            });\n        }\n        \n        if (refreshRateSelect) {\n            refreshRateSelect.addEventListener('change', () => {\n                if (this.isVidiprinterRunning) {\n                    this.stopVidiprinter();\n                    setTimeout(() => this.startVidiprinter(), 100);\n                }\n            });\n        }\n        \n        // Add a test button if it doesn't exist\n        const testBtn = document.querySelector('#test-vidiprinter-btn');\n        if (testBtn) {\n            testBtn.addEventListener('click', () => this.testVidiprinterConnection());\n        }\n        \n        // Log the initialization status\n        console.log('📺 Vidiprinter initialization complete');\n        console.log('📺 System ready check:', this.isVidiprinterReady());\n        \n        // Show initial status\n        this.addVidiprinterEntry('Vidiprinter system initialized and ready', 'status');\n        this.showVidiprinterStatus();\n        \n        // Auto-start the vidiprinter for better user experience\n        setTimeout(() => {\n            if (this.isVidiprinterReady() && !this.isVidiprinterRunning) {\n                console.log('📺 Auto-starting vidiprinter...');\n                this.startVidiprinter();\n            }\n        }, 1000);\n    }\n    \n    // Test vidiprinter connection\n    async testVidiprinterConnection() {\n        console.log('📺 Testing vidiprinter connection...');\n        \n        if (!this.isVidiprinterReady()) {\n            this.addVidiprinterEntry('System not ready for testing', 'error');\n            return;\n        }\n        \n        try {\n            this.addVidiprinterEntry('Testing connection...', 'status');\n            const data = await window.fetchVidiprinterData();\n            console.log('📺 Test connection result:', data);\n            \n            if (data && Array.isArray(data) && data.length > 0) {\n                this.addVidiprinterEntry(`Connection successful! Found ${data.length} events`, 'status');\n            } else {\n                this.addVidiprinterEntry('Connection successful but no events found', 'status');\n            }\n        } catch (error) {\n            console.error('📺 Test connection failed:', error);\n            this.addVidiprinterEntry(`Test failed: ${error.message}`, 'error');\n        }\n    }\n    \n    // Manual vidiprinter update\n    async manualVidiprinterUpdate() {\n        console.log('📺 Manual vidiprinter update requested...');\n        \n        if (!this.isVidiprinterRunning) {\n            this.addVidiprinterEntry('Vidiprinter not running. Please start it first.', 'status');\n            return;\n        }\n        \n        try {\n            await this.performVidiprinterUpdate();\n            this.addVidiprinterEntry('Manual update completed', 'status');\n        } catch (error) {\n            console.error('📺 Manual update failed:', error);\n            this.addVidiprinterEntry(`Manual update failed: ${error.message}`, 'error');\n        }\n    }\n\n    async startVidiprinter() {\n        if (this.isVidiprinterRunning) {\n            console.log('📺 Vidiprinter is already running');\n            return;\n        }\n\n        // Check if the system is ready\n        if (!this.isVidiprinterReady()) {\n            console.error('📺 Vidiprinter system not ready');\n            this.addVidiprinterEntry('Cannot start vidiprinter - system not ready. Please refresh the page.', 'error');\n            return;\n        }\n\n        console.log('📺 Starting vidiprinter...');\n        this.isVidiprinterRunning = true;\n\n        const startBtn = document.querySelector('#start-vidiprinter-btn');\n        const stopBtn = document.querySelector('#stop-vidiprinter-btn');\n        \n        if (startBtn) startBtn.disabled = true;\n        if (stopBtn) stopBtn.disabled = false;\n\n        // Clear processed events when starting fresh\n        this.processedEvents.clear();\n        \n        // Clear the feed when starting\n        this.clearVidiprinterFeed();\n\n        // Start the vidiprinter update loop\n        this.vidiprinterInterval = setInterval(async () => {\n            try {\n                await this.performVidiprinterUpdate();\n            } catch (error) {\n                console.error('Error during vidiprinter update:', error);\n            }\n        }, 30000); // Update every 30 seconds\n\n        // Show system status\n        this.addVidiprinterEntry('Vidiprinter system started successfully', 'status');\n        \n        // Perform initial update\n        await this.performVidiprinterUpdate();\n    }\n\n    stopVidiprinter() {\n        if (!this.isVidiprinterRunning) {\n            console.log('Vidiprinter is not running');\n            return;\n        }\n\n        console.log('Stopping vidiprinter...');\n        this.isVidiprinterRunning = false;\n\n        if (this.vidiprinterInterval) {\n            clearInterval(this.vidiprinterInterval);\n            this.vidiprinterInterval = null;\n        }\n\n        const startBtn = document.querySelector('#start-vidiprinter-btn');\n        const stopBtn = document.querySelector('#stop-vidiprinter-btn');\n        \n        if (startBtn) startBtn.disabled = false;\n        if (stopBtn) stopBtn.disabled = true;\n        \n        // Show system status\n        this.addVidiprinterEntry('Vidiprinter system stopped', 'status');\n    }\n\n    async performVidiprinterUpdate() {\n        try {\n            // Check if API calls are suspended\n            if (typeof window.isApiSuspended === 'function') {\n                const isSuspended = await window.isApiSuspended();\n                if (isSuspended) {\n                    console.log('📺 API calls are suspended, skipping vidiprinter update');\n                    this.addVidiprinterEntry('API calls are currently suspended. Manual updates only.', 'status');\n                    return;\n                }\n            }\n            \n            // Check if the global function is available\n            if (typeof window.fetchVidiprinterData === 'function') {\n                console.log('📺 Performing vidiprinter update...');\n                const data = await window.fetchVidiprinterData();\n                console.log('📺 Received vidiprinter data:', data);\n                \n                if (data && Array.isArray(data)) {\n                    this.processVidiprinterData(data);\n                } else {\n                    console.warn('📺 Invalid vidiprinter data received:', data);\n                    this.addVidiprinterEntry('Vidiprinter update failed. Please check the console for details.', 'error');\n                }\n            } else {\n                console.warn('📺 fetchVidiprinterData function not available globally');\n                this.addVidiprinterEntry('Vidiprinter system not properly initialized. Please refresh the page.', 'error');\n            }\n        } catch (error) {\n            console.error('❌ Error performing vidiprinter update:', error);\n            this.addVidiprinterEntry(`Vidiprinter error: ${error.message}`, 'error');\n        }\n    }\n\n    processVidiprinterData(vidiprinterEvents) {\n        if (!Array.isArray(vidiprinterEvents)) {\n            console.warn('Invalid vidiprinter data received:', vidiprinterEvents);\n            return;\n        }\n\n        console.log(`📺 Processing ${vidiprinterEvents.length} vidiprinter events`);\n\n        if (vidiprinterEvents.length === 0) {\n            this.addVidiprinterEntry('No live matches currently available. The vidiprinter will update when matches are in progress.', 'status');\n            return;\n        }\n\n        let newEventsCount = 0;\n        vidiprinterEvents.forEach(event => {\n            if (event && event.text) {\n                // Skip Attendance events\n                if (event.type === 'Attendance') {\n                    return;\n                }\n                \n                // Create a unique identifier for this event to prevent duplicates\n                const eventId = this.createEventId(event);\n                \n                // Only process if we haven't seen this event before\n                if (!this.processedEvents.has(eventId)) {\n                    this.processedEvents.add(eventId);\n                    this.addVidiprinterEntry(event.text, event.type || 'status', event);\n                    newEventsCount++;\n                }\n            }\n        });\n        \n        if (newEventsCount > 0) {\n            console.log(`📺 Added ${newEventsCount} new events to vidiprinter`);\n        }\n    }\n\n    // Create a unique identifier for an event to prevent duplicates\n    createEventId(event) {\n        // Use timestamp + text + type as unique identifier\n        const timestamp = event['date/time'] || '';\n        const text = event.text || '';\n        const type = event.type || '';\n        return `${timestamp}|${text}|${type}`;\n    }\n\n    addVidiprinterEntry(text, type = 'status', eventData = null) {\n        // Use enhanced vidiprinter feed by default\n        let feed = document.querySelector('#enhanced-vidiprinter-feed');\n        if (!feed) {\n            // Fallback to standard feed if enhanced not available\n            feed = document.querySelector('#vidiprinter-feed');\n        }\n        \n        if (!feed) {\n            console.warn('Vidiprinter feed element not found - neither #enhanced-vidiprinter-feed nor #vidiprinter-feed');\n            return;\n        }\n\n        const entry = document.createElement('div');\n        // Use API timestamp if available, otherwise use current time\n        let timestamp;\n        if (eventData && eventData['date/time']) {\n            // Parse the API timestamp format \"2025-08-09 15:45:51\" and convert to \"09-08-2025 15:45:51\"\n            const apiDateTime = eventData['date/time'];\n            const dateTimeParts = apiDateTime.split(' ');\n            if (dateTimeParts.length === 2) {\n                const datePart = dateTimeParts[0]; // \"2025-08-09\"\n                const timePart = dateTimeParts[1]; // \"15:45:51\"\n                const dateParts = datePart.split('-');\n                if (dateParts.length === 3) {\n                    const day = dateParts[2];\n                    const month = dateParts[1];\n                    const year = dateParts[0];\n                    timestamp = `${day}-${month}-${year} ${timePart}`;\n                } else {\n                    timestamp = apiDateTime;\n                }\n            } else {\n                timestamp = apiDateTime;\n            }\n        } else {\n            // Fallback to current time in DD-MM-YYYY HH:MM:SS format\n            const now = new Date();\n            const day = String(now.getDate()).padStart(2, '0');\n            const month = String(now.getMonth() + 1).padStart(2, '0');\n            const year = now.getFullYear();\n            const time = now.toLocaleTimeString('en-GB', { \n                timeZone: 'Europe/London',\n                hour: '2-digit', \n                minute: '2-digit',\n                second: '2-digit'\n            });\n            timestamp = `${day}-${month}-${year} ${time}`;\n        }\n        \n        // Format display as requested: \"DD-MM-YYYY HH:MM:SS - Type [emoji] Text\"\n        let displayText = text;\n        let entryClass = `vidiprinter-entry ${type}`;\n        let emoji = '';\n        \n        // Add special formatting for different event types\n        if (type === 'goal' || type === 'Goals') {\n            entryClass += ' goal';\n            emoji = '⚽';\n            type = 'GOAL'; // Display as GOAL instead of Goals\n        } else if (type === 'card' || type === 'Cards') {\n            entryClass += ' card';\n            emoji = '🟨';\n        } else if (type === 'substitution' || type === 'Substitutions') {\n            entryClass += ' substitution';\n            emoji = '🔄';\n        } else if (type === 'match' || type === 'Matches') {\n            entryClass += ' match';\n            emoji = '🏟️';\n        } else if (type === 'kick-off' || type === 'Kick-off') {\n            entryClass += ' kickoff';\n            emoji = '📢';\n            type = 'Kick-off';\n        } else if (type === 'half-time' || type === 'Half-time') {\n            entryClass += ' halftime';\n            emoji = '⏸️';\n            type = 'HT'; // Display as HT instead of Half-time\n        } else if (type === 'full-time' || type === 'Full-time') {\n            entryClass += ' fulltime';\n            emoji = '🏁';\n            type = 'FT'; // Display as FT instead of Full-time\n        } else if (type === 'Correction') {\n            entryClass += ' correction';\n            emoji = '🔧';\n            type = 'Error';\n        } else if (type === 'error') {\n            entryClass += ' error';\n            emoji = '❌';\n        } else if (type === 'status') {\n            entryClass += ' status';\n            emoji = 'ℹ️';\n        }\n        \n        // Use enhanced-vidiprinter-entry class for enhanced feed, vidiprinter-entry for standard feed\n        const isEnhancedFeed = feed.id === 'enhanced-vidiprinter-feed';\n        entry.className = isEnhancedFeed ? `enhanced-vidiprinter-entry ${type}` : `vidiprinter-entry ${type}`;\n        \n        // Format: \"09-08-2025 15:01:10 [emoji] GOAL Gateshead v Southend United\"\n        entry.innerHTML = `\n            <span class=\"timestamp\">${timestamp}</span>\n            <span class=\"emoji\">${emoji}</span>\n            <span class=\"type\">${type}</span>\n            <span class=\"text\">${text}</span>\n        `;\n\n        feed.appendChild(entry);\n\n        // Auto-scroll if enabled\n        if (this.autoScrollEnabled) {\n            feed.scrollTop = feed.scrollHeight;\n        }\n\n        // Limit entries to prevent memory issues\n        const maxEntries = 100;\n        while (feed.children.length > maxEntries) {\n            feed.removeChild(feed.firstChild);\n        }\n        \n        // Add a subtle animation effect for new entries\n        entry.style.opacity = '0';\n        entry.style.transform = 'translateY(-10px)';\n        entry.style.transition = 'all 0.3s ease-in-out';\n        \n        setTimeout(() => {\n            entry.style.opacity = '1';\n            entry.style.transform = 'translateY(0)';\n        }, 10);\n    }\n\n    clearVidiprinterFeed() {\n        // Clear both regular and enhanced vidiprinter feeds\n        const regularFeed = document.querySelector('#vidiprinter-feed');\n        const enhancedFeed = document.querySelector('#enhanced-vidiprinter-feed');\n        \n        if (regularFeed) {\n            regularFeed.innerHTML = '';\n        }\n        \n        if (enhancedFeed) {\n            enhancedFeed.innerHTML = '';\n        }\n        \n        // Also clear the processed events set when clearing the feed\n        this.processedEvents.clear();\n        \n        console.log('📺 Vidiprinter feeds cleared and processed events reset');\n    }\n\n    toggleAutoScroll() {\n        this.autoScrollEnabled = !this.autoScrollEnabled;\n        const autoScrollBtn = document.querySelector('#auto-scroll-toggle');\n        if (autoScrollBtn) {\n            autoScrollBtn.textContent = this.autoScrollEnabled ? 'Disable Auto-scroll' : 'Enable Auto-scroll';\n        }\n        \n        if (this.autoScrollEnabled) {\n            const feed = document.querySelector('#vidiprinter-feed');\n            if (feed) {\n                feed.scrollTop = feed.scrollHeight;\n            }\n        }\n    }\n\n    // Show vidiprinter system status\n    showVidiprinterStatus() {\n        const status = this.isVidiprinterRunning ? 'Running' : 'Stopped';\n        const lastUpdate = this.lastUpdateTime ? new Date(this.lastUpdateTime).toLocaleTimeString() : 'Never';\n        const globalFunctionAvailable = typeof window.fetchVidiprinterData === 'function';\n        \n        this.addVidiprinterEntry(`System Status: ${status} | Last Update: ${lastUpdate} | API: ${globalFunctionAvailable ? 'Available' : 'Not Available'}`, 'status');\n    }\n    \n    // Check if vidiprinter system is ready\n    isVidiprinterReady() {\n        const hasGlobalFunction = typeof window.fetchVidiprinterData === 'function';\n        const hasFeedElement = document.querySelector('#enhanced-vidiprinter-feed') || document.querySelector('#vidiprinter-feed');\n        \n        console.log('📺 Vidiprinter system check:', {\n            globalFunction: hasGlobalFunction,\n            feedElement: hasFeedElement,\n            isRunning: this.isVidiprinterRunning\n        });\n        \n        return hasGlobalFunction && hasFeedElement;\n    }\n\n    // Cleanup resources\n    cleanup() {\n        this.stopVidiprinter();\n        if (this.vidiprinterInterval) {\n            clearInterval(this.vidiprinterInterval);\n            this.vidiprinterInterval = null;\n        }\n    }\n}\n\n// Export the UIManager class\nexport default UIManager;\n","// Game Logic Module\n// Handles all core game mechanics, pick management, navigation, and game logic functionality\n\nclass GameLogicManager {\n    constructor(db) {\n        this.db = db;\n        this.gameLogicInitialized = false;\n        this.deadlineCheckerInterval = null;\n        this.currentActiveEdition = 1;\n        this.currentActiveGameweek = '1';\n    }\n\n    // Initialize game logic management\n    initializeGameLogicManagement() {\n        if (this.gameLogicInitialized) {\n            console.log('Game logic management already initialized, skipping...');\n            return;\n        }\n        \n        console.log('Initializing game logic management...');\n        this.gameLogicInitialized = true;\n        \n        this.setupEventListeners();\n        this.startDeadlineChecker();\n    }\n\n    // Setup event listeners for game logic\n    setupEventListeners() {\n        console.log('Setting up game logic event listeners...');\n        // Event listeners will be set up by the calling code\n    }\n\n    // --- PICK MANAGEMENT FUNCTIONS ---\n\n    // Generate pick history HTML\n    generatePickHistory(picks) {\n        if (Object.keys(picks).length === 0) {\n            return '<p>No picks made yet</p>';\n        }\n        \n        let html = '<div class=\"pick-list\">';\n        const gameweeks = [\n            { key: 'gw1', label: 'Game Week 1' },\n            { key: 'gw2', label: 'Game Week 2' },\n            { key: 'gw3', label: 'Game Week 3' },\n            { key: 'gw4', label: 'Game Week 4' },\n            { key: 'gw5', label: 'Game Week 5' },\n            { key: 'gw6', label: 'Game Week 6' },\n            { key: 'gw7', label: 'Game Week 7' },\n            { key: 'gw8', label: 'Game Week 8' },\n            { key: 'gw9', label: 'Game Week 9' },\n            { key: 'gw10', label: 'Game Week 10' },\n            { key: 'gwtiebreak', label: 'Tiebreak Round' }\n        ];\n        \n        gameweeks.forEach(gw => {\n            const pick = picks[gw.key];\n            const badge = pick ? this.getTeamBadge(pick) : null;\n            const badgeHtml = badge ? `<img src=\"${badge}\" alt=\"${pick}\" style=\"width: 14px; height: 14px; margin-right: 4px; vertical-align: middle;\">` : '';\n            html += `\n                <div class=\"pick-item\">\n                    <strong>${gw.label}:</strong> ${pick ? badgeHtml + pick : 'No pick made'}\n                </div>\n            `;\n        });\n        html += '</div>';\n        return html;\n    }\n\n    // Render pick history\n    async renderPickHistory(picks, container, userId, userData = null) {\n        if (!container) {\n            console.error('Pick history container not found');\n            return;\n        }\n\n        try {\n            const pickHistoryHtml = this.generatePickHistory(picks);\n            container.innerHTML = pickHistoryHtml;\n        } catch (error) {\n            console.error('Error rendering pick history:', error);\n            container.innerHTML = '<p>Error loading pick history</p>';\n        }\n    }\n\n    // --- GAMEWEEK NAVIGATION FUNCTIONS ---\n\n    // Initialize gameweek navigation\n    initializeGameweekNavigation(currentGameWeek, userData, userId) {\n        const currentGameweekDisplay = document.querySelector('#current-gameweek-display');\n        const prevButton = document.querySelector('#prev-gameweek');\n        const nextButton = document.querySelector('#next-gameweek');\n        const gameweekTabs = document.querySelectorAll('.gameweek-tab');\n        const tiebreakTab = document.querySelector('.tiebreak-tab');\n        \n        // Check if tiebreak is enabled in admin settings\n        this.db.collection('settings').doc('currentCompetition').get().then(settingsDoc => {\n            if (settingsDoc.exists) {\n                const settings = settingsDoc.data();\n                const tiebreakEnabled = settings.tiebreak_enabled || false;\n                \n                // Show/hide tiebreak tab based on admin setting\n                if (tiebreakTab) {\n                    if (tiebreakEnabled) {\n                        tiebreakTab.style.display = 'inline-block';\n                    } else {\n                        tiebreakTab.style.display = 'none';\n                        // If tiebreak is disabled and current gameweek is tiebreak, switch to GW10\n                        if (currentGameWeek === 'tiebreak') {\n                            this.navigateToGameweek('10', userData, userId);\n                            return;\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Set current gameweek display\n        const displayText = currentGameWeek === 'tiebreak' ? 'Tiebreak Round' : `Game Week ${currentGameWeek}`;\n        if (currentGameweekDisplay) {\n            currentGameweekDisplay.textContent = displayText;\n        }\n        \n        // Update navigation buttons\n        this.updateNavigationButtons(currentGameWeek, prevButton, nextButton);\n        \n        // Update active tab\n        this.updateActiveTab(currentGameWeek, gameweekTabs);\n        \n        // Add event listeners\n        if (prevButton) {\n            prevButton.addEventListener('click', () => this.navigateGameweek(currentGameWeek, -1, userData, userId));\n        }\n        if (nextButton) {\n            nextButton.addEventListener('click', () => this.navigateGameweek(currentGameWeek, 1, userData, userId));\n        }\n        \n        // Add tab click listeners\n        gameweekTabs.forEach(tab => {\n            tab.addEventListener('click', () => {\n                const gameweek = tab.dataset.gameweek;\n                this.navigateToGameweek(gameweek, userData, userId);\n            });\n        });\n        \n        // Update tab states based on deadlines\n        this.updateTabStates(gameweekTabs);\n    }\n\n    // Update navigation buttons\n    updateNavigationButtons(currentGameWeek, prevButton, nextButton) {\n        if (!prevButton || !nextButton) return;\n        \n        const gameweekNum = currentGameWeek === 'tiebreak' ? 11 : parseInt(currentGameWeek);\n        \n        // Enable/disable previous button\n        prevButton.disabled = gameweekNum <= 1;\n        \n        // Enable/disable next button - allow navigation up to tiebreak (11)\n        nextButton.disabled = gameweekNum >= 11;\n    }\n\n    // Update active tab\n    updateActiveTab(currentGameWeek, gameweekTabs) {\n        gameweekTabs.forEach(tab => {\n            tab.classList.remove('active');\n            if (tab.dataset.gameweek === currentGameWeek) {\n                tab.classList.add('active');\n            }\n        });\n    }\n\n    // Update tab states\n    updateTabStates(gameweekTabs) {\n        gameweekTabs.forEach(tab => {\n            const gameweek = tab.dataset.gameweek;\n            this.checkDeadlineForGameweek(gameweek).then(isDeadlinePassed => {\n                if (isDeadlinePassed) {\n                    tab.classList.add('locked');\n                } else {\n                    tab.classList.remove('locked');\n                }\n            });\n        });\n    }\n\n    // Navigate gameweek\n    navigateGameweek(currentGameWeek, direction, userData, userId) {\n        const currentNum = currentGameWeek === 'tiebreak' ? 11 : parseInt(currentGameWeek);\n        const newNum = currentNum + direction;\n        \n        if (newNum < 1 || newNum > 11) return;\n        \n        const newGameweek = newNum === 11 ? 'tiebreak' : newNum.toString();\n        this.navigateToGameweek(newGameweek, userData, userId);\n    }\n\n    // Navigate to specific gameweek\n    async navigateToGameweek(gameweek, userData, userId) {\n        try {\n            // Fetch fresh user data from database to ensure we have the latest picks\n            const freshUserDoc = await this.db.collection('users').doc(userId).get();\n            const freshUserData = freshUserDoc.exists ? freshUserDoc.data() : userData;\n            \n            // Update current gameweek display\n            const currentGameweekDisplay = document.querySelector('#current-gameweek-display');\n            const displayText = gameweek === 'tiebreak' ? 'Tiebreak Round' : `Game Week ${gameweek}`;\n            if (currentGameweekDisplay) {\n                currentGameweekDisplay.textContent = displayText;\n            }\n            \n            // Update navigation buttons\n            const prevButton = document.querySelector('#prev-gameweek');\n            const nextButton = document.querySelector('#next-gameweek');\n            this.updateNavigationButtons(gameweek, prevButton, nextButton);\n            \n            // Update event listeners with the new gameweek\n            if (prevButton) {\n                // Remove existing event listeners\n                prevButton.replaceWith(prevButton.cloneNode(true));\n                const newPrevButton = document.querySelector('#prev-gameweek');\n                newPrevButton.addEventListener('click', () => this.navigateGameweek(gameweek, -1, freshUserData, userId));\n            }\n            \n            if (nextButton) {\n                // Remove existing event listeners\n                nextButton.replaceWith(nextButton.cloneNode(true));\n                const newNextButton = document.querySelector('#next-gameweek');\n                newNextButton.addEventListener('click', () => this.navigateGameweek(gameweek, 1, freshUserData, userId));\n            }\n            \n            // Update active tab\n            const gameweekTabs = document.querySelectorAll('.gameweek-tab');\n            this.updateActiveTab(gameweek, gameweekTabs);\n            \n            // Load fixtures for the selected gameweek with fresh data\n            // This will be handled by the fixtures manager\n            if (window.loadFixturesForDeadline) {\n                window.loadFixturesForDeadline(gameweek, freshUserData, userId);\n            }\n            \n            console.log(`Navigated to gameweek ${gameweek} with fresh user data`);\n        } catch (error) {\n            console.error('Error navigating to gameweek:', error);\n            // Fallback to original behavior if there's an error\n            if (window.loadFixturesForDeadline) {\n                window.loadFixturesForDeadline(gameweek, userData, userId);\n            }\n        }\n    }\n\n    // Initialize mobile gameweek navigation\n    initializeMobileGameweekNavigation(currentGameWeek, userData, userId) {\n        console.log('Initializing mobile gameweek navigation for gameweek:', currentGameWeek);\n        \n        // Get all mobile gameweek tab buttons (they use the same class as desktop)\n        const mobileGameweekButtons = document.querySelectorAll('#mobile-gameweek-navigation .gameweek-tab');\n        \n        if (mobileGameweekButtons.length === 0) {\n            console.log('No mobile gameweek buttons found');\n            return;\n        }\n        \n        // Set active gameweek\n        this.setActiveGameweek(currentGameWeek);\n        \n        // Add click event listeners to all mobile gameweek buttons\n        mobileGameweekButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                const targetGameweek = button.getAttribute('data-gameweek');\n                console.log('Navigating to mobile gameweek:', targetGameweek);\n                this.navigateToGameweek(targetGameweek, userData, userId);\n            });\n        });\n        \n        // Also set up the mobile navigation controls (prev/next buttons)\n        const mobilePrevButton = document.querySelector('#mobile-prev-gameweek');\n        const mobileNextButton = document.querySelector('#mobile-next-gameweek');\n        const mobileCurrentGameweekDisplay = document.querySelector('#mobile-current-gameweek-display');\n        \n        if (mobileCurrentGameweekDisplay) {\n            const displayText = currentGameWeek === 'tiebreak' ? 'Tiebreak Round' : `Game Week ${currentGameWeek}`;\n            mobileCurrentGameweekDisplay.textContent = displayText;\n        }\n        \n        if (mobilePrevButton) {\n            mobilePrevButton.addEventListener('click', () => this.navigateGameweek(currentGameWeek, -1, userData, userId));\n        }\n        \n        if (mobileNextButton) {\n            mobileNextButton.addEventListener('click', () => this.navigateGameweek(currentGameWeek, 1, userData, userId));\n        }\n        \n        console.log('Mobile gameweek navigation initialized');\n    }\n\n    // --- PICK OPERATIONS ---\n\n    // Remove pick\n    removePick(userId, gameweekKey) {\n        if (confirm('Are you sure you want to remove this pick?')) {\n            const gameweek = gameweekKey.replace('gw', '');\n            \n            // Check if deadline has passed\n            this.checkDeadlineForGameweek(gameweek).then(isDeadlinePassed => {\n                if (isDeadlinePassed) {\n                    alert('Cannot remove pick - deadline has passed for this gameweek.');\n                    return;\n                }\n                \n                // Remove the pick from Firestore\n                const updateData = {};\n                updateData[`picks.${gameweekKey}`] = this.db.FieldValue.delete();\n                \n                this.db.collection('users').doc(userId).update(updateData).then(() => {\n                    // Refresh the dashboard\n                    firebase.auth().onAuthStateChanged(user => {\n                        if (user && window.renderDashboard) {\n                            window.renderDashboard(user).catch(console.error);\n                        }\n                    });\n                }).catch(error => {\n                    console.error('Error removing pick:', error);\n                    alert('Error removing pick. Please try again.');\n                });\n            });\n        }\n    }\n\n    // Make pick\n    makePick(userId, gameweek) {\n        // Fetch user data and navigate to the gameweek\n        this.db.collection('users').doc(userId).get().then(userDoc => {\n            if (userDoc.exists) {\n                const userData = userDoc.data();\n                this.navigateToGameweek(gameweek, userData, userId);\n                \n                // Switch to the Fixtures tab\n                if (window.switchToFixturesTab) {\n                    window.switchToFixturesTab();\n                }\n            }\n        }).catch(error => {\n            console.error('Error making pick:', error);\n            alert('Error loading user data. Please try again.');\n        });\n    }\n\n    // Select team as temporary pick\n    async selectTeamAsTempPick(teamName, gameweek, userId) {\n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        \n        try {\n            // Check if user has already picked this team in another gameweek\n            const userDoc = await this.db.collection('users').doc(userId).get();\n            if (!userDoc.exists) {\n                alert('User not found.');\n                return;\n            }\n            \n            const userData = userDoc.data();\n            const existingPicks = Object.values(userData.picks || {});\n            \n            if (existingPicks.includes(teamName)) {\n                // Find which gameweek this team was picked in\n                let pickedGameweek = null;\n                for (const [key, pick] of Object.entries(userData.picks || {})) {\n                    if (pick === teamName) {\n                        pickedGameweek = key;\n                        break;\n                    }\n                }\n                \n                if (pickedGameweek) {\n                    const pickedGameweekNum = pickedGameweek === 'gwtiebreak' ? 'tiebreak' : pickedGameweek.replace('gw', '');\n                    \n                    // Offer to release the old pick and save the new one\n                    if (confirm(`You have picked ${teamName} for Game Week ${pickedGameweekNum}. Would you like to release this pick and select ${teamName} for Game Week ${gameweek}?`)) {\n                        const oldGameweekKey = pickedGameweek;\n                        \n                        await this.db.collection('users').doc(userId).update({\n                            [`picks.${oldGameweekKey}`]: this.db.FieldValue.delete(),\n                            [`picks.${gameweekKey}`]: teamName\n                        });\n                        \n                        console.log(`Pick released and new pick saved: ${teamName} for Game Week ${gameweek}`);\n                        \n                        // Refresh the display with updated data\n                        await this.refreshDisplayAfterPickUpdate(gameweek, userId);\n                    }\n                    return;\n                }\n            }\n            \n            // Team is available for picking - show confirmation popup\n            if (confirm(`Would you like to pick ${teamName} for Game Week ${gameweek}?`)) {\n                await this.db.collection('users').doc(userId).update({\n                    [`picks.${gameweekKey}`]: teamName\n                });\n                \n                console.log(`Pick saved: ${teamName} for Game Week ${gameweek}`);\n                \n                // Refresh the display with updated data\n                await this.refreshDisplayAfterPickUpdate(gameweek, userId);\n            }\n        } catch (error) {\n            console.error('Error in selectTeamAsTempPick:', error);\n            alert('Error processing pick. Please try again.');\n        }\n    }\n\n    // Refresh display after pick update\n    async refreshDisplayAfterPickUpdate(gameweek, userId) {\n        try {\n            const updatedUserDoc = await this.db.collection('users').doc(userId).get();\n            if (updatedUserDoc.exists) {\n                const updatedUserData = updatedUserDoc.data();\n                \n                // Get the current gameweek being viewed from the active tab\n                const activeTab = document.querySelector('.gameweek-tab.active');\n                const currentViewedGameweek = activeTab ? activeTab.getAttribute('data-gameweek') : gameweek;\n                \n                // Refresh the desktop display with updated data for the current viewed gameweek\n                if (window.loadFixturesForDeadline) {\n                    window.loadFixturesForDeadline(currentViewedGameweek, updatedUserData, userId);\n                }\n                \n                // Refresh the mobile display with updated data for the current viewed gameweek\n                if (window.loadMobileFixturesForDeadline) {\n                    window.loadMobileFixturesForDeadline(currentViewedGameweek, updatedUserData, userId);\n                }\n                \n                // Update the pick status headers with updated data for the current viewed gameweek\n                if (window.updatePickStatusHeader) {\n                    window.updatePickStatusHeader(currentViewedGameweek, updatedUserData, userId).catch(error => {\n                        console.error('Error updating pick status header:', error);\n                    });\n                }\n                if (window.updateMobilePickStatusHeader) {\n                    window.updateMobilePickStatusHeader(currentViewedGameweek, updatedUserData, userId).catch(error => {\n                        console.error('Error updating mobile pick status header:', error);\n                    });\n                }\n                \n                // Refresh the pick history sidebars with updated data\n                const picksHistoryContainer = document.querySelector('#picks-history');\n                const mobilePicksHistoryContainer = document.querySelector('#mobile-picks-history');\n                const desktopPicksHistoryContainer = document.querySelector('#desktop-picks-history');\n                \n                if (picksHistoryContainer) {\n                    this.renderPickHistory(updatedUserData.picks || {}, picksHistoryContainer, userId, updatedUserData);\n                }\n                if (mobilePicksHistoryContainer) {\n                    this.renderPickHistory(updatedUserData.picks || {}, mobilePicksHistoryContainer, userId, updatedUserData);\n                }\n                if (desktopPicksHistoryContainer) {\n                    this.renderPickHistory(updatedUserData.picks || {}, desktopPicksHistoryContainer, userId, updatedUserData);\n                }\n                \n                console.log(`Display refreshed for gameweek ${currentViewedGameweek} with updated user data`);\n            }\n        } catch (error) {\n            console.error('Error refreshing display:', error);\n        }\n    }\n\n    // Save temporary pick\n    saveTempPick(gameweek, userId) {\n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        const tempPickKey = `tempPick_${userId}_${gameweek}`;\n        const tempPick = sessionStorage.getItem(tempPickKey);\n        \n        if (!tempPick) {\n            alert('No temporary pick to save.');\n            return;\n        }\n        \n        // Check if deadline has passed\n        this.checkDeadlineForGameweek(gameweek).then(isDeadlinePassed => {\n            if (isDeadlinePassed) {\n                alert('Deadline has passed for this gameweek. Picks are locked.');\n                return;\n            }\n            \n            // Save the pick to database\n            this.db.collection('users').doc(userId).update({\n                [`picks.${gameweekKey}`]: tempPick\n            }).then(() => {\n                console.log(`Pick saved: ${tempPick} for Game Week ${gameweek}`);\n                \n                // Clear temporary pick from sessionStorage\n                sessionStorage.removeItem(tempPickKey);\n                \n                // Refresh both the pick history sidebar and the fixtures display\n                this.db.collection('users').doc(userId).get().then(userDoc => {\n                    if (userDoc.exists) {\n                        const userData = userDoc.data();\n                        \n                        // Refresh the pick history sidebar\n                        const picksHistoryContainer = document.querySelector('#picks-history');\n                        if (picksHistoryContainer) {\n                            this.renderPickHistory(userData.picks || {}, picksHistoryContainer, userId, userData);\n                        }\n                        \n                        // Refresh the fixtures display to update the save button\n                        if (window.loadFixturesForDeadline) {\n                            window.loadFixturesForDeadline(gameweek, userData, userId);\n                        }\n                        \n                        // Update the pick status header\n                        if (window.updatePickStatusHeader) {\n                            window.updatePickStatusHeader(gameweek, userData, userId).catch(error => {\n                                console.error('Error updating pick status header:', error);\n                            });\n                        }\n                    }\n                }).catch(console.error);\n            }).catch(error => {\n                console.error('Error saving pick:', error);\n                alert('Error saving pick. Please try again.');\n            });\n        });\n    }\n\n    // Release future pick\n    releaseFuturePick(teamName, gameweek, userId) {\n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        \n        // Confirm the release\n        if (!confirm(`Are you sure you want to release ${teamName} from Game Week ${gameweek}?`)) {\n            return;\n        }\n        \n        // Remove the pick from database\n        this.db.collection('users').doc(userId).update({\n            [`picks.${gameweekKey}`]: this.db.FieldValue.delete()\n        }).then(() => {\n            console.log(`Future pick released: ${teamName} from Game Week ${gameweek}`);\n            \n            // Refresh the display\n            this.db.collection('users').doc(userId).get().then(userDoc => {\n                if (userDoc.exists) {\n                    const userData = userDoc.data();\n                    \n                    // Refresh the pick history sidebar\n                    const picksHistoryContainer = document.querySelector('#picks-history');\n                    if (picksHistoryContainer) {\n                        this.renderPickHistory(userData.picks || {}, picksHistoryContainer, userId, userData);\n                    }\n                    \n                    // Refresh the fixtures display - we need to get the current gameweek from the page\n                    const currentGameWeek = document.querySelector('.gameweek-tab.active')?.getAttribute('data-gameweek') || '1';\n                    if (window.loadFixturesForDeadline) {\n                        window.loadFixturesForDeadline(currentGameWeek, userData, userId);\n                    }\n                }\n            }).catch(console.error);\n        }).catch(error => {\n            console.error('Error releasing future pick:', error);\n            alert('Error releasing pick. Please try again.');\n        });\n    }\n\n    // Select team as pick (legacy function - keeping for compatibility)\n    selectTeamAsPick(teamName, gameweek, userId) {\n        // Redirect to new temporary pick system\n        this.selectTeamAsTempPick(teamName, gameweek, userId);\n    }\n\n    // --- AUTO-PICK FUNCTIONS ---\n\n    // Check and assign auto picks\n    checkAndAssignAutoPicks(userData, currentGameWeek, userId) {\n        const gameweekKey = currentGameWeek === 'tiebreak' ? 'gwtiebreak' : `gw${currentGameWeek}`;\n        \n        // Check if user already has a pick for current gameweek\n        if (userData.picks && userData.picks[gameweekKey]) {\n            return; // User already has a pick\n        }\n\n        // Check if deadline has passed\n        this.db.collection('fixtures').doc(gameweekKey).get().then(doc => {\n            if (doc.exists) {\n                const fixtures = doc.data().fixtures;\n                if (fixtures && fixtures.length > 0) {\n                    const earliestFixture = fixtures.reduce((earliest, fixture) => {\n                        const fixtureDate = new Date(fixture.date);\n                        const earliestDate = new Date(earliest.date);\n                        return fixtureDate < earliestDate ? fixture : earliest;\n                    });\n\n                    const deadlineDate = new Date(earliestFixture.date);\n                    const now = new Date();\n\n                    if (deadlineDate <= now) {\n                        // Deadline has passed, assign auto-pick\n                        this.assignAutoPick(userData, currentGameWeek, userId);\n                    }\n                }\n            }\n        });\n    }\n\n    // Assign auto pick\n    assignAutoPick(userData, gameweek, userId) {\n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        const existingPicks = userData.picks || {};\n        const pickedTeams = Object.values(existingPicks);\n        \n        // Find the next available team alphabetically that hasn't been picked\n        const availableTeams = window.TEAMS_CONFIG ? window.TEAMS_CONFIG.allTeams.filter(team => !pickedTeams.includes(team)) : [];\n        \n        if (availableTeams.length > 0) {\n            const autoPick = availableTeams[0]; // First alphabetical team\n            \n            this.db.collection('users').doc(userId).update({\n                [`picks.${gameweekKey}`]: autoPick\n            }).then(() => {\n                console.log(`Auto-pick assigned: ${autoPick} for Game Week ${gameweek}`);\n                // Refresh the dashboard to show the auto-pick\n                if (window.renderDashboard) {\n                    window.renderDashboard({ uid: userId }).catch(console.error);\n                }\n            }).catch(error => {\n                console.error('Error assigning auto-pick:', error);\n            });\n        }\n    }\n\n    // --- DEADLINE MANAGEMENT ---\n\n    // Get deadline date for gameweek\n    getDeadlineDateForGameweek(gameweek) {\n        return new Promise((resolve) => {\n            // Add timeout to prevent hanging\n            const timeout = setTimeout(() => {\n                console.log('getDeadlineDateForGameweek timeout for:', gameweek);\n                resolve(null);\n            }, 5000); // 5 second timeout\n            \n            // Handle tiebreak gameweek\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${this.currentActiveEdition}_${gameweekKey}`;\n            \n            // Try new structure first, then fallback to old structure\n            this.db.collection('fixtures').doc(editionGameweekKey).get().then(doc => {\n                if (!doc.exists) {\n                    // Fallback to old structure for backward compatibility\n                    return this.db.collection('fixtures').doc(gameweekKey).get();\n                }\n                return doc;\n            }).then(doc => {\n                clearTimeout(timeout);\n                if (doc.exists) {\n                    const fixtures = doc.data().fixtures;\n                    if (fixtures && fixtures.length > 0) {\n                        const earliestFixture = fixtures.reduce((earliest, fixture) => {\n                            const fixtureDate = new Date(fixture.date);\n                            const earliestDate = new Date(earliest.date);\n                            return fixtureDate < earliestDate ? fixture : earliest;\n                        });\n\n                        resolve(new Date(earliestFixture.date));\n                    } else {\n                        resolve(null);\n                    }\n                } else {\n                    resolve(null);\n                }\n            }).catch((error) => {\n                clearTimeout(timeout);\n                console.log('getDeadlineDateForGameweek error:', error);\n                resolve(null);\n            });\n        });\n    }\n\n    // Format deadline date\n    formatDeadlineDate(date) {\n        if (!date) return 'No deadline set';\n        \n        const now = new Date();\n        const deadline = new Date(date);\n        const timeDiff = deadline.getTime() - now.getTime();\n        const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        \n        if (daysDiff < 0) {\n            return 'Deadline passed';\n        } else if (daysDiff === 0) {\n            const hoursDiff = Math.ceil(timeDiff / (1000 * 3600));\n            if (hoursDiff <= 0) {\n                const minutesDiff = Math.ceil(timeDiff / (1000 * 60));\n                return `${minutesDiff} minutes`;\n            }\n            return `${hoursDiff} hours`;\n        } else if (daysDiff === 1) {\n            return 'Tomorrow';\n        } else {\n            return `${daysDiff} days`;\n        }\n    }\n\n    // Get ordinal suffix for day\n    getOrdinalSuffix(day) {\n        if (day > 3 && day < 21) return 'th';\n        switch (day % 10) {\n            case 1: return 'st';\n            case 2: return 'nd';\n            case 3: return 'rd';\n            default: return 'th';\n        }\n    }\n\n    // Check deadline for gameweek\n    checkDeadlineForGameweek(gameweek, edition = null) {\n        return new Promise((resolve) => {\n            // Add timeout to prevent hanging\n            const timeout = setTimeout(() => {\n                console.log('checkDeadlineForGameweek timeout for:', gameweek, edition);\n                resolve(false);\n            }, 5000); // 5 second timeout\n            \n            // Handle tiebreak gameweek\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            // Use provided edition or fall back to current active edition\n            const editionToUse = edition || this.currentActiveEdition;\n            const editionGameweekKey = `edition${editionToUse}_${gameweekKey}`;\n            \n            // Try new structure first, then fallback to old structure\n            this.db.collection('fixtures').doc(editionGameweekKey).get().then(doc => {\n                if (!doc.exists) {\n                    // Fallback to old structure for backward compatibility\n                    return this.db.collection('fixtures').doc(gameweekKey).get();\n                }\n                return doc;\n            }).then(doc => {\n                clearTimeout(timeout);\n                if (doc.exists) {\n                    const fixtures = doc.data().fixtures;\n                    if (fixtures && fixtures.length > 0) {\n                        const earliestFixture = fixtures.reduce((earliest, fixture) => {\n                            const fixtureDate = new Date(fixture.date);\n                            const earliestDate = new Date(earliest.date);\n                            return fixtureDate < earliestDate ? fixture : earliest;\n                        });\n\n                        const deadlineDate = new Date(earliestFixture.date);\n                        const now = new Date();\n                        const isDeadlinePassed = deadlineDate <= now;\n                        resolve(isDeadlinePassed);\n                    } else {\n                        resolve(false);\n                    }\n                } else {\n                    resolve(false);\n                }\n            }).catch((error) => {\n                clearTimeout(timeout);\n                console.log('checkDeadlineForGameweek error:', error);\n                resolve(false);\n            });\n        });\n    }\n\n    // Start deadline checker\n    startDeadlineChecker() {\n        // Check for deadlines every minute\n        this.deadlineCheckerInterval = setInterval(() => {\n            this.db.collection('settings').doc('currentCompetition').get().then(settingsDoc => {\n                if (settingsDoc.exists) {\n                    const settings = settingsDoc.data();\n                    const currentGameWeek = settings.active_gameweek;\n                    \n                    // Check if deadline has passed for current gameweek\n                    this.checkDeadlineForGameweek(currentGameWeek).then(isDeadlinePassed => {\n                        if (isDeadlinePassed) {\n                            // Check all users for auto-picks needed\n                            this.db.collection('users').get().then(querySnapshot => {\n                                querySnapshot.forEach(doc => {\n                                    const userData = doc.data();\n                                    const gameweekKey = currentGameWeek === 'tiebreak' ? 'gwtiebreak' : `gw${currentGameWeek}`;\n                                    \n                                    // If user doesn't have a pick for current gameweek, assign auto-pick\n                                    if (!userData.picks || !userData.picks[gameweekKey]) {\n                                        this.assignAutoPick(userData, currentGameWeek, doc.id);\n                                    }\n                                });\n                            });\n                        }\n                    });\n                }\n            });\n        }, 60000); // Check every minute\n    }\n\n    // Batch check deadlines\n    async batchCheckDeadlines(gameweeks, edition) {\n        const results = {};\n        const promises = gameweeks.map(async (gameweek) => {\n            const isDeadlinePassed = await this.checkDeadlineForGameweek(gameweek, edition);\n            results[gameweek] = isDeadlinePassed;\n        });\n        \n        await Promise.all(promises);\n        return results;\n    }\n\n    // --- TEAM STATUS FUNCTIONS ---\n\n    // Get team status simple\n    getTeamStatusSimple(teamName, userData, currentGameWeek, userId) {\n        // Simple fallback implementation to avoid any complex logic that might cause issues\n        try {\n            // Basic validation\n            if (!teamName || !userData || !currentGameWeek || !userId) {\n                return { status: 'normal', clickable: false, reason: 'No user data' };\n            }\n            \n            // Simple check for current pick\n            const gameweekKey = currentGameWeek === 'tiebreak' ? 'gwtiebreak' : `gw${currentGameWeek}`;\n            const currentPick = userData.picks && userData.picks[gameweekKey];\n            \n            if (currentPick === teamName) {\n                return { status: 'current-pick', clickable: false, reason: 'Current pick for this gameweek' };\n            }\n            \n            // Simple check for existing picks\n            const existingPicks = Object.values(userData.picks || {});\n            if (existingPicks.includes(teamName)) {\n                return { status: 'future-pick', clickable: true, reason: 'Picked in another gameweek' };\n            }\n            \n            // Default to available\n            return { status: 'available', clickable: true, reason: 'Available for picking' };\n            \n        } catch (error) {\n            console.error('Error in getTeamStatusSimple:', error);\n            return { status: 'available', clickable: true, reason: 'Available for picking' };\n        }\n    }\n\n    // Get team status\n    async getTeamStatus(teamName, userData, currentGameWeek, userId) {\n        if (!userData || !currentGameWeek || !userId) {\n            return { status: 'normal', clickable: false, reason: 'No user data' };\n        }\n        \n        const gameweekKey = currentGameWeek === 'tiebreak' ? 'gwtiebreak' : `gw${currentGameWeek}`;\n        const currentPick = userData.picks && userData.picks[gameweekKey];\n        \n        // Check if this is the current pick for this gameweek\n        if (currentPick === teamName) {\n            return { status: 'current-pick', clickable: false, reason: 'Current pick for this gameweek' };\n        }\n        \n        // Check if team is picked in another gameweek\n        const existingPicks = Object.values(userData.picks || {});\n        if (existingPicks.includes(teamName)) {\n            // Find which gameweek this team was picked in\n            let pickedGameweek = null;\n            for (const [key, pick] of Object.entries(userData.picks || {})) {\n                if (pick === teamName) {\n                    pickedGameweek = key;\n                    break;\n                }\n            }\n            \n            if (pickedGameweek) {\n                // Use batch deadline checking instead of individual calls\n                const pickedGameweekNum = pickedGameweek === 'gwtiebreak' ? 'tiebreak' : pickedGameweek.replace('gw', '');\n                const userEdition = this.getUserEdition(userData);\n                \n                // Get all unique gameweeks from user's picks for batch processing\n                const userGameweeks = Object.keys(userData.picks || {}).map(key => \n                    key === 'gwtiebreak' ? 'tiebreak' : key.replace('gw', '')\n                );\n                \n                // Use batch deadline checking with fallback\n                let isDeadlinePassed = false;\n                try {\n                    const deadlineResults = await this.batchCheckDeadlines(userGameweeks, userEdition);\n                    isDeadlinePassed = deadlineResults[pickedGameweekNum] || false;\n                } catch (error) {\n                    console.log('Batch deadline check failed, using fallback:', error);\n                    // Fallback to simple logic - assume future pick if we can't determine\n                    return { status: 'future-pick', clickable: true, reason: `Picked in future ${pickedGameweek}` };\n                }\n                \n                if (isDeadlinePassed) {\n                    return { status: 'completed-pick', clickable: false, reason: `Picked in completed ${pickedGameweek}` };\n                } else {\n                    return { status: 'future-pick', clickable: true, reason: `Picked in future ${pickedGameweek}` };\n                }\n            }\n        }\n        \n        // Team is available for picking\n        return { status: 'available', clickable: true, reason: 'Available for picking' };\n    }\n\n    // --- HELPER FUNCTIONS ---\n\n    // Get user edition\n    getUserEdition(userData) {\n        if (!userData) return 1;\n        \n        // Check if user has a specific edition preference\n        if (userData.edition) {\n            return userData.edition;\n        }\n        \n        // Check if user has registered editions\n        if (userData.registeredEditions && userData.registeredEditions.length > 0) {\n            return userData.registeredEditions[0]; // Return first registered edition\n        }\n        \n        // Default to current active edition\n        return this.currentActiveEdition;\n    }\n\n    // Get user registered editions\n    getUserRegisteredEditions(userData) {\n        if (!userData) return [];\n        \n        if (userData.registeredEditions && Array.isArray(userData.registeredEditions)) {\n            return userData.registeredEditions;\n        }\n        \n        return [];\n    }\n\n    // Get team badge\n    getTeamBadge(teamName) {\n        // This function should return the team badge image URL\n        // For now, return null - this will be handled by the calling code\n        return null;\n    }\n\n    // Get active gameweek\n    getActiveGameweek() {\n        return this.currentActiveGameweek;\n    }\n\n    // Set active gameweek\n    setActiveGameweek(gameweek) {\n        this.currentActiveGameweek = gameweek;\n    }\n\n    // Set active edition\n    setActiveEdition(edition) {\n        this.currentActiveEdition = edition;\n    }\n\n    // --- CLEANUP ---\n\n    // Cleanup method\n    cleanup() {\n        if (this.deadlineCheckerInterval) {\n            clearInterval(this.deadlineCheckerInterval);\n            this.deadlineCheckerInterval = null;\n        }\n        console.log('🧹 Game Logic Manager cleanup completed');\n    }\n}\n\n// Export the GameLogicManager class\nexport default GameLogicManager;\n","// Mobile Navigation Module\n// Handles all mobile-specific functionality including tabs, navigation, fixtures, and scores\n\nclass MobileNavigationManager {\n    constructor(db) {\n        this.db = db;\n        this.mobileNavigationInitialized = false;\n    }\n\n    // Initialize mobile navigation management\n    initializeMobileNavigationManagement() {\n        if (this.mobileNavigationInitialized) {\n            console.log('Mobile navigation management already initialized, skipping...');\n            return;\n        }\n        \n        console.log('Initializing mobile navigation management...');\n        this.mobileNavigationInitialized = true;\n        \n        this.setupEventListeners();\n    }\n\n    // Set up event listeners for mobile navigation\n    setupEventListeners() {\n        // Event listeners will be set up when specific functions are called\n        console.log('Mobile navigation event listeners ready');\n    }\n\n    // Mobile Tabbed Interface Functions\n    initializeMobileTabs() {\n        console.log('Initializing mobile tabs...');\n        const tabButtons = document.querySelectorAll('.mobile-tabs .tab-btn');\n        const tabPanes = document.querySelectorAll('.mobile-tab-content .tab-pane');\n        \n        console.log(`Found ${tabButtons.length} mobile tab buttons and ${tabPanes.length} mobile tab panes`);\n        \n        tabButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                const targetTab = button.getAttribute('data-tab');\n                console.log(`Mobile tab clicked: ${targetTab}`);\n                \n                // Remove active class from all tabs and panes\n                tabButtons.forEach(btn => btn.classList.remove('active'));\n                tabPanes.forEach(pane => pane.classList.remove('active'));\n                \n                // Add active class to clicked tab and corresponding pane\n                button.classList.add('active');\n                const targetPane = document.getElementById(`${targetTab}-tab`);\n                if (targetPane) {\n                    targetPane.classList.add('active');\n                }\n                \n                // Load content based on tab\n                if (targetTab === 'as-it-stands') {\n                    console.log('Mobile As It Stands tab clicked');\n                    // Run diagnostics first\n                    if (window.diagnoseAsItStandsElements) {\n                        window.diagnoseAsItStandsElements();\n                    }\n                    // Only initialize if not already done\n                    if (!window.asItStandsInitialized_mobile) {\n                        if (window.initializeAsItStandsTab) {\n                            window.initializeAsItStandsTab('mobile');\n                        }\n                    }\n                } else if (targetTab === 'scores') {\n                    if (window.loadPlayerScores) {\n                        window.loadPlayerScores().then(async fixtures => {\n                            console.log('loadPlayerScores returned:', fixtures);\n                            // Get current gameweek for display\n                            const currentGameweek = window.getActiveGameweek ? window.getActiveGameweek() : '1';\n                            if (window.renderPlayerScores) {\n                                await window.renderPlayerScores(fixtures, currentGameweek);\n                            }\n                            this.renderMobilePlayerScores(fixtures, currentGameweek);\n                        }).catch(error => {\n                            console.error('Error loading player scores:', error);\n                            if (window.showNoScoresMessage) {\n                                window.showNoScoresMessage();\n                            }\n                        });\n                    }\n                } else if (targetTab === 'vidiprinter') {\n                    if (window.initializePlayerVidiprinter) {\n                        window.initializePlayerVidiprinter();\n                    }\n                }\n            });\n        });\n    }\n\n    // Mobile fixtures loading function\n    loadMobileFixturesForDeadline(gameweek, userData = null, userId = null) {\n        const fixturesDisplayContainer = document.querySelector('#mobile-fixtures-display-container');\n        const deadlineDate = document.querySelector('#mobile-deadline-date');\n        const deadlineStatus = document.querySelector('#mobile-deadline-status');\n        const fixturesDisplay = document.querySelector('#mobile-fixtures-display');\n\n        // Handle tiebreak gameweek\n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        \n        // Determine user's edition from registration data\n        const userEdition = this.getUserEdition(userData);\n        const editionGameweekKey = `edition${userEdition}_${gameweekKey}`;\n\n        // Load edition-specific fixtures only\n        this.db.collection('fixtures').doc(editionGameweekKey).get().then(doc => {\n            if (doc.exists) {\n                const fixtures = doc.data().fixtures;\n                if (fixtures && fixtures.length > 0) {\n                    // Find the earliest fixture (deadline)\n                    const earliestFixture = fixtures.reduce((earliest, fixture) => {\n                        const fixtureDate = new Date(fixture.date);\n                        const earliestDate = new Date(earliest.date);\n                        return fixtureDate < earliestDate ? fixture : earliest;\n                    });\n\n                    // Display deadline\n                    const deadlineDateObj = new Date(earliestFixture.date);\n                    const formattedDeadline = this.formatDeadlineDate(deadlineDateObj);\n                    \n                    if (deadlineDate) deadlineDate.textContent = formattedDeadline;\n                    \n                    // Check if deadline has passed\n                    const now = new Date();\n                    const timeUntilDeadline = deadlineDateObj - now;\n                    \n                    // Check if all fixtures in this gameweek are completed\n                    const allFixturesCompleted = fixtures.every(fixture => \n                        fixture.status && (fixture.status === 'FT' || fixture.status === 'AET' || fixture.status === 'PEN')\n                    );\n                    \n                    // Check if all fixtures have finished (have a status) but may not be fully completed\n                    const allFixturesFinished = fixtures.every(fixture => \n                        fixture.status && fixture.status !== 'NS' && fixture.status !== '1H' && fixture.status !== 'HT' && fixture.status !== '2H'\n                    );\n                    \n                    if (allFixturesCompleted) {\n                        if (deadlineStatus) {\n                            deadlineStatus.textContent = 'Complete (Results confirmed and cards issued)';\n                            deadlineStatus.className = 'complete';\n                            deadlineStatus.style.color = '#0c5460';\n                        }\n                    } else if (allFixturesFinished && timeUntilDeadline <= 0) {\n                        if (deadlineStatus) {\n                            deadlineStatus.textContent = 'Locked (Matches are complete)';\n                            deadlineStatus.className = 'locked';\n                            deadlineStatus.style.color = '#721c24';\n                        }\n                    } else if (timeUntilDeadline <= 0) {\n                        if (deadlineStatus) {\n                            deadlineStatus.textContent = 'Locked (Matches are underway)';\n                            deadlineStatus.className = 'locked';\n                            deadlineStatus.style.color = '#721c24';\n                        }\n                    } else {\n                        if (deadlineStatus) {\n                            deadlineStatus.textContent = 'Active (Pick updates allowed)';\n                            deadlineStatus.className = 'active';\n                            deadlineStatus.style.color = '#28a745';\n                        }\n                    }\n\n                    // Update pick status header\n                    this.updateMobilePickStatusHeader(gameweek, userData, userId).catch(error => {\n                        console.error('Error updating mobile pick status header:', error);\n                    });\n\n                    // Display fixtures\n                    this.renderMobileFixturesDisplay(fixtures, userData, gameweek, userId);\n                    if (fixturesDisplayContainer) fixturesDisplayContainer.style.display = 'block';\n                }\n            } else {\n                if (fixturesDisplayContainer) fixturesDisplayContainer.style.display = 'none';\n            }\n        });\n    }\n\n    // Mobile fixtures display rendering function\n    async renderMobileFixturesDisplay(fixtures, userData = null, currentGameWeek = null, userId = null) {\n        const fixturesDisplay = document.querySelector('#mobile-fixtures-display');\n        \n        if (!fixtures || fixtures.length === 0) {\n            fixturesDisplay.innerHTML = '<p>No fixtures available for this gameweek.</p>';\n            return;\n        }\n\n        // Sort fixtures by date\n        const sortedFixtures = fixtures.sort((a, b) => new Date(a.date) - new Date(b.date));\n        \n        let fixturesHTML = '';\n        \n        for (const fixture of sortedFixtures) {\n            const fixtureDate = new Date(fixture.date);\n\n            const homeBadge = this.getTeamBadge(fixture.homeTeam);\n            const awayBadge = this.getTeamBadge(fixture.awayTeam);\n            \n            const homeBadgeHtml = homeBadge ? `<img src=\"${homeBadge}\" alt=\"${fixture.homeTeam}\">` : '';\n            const awayBadgeHtml = awayBadge ? `<img src=\"${awayBadge}\" alt=\"${fixture.awayTeam}\">` : '';\n\n            // Check if user has already picked either team for this gameweek\n            const gameweekKey = currentGameWeek ? (currentGameWeek === 'tiebreak' ? 'gwtiebreak' : `gw${currentGameWeek}`) : null;\n            const currentPick = userData && gameweekKey ? userData.picks && userData.picks[gameweekKey] : null;\n            \n            // Determine if teams are clickable (not already picked and deadline hasn't passed)\n            const isClickable = userData && currentGameWeek && userId;\n            \n            // Check if teams are already picked by user in other gameweeks\n            const existingPicks = userData ? Object.values(userData.picks || {}) : [];\n            \n            // Check if deadline has passed for this gameweek\n            let deadlinePassed = false;\n            if (currentGameWeek && userData) {\n                const userEdition = this.getUserEdition(userData);\n                try {\n                    deadlinePassed = await this.checkDeadlineForGameweek(currentGameWeek, userEdition);\n                } catch (error) {\n                    console.error('Error checking deadline for mobile fixtures:', error);\n                    deadlinePassed = false;\n                }\n            }\n            \n            // Create team pick buttons with improved status classes\n            let homeTeamClasses = 'team-pick-button';\n            let awayTeamClasses = 'team-pick-button';\n            \n            // Use simple status checking to avoid async calls during rendering\n            // Inline logic to avoid function call issues\n            let homeTeamStatus, awayTeamStatus;\n            \n            // Simple inline logic for home team\n            if (currentPick === fixture.homeTeam) {\n                homeTeamStatus = { status: 'current-pick', clickable: false, reason: 'Current pick for this gameweek' };\n            } else if (existingPicks.includes(fixture.homeTeam)) {\n                homeTeamStatus = { status: 'future-pick', clickable: !deadlinePassed, reason: deadlinePassed ? 'Deadline passed' : 'Picked in another gameweek' };\n            } else {\n                homeTeamStatus = { status: 'available', clickable: !deadlinePassed, reason: deadlinePassed ? 'Deadline passed' : 'Available for picking' };\n            }\n            \n            // Simple inline logic for away team\n            if (currentPick === fixture.awayTeam) {\n                awayTeamStatus = { status: 'current-pick', clickable: false, reason: 'Current pick for this gameweek' };\n            } else if (existingPicks.includes(fixture.awayTeam)) {\n                awayTeamStatus = { status: 'future-pick', clickable: !deadlinePassed, reason: deadlinePassed ? 'Deadline passed' : 'Picked in another gameweek' };\n            } else {\n                awayTeamStatus = { status: 'available', clickable: !deadlinePassed, reason: deadlinePassed ? 'Deadline passed' : 'Available for picking' };\n            }\n            \n            // Apply status classes to team buttons\n            homeTeamClasses += ` ${homeTeamStatus.status}`;\n            awayTeamClasses += ` ${awayTeamStatus.status}`;\n            \n            // Add deadline-passed class if deadline has passed\n            if (deadlinePassed) {\n                homeTeamClasses += ' deadline-passed';\n                awayTeamClasses += ' deadline-passed';\n            }\n            \n            // Determine if teams are clickable based on their status and create tooltips\n            let homeTeamClickable = homeTeamStatus.clickable;\n            let awayTeamClickable = awayTeamStatus.clickable;\n            let homeTeamTooltip = homeTeamStatus.reason;\n            let awayTeamTooltip = awayTeamStatus.reason;\n            \n            const homeTeamClickAttr = homeTeamClickable ? `onclick=\"selectTeamAsTempPick('${fixture.homeTeam}', ${currentGameWeek}, '${userId}')\"` : '';\n            const awayTeamClickAttr = awayTeamClickable ? `onclick=\"selectTeamAsTempPick('${fixture.awayTeam}', ${currentGameWeek}, '${userId}')\"` : '';\n            const homeTeamTitleAttr = homeTeamTooltip ? `title=\"${homeTeamTooltip}\"` : '';\n            const awayTeamTitleAttr = awayTeamTooltip ? `title=\"${awayTeamTooltip}\"` : '';\n\n            fixturesHTML += `\n                <div class=\"fixture-item\">\n                    <div class=\"fixture-teams\">\n                        <button class=\"${homeTeamClasses}\" ${homeTeamClickAttr} ${homeTeamTitleAttr} ${!homeTeamClickable ? 'disabled' : ''}>\n                            ${homeBadgeHtml}${fixture.homeTeam}\n                            ${currentPick === fixture.homeTeam ? '<span class=\"pick-indicator\">✓</span>' : ''}\n                        </button>\n                        <div class=\"fixture-vs\">vs</div>\n                        <button class=\"${awayTeamClasses}\" ${awayTeamClickAttr} ${awayTeamTitleAttr} ${!awayTeamClickable ? 'disabled' : ''}>\n                            ${awayBadgeHtml}${fixture.awayTeam}\n                            ${currentPick === fixture.awayTeam ? '<span class=\"pick-indicator\">✓</span>' : ''}\n                        </button>\n                    </div>\n                    <div class=\"fixture-datetime\">\n                        <div class=\"fixture-time\">${fixtureDate.toLocaleTimeString('en-GB', { timeZone: 'Europe/London', hour: '2-digit', minute: '2-digit' })}</div>\n                        <div class=\"fixture-date\">${fixtureDate.toLocaleDateString('en-GB', { timeZone: 'Europe/London', weekday: 'short', month: 'short', day: 'numeric' })}</div>\n                    </div>\n                    <div class=\"fixture-status\">\n                        <span class=\"status-badge ${fixture.status || 'NS'}\">${this.getStatusDisplay(fixture.status)}</span>\n                    </div>\n                </div>\n            `;\n        }\n\n        fixturesDisplay.innerHTML = fixturesHTML;\n    }\n\n    // Function to update the mobile pick status header\n    async updateMobilePickStatusHeader(gameweek, userData, userId) {\n        const pickStatusDisplay = document.querySelector('#mobile-pick-status-display');\n        const pickStatusHeader = document.querySelector('.mobile-deadline-section .pick-status-header');\n        \n        if (!pickStatusDisplay || !pickStatusHeader) {\n            return;\n        }\n        \n        // Check if deadline has passed for this gameweek\n        const isDeadlinePassed = await this.checkDeadlineForGameweek(gameweek);\n        \n        if (isDeadlinePassed) {\n            // Deadline has passed - hide pick information\n            pickStatusDisplay.style.display = 'none';\n            pickStatusHeader.style.display = 'none';\n            return;\n        }\n        \n        // Show pick status header\n        pickStatusHeader.style.display = 'block';\n        pickStatusDisplay.style.display = 'block';\n        \n        const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n        const currentPick = userData && userData.picks && userData.picks[gameweekKey];\n        \n        if (currentPick) {\n            // User has made a pick for this gameweek\n            pickStatusDisplay.textContent = `Saved Pick: ${currentPick}`;\n            pickStatusDisplay.className = 'pick-status-text saved';\n            pickStatusHeader.style.backgroundColor = 'rgba(40, 167, 69, 0.1)';\n            pickStatusHeader.style.borderColor = 'rgba(40, 167, 69, 0.3)';\n        } else {\n            // No pick made yet - show prompt\n            pickStatusDisplay.textContent = '⚠️ Make your pick before the deadline!';\n            pickStatusDisplay.className = 'pick-status-text prompt';\n            pickStatusHeader.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';\n            pickStatusHeader.style.borderColor = 'rgba(220, 53, 69, 0.3)';\n        }\n    }\n\n    // Mobile gameweek navigation functions\n    initializeMobileGameweekNavigation(currentGameWeek, userData, userId) {\n        const currentGameweekDisplay = document.querySelector('#mobile-current-gameweek-display');\n        const prevButton = document.querySelector('#mobile-prev-gameweek');\n        const nextButton = document.querySelector('#mobile-next-gameweek');\n        const gameweekTabs = document.querySelectorAll('.mobile-gameweek-tabs .gameweek-tab');\n        const tiebreakTab = document.querySelector('.mobile-gameweek-tabs .tiebreak-tab');\n        \n        // Check if tiebreak is enabled in admin settings\n        this.db.collection('settings').doc('currentCompetition').get().then(settingsDoc => {\n            if (settingsDoc.exists) {\n                const settings = settingsDoc.data();\n                const tiebreakEnabled = settings.tiebreak_enabled || false;\n                \n                // Show/hide tiebreak tab based on admin setting\n                if (tiebreakTab) {\n                    if (tiebreakEnabled) {\n                        tiebreakTab.style.display = 'inline-block';\n                    } else {\n                        tiebreakTab.style.display = 'none';\n                        // If tiebreak is disabled and current gameweek is tiebreak, switch to GW10\n                        if (currentGameWeek === 'tiebreak') {\n                            this.navigateToMobileGameweek('10', userData, userId);\n                            return;\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Set current gameweek display\n        const displayText = currentGameWeek === 'tiebreak' ? 'Tiebreak Round' : `Game Week ${currentGameWeek}`;\n        if (currentGameweekDisplay) currentGameweekDisplay.textContent = displayText;\n        \n        // Update navigation buttons\n        this.updateMobileNavigationButtons(currentGameWeek, prevButton, nextButton);\n        \n        // Update active tab\n        this.updateMobileActiveTab(currentGameWeek, gameweekTabs);\n        \n        // Add event listeners\n        if (prevButton) {\n            prevButton.addEventListener('click', () => this.navigateMobileGameweek(currentGameWeek, -1, userData, userId));\n        }\n        if (nextButton) {\n            nextButton.addEventListener('click', () => this.navigateMobileGameweek(currentGameWeek, 1, userData, userId));\n        }\n        \n        // Add tab click listeners\n        gameweekTabs.forEach(tab => {\n            tab.addEventListener('click', () => {\n                const gameweek = tab.dataset.gameweek;\n                this.navigateToMobileGameweek(gameweek, userData, userId);\n            });\n        });\n        \n        // Update tab states based on deadlines\n        this.updateMobileTabStates(gameweekTabs);\n    }\n\n    updateMobileNavigationButtons(currentGameWeek, prevButton, nextButton) {\n        if (!prevButton || !nextButton) return;\n        \n        const gameweekNum = currentGameWeek === 'tiebreak' ? 11 : parseInt(currentGameWeek);\n        \n        // Enable/disable previous button\n        prevButton.disabled = gameweekNum <= 1;\n        \n        // Enable/disable next button - allow navigation up to tiebreak (11)\n        nextButton.disabled = gameweekNum >= 11;\n    }\n\n    updateMobileActiveTab(currentGameWeek, gameweekTabs) {\n        gameweekTabs.forEach(tab => {\n            tab.classList.remove('active');\n            if (tab.dataset.gameweek === currentGameWeek) {\n                tab.classList.add('active');\n            }\n        });\n    }\n\n    updateMobileTabStates(gameweekTabs) {\n        gameweekTabs.forEach(tab => {\n            const gameweek = tab.dataset.gameweek;\n            this.checkDeadlineForGameweek(gameweek).then(isDeadlinePassed => {\n                if (isDeadlinePassed) {\n                    tab.classList.add('locked');\n                } else {\n                    tab.classList.remove('locked');\n                }\n            });\n        });\n    }\n\n    navigateMobileGameweek(currentGameWeek, direction, userData, userId) {\n        const currentNum = currentGameWeek === 'tiebreak' ? 11 : parseInt(currentGameWeek);\n        const newNum = currentNum + direction;\n        \n        if (newNum < 1 || newNum > 11) return;\n        \n        const newGameweek = newNum === 11 ? 'tiebreak' : newNum.toString();\n        this.navigateToMobileGameweek(newGameweek, userData, userId);\n    }\n\n    async navigateToMobileGameweek(gameweek, userData, userId) {\n        try {\n            // Fetch fresh user data from database to ensure we have the latest picks\n            const freshUserDoc = await this.db.collection('users').doc(userId).get();\n            const freshUserData = freshUserDoc.exists ? freshUserDoc.data() : userData;\n            \n            // Update current gameweek display\n            const currentGameweekDisplay = document.querySelector('#mobile-current-gameweek-display');\n            const displayText = gameweek === 'tiebreak' ? 'Tiebreak Round' : `Game Week ${gameweek}`;\n            if (currentGameweekDisplay) currentGameweekDisplay.textContent = displayText;\n            \n            // Update navigation buttons\n            const prevButton = document.querySelector('#mobile-prev-gameweek');\n            const nextButton = document.querySelector('#mobile-next-gameweek');\n            this.updateMobileNavigationButtons(gameweek, prevButton, nextButton);\n            \n            // Update event listeners with the new gameweek\n            if (prevButton) {\n                // Remove existing event listeners\n                prevButton.replaceWith(prevButton.cloneNode(true));\n                const newPrevButton = document.querySelector('#mobile-prev-gameweek');\n                newPrevButton.addEventListener('click', () => this.navigateMobileGameweek(gameweek, -1, freshUserData, userId));\n            }\n            \n            if (nextButton) {\n                // Remove existing event listeners\n                nextButton.replaceWith(nextButton.cloneNode(true));\n                const newNextButton = document.querySelector('#mobile-next-gameweek');\n                newNextButton.addEventListener('click', () => this.navigateMobileGameweek(gameweek, 1, freshUserData, userId));\n            }\n            \n            // Update active tab\n            const gameweekTabs = document.querySelectorAll('.mobile-gameweek-tabs .gameweek-tab');\n            this.updateMobileActiveTab(gameweek, gameweekTabs);\n            \n            // Load fixtures for the selected gameweek with fresh data\n            this.loadMobileFixturesForDeadline(gameweek, freshUserData, userId);\n            \n            console.log(`Navigated to mobile gameweek ${gameweek} with fresh user data`);\n        } catch (error) {\n            console.error('Error navigating to mobile gameweek:', error);\n        }\n    }\n\n    // Mobile player scores rendering function\n    renderMobilePlayerScores(fixtures, gameweek) {\n        console.log('renderMobilePlayerScores called with:', { fixtures, gameweek });\n        \n        const mobileScoresDisplay = document.querySelector('#mobile-scores-display');\n        if (!mobileScoresDisplay) {\n            console.error('Mobile scores display element not found');\n            return;\n        }\n        \n        if (!fixtures || fixtures.length === 0) {\n            console.log('No fixtures to render for mobile');\n            return;\n        }\n        \n        // Sort fixtures by date\n        const sortedFixtures = fixtures.sort((a, b) => new Date(a.date) - new Date(b.date));\n        \n        let scoresHTML = `\n            <div class=\"mobile-scores-header\">\n                <h4>Game Week ${gameweek === 'tiebreak' ? 'Tiebreak' : gameweek} Results</h4>\n            </div>\n            <div class=\"mobile-scores-container\">\n        `;\n        \n        for (const fixture of sortedFixtures) {\n            const fixtureDate = new Date(fixture.date);\n            const homeBadge = this.getTeamBadge(fixture.homeTeam);\n            const awayBadge = this.getTeamBadge(fixture.awayTeam);\n            \n            const homeBadgeHtml = homeBadge ? `<img src=\"${homeBadge}\" alt=\"${fixture.homeTeam}\" class=\"team-badge\">` : '';\n            const awayBadgeHtml = awayBadge ? `<img src=\"${awayBadge}\" alt=\"${fixture.awayTeam}\" class=\"team-badge\">` : '';\n            \n            // Determine score display\n            let scoreDisplay = '';\n            let statusClass = '';\n            \n            if (fixture.completed || fixture.status === 'FT' || fixture.status === 'AET' || fixture.status === 'PEN') {\n                // Full-time result with half-time scores if available\n                const hasHalfTimeScores = fixture.homeScoreHT !== null && fixture.awayScoreHT !== null;\n                scoreDisplay = `\n                    <div class=\"mobile-score-result\">\n                        <span class=\"mobile-score\">${fixture.homeScore || 0}</span>\n                        <span class=\"mobile-score-separator\">-</span>\n                        <span class=\"mobile-score\">${fixture.awayScore || 0}</span>\n                    </div>\n                    ${hasHalfTimeScores ? `\n                        <div class=\"mobile-half-time-scores\">\n                            <small>Half Time: ${fixture.homeScoreHT} - ${fixture.awayScoreHT}</small>\n                        </div>\n                    ` : ''}\n                `;\n                statusClass = 'completed';\n            } else if (fixture.status === 'HT' && fixture.homeScoreHT !== null && fixture.awayScoreHT !== null) {\n                // Half-time result\n                scoreDisplay = `\n                    <div class=\"mobile-score-result\">\n                        <span class=\"mobile-score\">${fixture.homeScoreHT}</span>\n                        <span class=\"mobile-score-separator\">-</span>\n                        <span class=\"mobile-score\">${fixture.awayScoreHT}</span>\n                        <span class=\"mobile-score-status\">HT</span>\n                    </div>\n                `;\n                statusClass = 'half-time';\n            } else if (fixture.status === '1H' || fixture.status === '2H' || fixture.status === 'LIVE') {\n                // Live match with current scores and half-time if available\n                const hasHalfTimeScores = fixture.homeScoreHT !== null && fixture.awayScoreHT !== null;\n                scoreDisplay = `\n                    <div class=\"mobile-score-result\">\n                        <span class=\"mobile-score\">${fixture.homeScore || 0}</span>\n                        <span class=\"mobile-score-separator\">-</span>\n                        <span class=\"mobile-score\">${fixture.awayScore || 0}</span>\n                        <span class=\"mobile-score-status live\">LIVE</span>\n                    </div>\n                    ${hasHalfTimeScores ? `\n                        <div class=\"mobile-half-time-scores\">\n                            <small>Half Time: ${fixture.homeScoreHT} - ${fixture.awayScoreHT}</small>\n                        </div>\n                    ` : ''}\n                `;\n                statusClass = 'live';\n            } else {\n                // Not started\n                scoreDisplay = `\n                    <div class=\"mobile-score-result\">\n                        <span class=\"mobile-score-placeholder\">vs</span>\n                    </div>\n                `;\n                statusClass = 'not-started';\n            }\n            \n            scoresHTML += `\n                <div class=\"mobile-score-fixture ${statusClass}\">\n                    <div class=\"mobile-fixture-teams\">\n                        <div class=\"mobile-team home-team\">\n                            ${homeBadgeHtml}\n                            <span class=\"mobile-team-name\">${fixture.homeTeam}</span>\n                        </div>\n                        ${scoreDisplay}\n                        <div class=\"mobile-team away-team\">\n                            <span class=\"mobile-team-name\">${fixture.awayTeam}</span>\n                            ${awayBadgeHtml}\n                        </div>\n                    </div>\n                    <div class=\"mobile-fixture-info\">\n                        <div class=\"mobile-fixture-time\">${fixtureDate.toLocaleTimeString('en-GB', { timeZone: 'Europe/London', hour: '2-digit', minute: '2-digit' })}</div>\n                        <div class=\"mobile-fixture-date\">${fixtureDate.toLocaleDateString('en-GB', { timeZone: 'Europe/London', weekday: 'short', month: 'short', day: 'numeric' })}</div>\n                        <div class=\"mobile-fixture-status\">${this.getStatusDisplay(fixture.status)}</div>\n                    </div>\n                </div>\n            `;\n        }\n        \n        scoresHTML += '</div>';\n        mobileScoresDisplay.innerHTML = scoresHTML;\n    }\n\n    // Mobile testimonial toggle function\n    toggleTestimonials() {\n        const button = document.querySelector('.testimonial-toggle');\n        const content = document.getElementById('mobile-testimonials');\n        \n        if (button && content) {\n            const isActive = content.classList.contains('active');\n            \n            if (isActive) {\n                content.classList.remove('active');\n                button.classList.remove('active');\n            } else {\n                content.classList.add('active');\n                button.classList.add('active');\n            }\n        }\n    }\n\n    // Switch mobile tab to fixtures (used by other modules)\n    switchToFixturesTab() {\n        // Switch mobile tab to fixtures\n        const mobileTabButtons = document.querySelectorAll('.mobile-tabs .tab-btn');\n        const mobileTabPanes = document.querySelectorAll('.mobile-tab-content .tab-pane');\n        \n        mobileTabButtons.forEach(btn => btn.classList.remove('active'));\n        mobileTabPanes.forEach(pane => pane.classList.remove('active'));\n        \n        const mobileFixturesTab = document.querySelector('.mobile-tabs .tab-btn[data-tab=\"fixtures\"]');\n        const mobileFixturesPane = document.getElementById('fixtures-tab');\n        \n        if (mobileFixturesTab) mobileFixturesTab.classList.add('active');\n        if (mobileFixturesPane) mobileFixturesPane.classList.add('active');\n    }\n\n    // Helper functions\n    getUserEdition(userData) {\n        if (!userData || !userData.registrations) return 1;\n        \n        // Check if user has registered for current edition\n        if (userData.registrations[`edition${this.currentActiveEdition}`]) {\n            return this.currentActiveEdition;\n        }\n        \n        // Check for any registered edition\n        for (let i = 1; i <= 5; i++) {\n            if (userData.registrations[`edition${i}`]) {\n                return i;\n            }\n        }\n        \n        return 1; // Default to edition 1\n    }\n\n    async checkDeadlineForGameweek(gameweek, edition = null) {\n        try {\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionKey = edition ? `edition${edition}` : 'edition1';\n            const docKey = `${editionKey}_${gameweekKey}`;\n            \n            const doc = await this.db.collection('fixtures').doc(docKey).get();\n            if (!doc.exists) return false;\n            \n            const fixtures = doc.data().fixtures;\n            if (!fixtures || fixtures.length === 0) return false;\n            \n            // Find the earliest fixture (deadline)\n            const earliestFixture = fixtures.reduce((earliest, fixture) => {\n                const fixtureDate = new Date(fixture.date);\n                const earliestDate = new Date(earliest.date);\n                return fixtureDate < earliestDate ? fixture : earliest;\n            });\n            \n            const deadlineDate = new Date(earliestFixture.date);\n            const now = new Date();\n            \n            return now >= deadlineDate;\n        } catch (error) {\n            console.error('Error checking deadline for gameweek:', error);\n            return false;\n        }\n    }\n\n    formatDeadlineDate(date) {\n        const day = date.getDate();\n        const month = date.toLocaleDateString('en-GB', { month: 'long' });\n        const year = date.getFullYear();\n        const time = date.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });\n        \n        const ordinalSuffix = this.getOrdinalSuffix(day);\n        \n        return `${day}${ordinalSuffix} ${month} ${year} at ${time}`;\n    }\n\n    getOrdinalSuffix(day) {\n        if (day > 3 && day < 21) return 'th';\n        switch (day % 10) {\n            case 1: return 'st';\n            case 2: return 'nd';\n            case 3: return 'rd';\n            default: return 'th';\n        }\n    }\n\n    getTeamBadge(teamName) {\n        // This function should be implemented based on your team badge logic\n        // For now, returning null as placeholder\n        return null;\n    }\n\n    getStatusDisplay(status) {\n        const statusMap = {\n            'NS': 'Not Started',\n            '1H': 'First Half',\n            'HT': 'Half Time',\n            '2H': 'Second Half',\n            'FT': 'Full Time',\n            'AET': 'Extra Time',\n            'PEN': 'Penalties',\n            'LIVE': 'Live'\n        };\n        return statusMap[status] || status || 'Not Started';\n    }\n\n    // Cleanup method\n    cleanup() {\n        this.mobileNavigationInitialized = false;\n        console.log('Mobile Navigation Manager cleanup completed');\n    }\n}\n\n// Export the MobileNavigationManager class\nexport default MobileNavigationManager;\n","// User Management Module\n// Handles all user-related admin operations including CRUD, archiving, and status management\n\nexport class UserManagement {\n    constructor(db) {\n        this.db = db;\n        this.allPlayers = [];\n        this.currentPlayerManagementType = 'total';\n    }\n\n    // Show player management interface\n    showPlayerManagement(type) {\n        console.log(`🔧 Showing player management for type: ${type}`);\n        \n        const playerManagementModal = document.querySelector('#player-management-modal');\n        const playerEditModal = document.querySelector('#player-edit-modal');\n        \n        if (playerManagementModal) {\n            playerManagementModal.style.display = 'block';\n        }\n        \n        if (playerEditModal) {\n            playerEditModal.style.display = 'none';\n        }\n        \n        this.currentPlayerManagementType = type;\n        this.loadPlayersForManagement();\n    }\n\n    // Close player management interface\n    closePlayerManagement() {\n        const playerManagementModal = document.querySelector('#player-management-modal');\n        if (playerManagementModal) {\n            playerManagementModal.style.display = 'none';\n        }\n    }\n\n    // Close player edit interface\n    closePlayerEdit() {\n        const playerEditModal = document.querySelector('#player-edit-modal');\n        if (playerEditModal) {\n            playerEditModal.style.display = 'none';\n        }\n    }\n\n    // Check for orphaned accounts (accounts that exist in Firestore but not in Firebase Auth)\n    async checkOrphanedAccounts() {\n        try {\n            console.log('🔍 Checking for orphaned accounts...');\n            \n            // Get all users from Firestore\n            const firestoreUsers = await this.db.collection('users').get();\n            const firestoreUserIds = new Set();\n            \n            firestoreUsers.forEach(doc => {\n                firestoreUserIds.add(doc.id);\n            });\n            \n            // Get all users from Firebase Auth (this would need to be implemented via a Cloud Function)\n            // For now, we'll just show a message\n            alert('Orphaned accounts check requires server-side implementation. This feature will be available in a future update.');\n            \n        } catch (error) {\n            console.error('❌ Error checking orphaned accounts:', error);\n            alert('Error checking orphaned accounts: ' + error.message);\n        }\n    }\n\n    // Show Firebase Auth deletion instructions\n    showFirebaseAuthDeletionInstructions() {\n        const instructions = `\nFirebase Auth Account Deletion Instructions:\n\n1. Go to Firebase Console > Authentication > Users\n2. Find the user account you want to delete\n3. Click the three dots menu (⋮) next to the user\n4. Select \"Delete user\"\n5. Confirm the deletion\n\nNote: This will permanently delete the user's authentication account.\nThe user's data in Firestore will remain unless manually deleted.\n\n⚠️ WARNING: This action cannot be undone!\n        `;\n        \n        alert(instructions);\n    }\n\n    // Load players for management\n    async loadPlayersForManagement() {\n        try {\n            console.log('🔧 Loading players for management...');\n            \n            // Get all users and filter in memory to avoid composite index requirements\n            const allUsersQuery = await this.db.collection('users').get();\n            this.allPlayers = [];\n            \n            // Get current edition for filtering\n            const currentEdition = this.getCurrentActiveEdition();\n            \n            allUsersQuery.forEach(doc => {\n                const playerData = doc.data();\n                \n                let includePlayer = false;\n                \n                switch (this.currentPlayerManagementType) {\n                    case 'total':\n                        includePlayer = true;\n                        break;\n                    case 'active':\n                        // Check if status is missing, 'active', or 'Active' (case-insensitive)\n                        const status = playerData.status;\n                        includePlayer = !status || status.toLowerCase() === 'active';\n                        break;\n                    case 'archived':\n                        includePlayer = playerData.status === 'archived';\n                        break;\n                    case 'current':\n                        // Check if user is registered for current edition using the registrations object\n                        includePlayer = playerData.registrations && playerData.registrations[`edition${currentEdition}`];\n                        break;\n                    case 'test':\n                        // Check for Test Weeks registration\n                        includePlayer = playerData.registrations && playerData.registrations['editiontest'];\n                        break;\n                    default:\n                        includePlayer = true;\n                }\n                \n                if (includePlayer) {\n                    this.allPlayers.push({\n                        id: doc.id,\n                        ...playerData\n                    });\n                }\n            });\n            \n            // Sort by display name\n            this.allPlayers.sort((a, b) => (a.displayName || '').localeCompare(b.displayName || ''));\n            \n            console.log(`✅ Loaded ${this.allPlayers.length} players for ${this.currentPlayerManagementType} management`);\n            this.displayPlayers(this.allPlayers);\n            \n        } catch (error) {\n            console.error('❌ Error loading players for management:', error);\n            alert('Error loading players: ' + error.message);\n        }\n    }\n    \n    // Get current active edition\n    getCurrentActiveEdition() {\n        // Get the current active edition from the edition selector\n        const editionSelector = document.querySelector('#edition-selector');\n        if (editionSelector) {\n            return editionSelector.value;\n        }\n        \n        // Fallback to checking window.currentActiveEdition\n        if (window.currentActiveEdition) {\n            return window.currentActiveEdition;\n        }\n        \n        // Default fallback\n        return 1;\n    }\n\n    // Display players in the management interface\n    displayPlayers(players) {\n        const playerListContainer = document.querySelector('#player-management-list');\n        if (!playerListContainer) {\n            console.error('Player list container not found');\n            return;\n        }\n        \n        if (!players || players.length === 0) {\n            playerListContainer.innerHTML = '<p>No players found</p>';\n            return;\n        }\n        \n        let playerListHtml = '';\n        \n        players.forEach(player => {\n            // Normalize status for consistent display\n            const normalizedStatus = player.status ? player.status.toLowerCase() : 'active';\n            const statusClass = normalizedStatus === 'active' ? 'active' : 'archived';\n            const isTestWeeks = player.registrations && player.registrations['editiontest'];\n            \n            // Get current edition registrations\n            const currentEdition = this.getCurrentActiveEdition();\n            const isCurrentEdition = player.registrations && player.registrations[`edition${currentEdition}`];\n            \n            // Determine edition display\n            let editionDisplay = '';\n            if (isTestWeeks) {\n                editionDisplay = 'Test Weeks';\n            } else if (isCurrentEdition) {\n                editionDisplay = `Edition ${currentEdition}`;\n            } else {\n                editionDisplay = 'None';\n            }\n            \n            playerListHtml += `\n                <tr class=\"player-row ${statusClass}\" data-player-id=\"${player.id}\">\n                    <td>${player.displayName || 'Unknown'}</td>\n                    <td>${player.email || 'No email'}</td>\n                    <td><span class=\"status-badge ${statusClass}\">${normalizedStatus === 'active' ? 'Active' : (normalizedStatus === 'archived' ? 'Archived' : 'Unknown')}</span></td>\n                    <td>${player.lives || 2}</td>\n                    <td>${editionDisplay}</td>\n                    <td>\n                        <button class=\"edit-btn\" onclick=\"window.adminManagementManager.userManagement.editPlayer('${player.id}')\">Edit</button>\n                        ${normalizedStatus === 'active' ? \n                            `<button class=\"archive-btn\" onclick=\"window.adminManagementManager.userManagement.archivePlayer('${player.id}')\">Archive</button>` :\n                            `<button class=\"unarchive-btn\" onclick=\"window.adminManagementManager.userManagement.unarchivePlayer('${player.id}')\">Unarchive</button>`\n                        }\n                        <button class=\"delete-btn\" onclick=\"window.adminManagementManager.userManagement.deletePlayer('${player.id}')\">Delete</button>\n                    </td>\n                </tr>\n            `;\n        });\n        playerListContainer.innerHTML = playerListHtml;\n        \n        // Set up event listeners for the new buttons\n        this.setupPlayerActionEventListeners();\n        \n        // Set up search and filter functionality\n        this.setupSearchAndFilter();\n    }\n\n    // Set up event listeners for player actions\n    setupPlayerActionEventListeners() {\n        const playerItems = document.querySelectorAll('.player-item');\n        \n        playerItems.forEach(item => {\n            item.addEventListener('editPlayer', (e) => this.editPlayer(e.detail));\n            item.addEventListener('archivePlayer', (e) => this.archivePlayer(e.detail));\n            item.addEventListener('unarchivePlayer', (e) => this.unarchivePlayer(e.detail));\n            item.addEventListener('deletePlayer', (e) => this.deletePlayer(e.detail));\n        });\n    }\n\n    // Set up search and filter functionality\n    setupSearchAndFilter() {\n        const searchInput = document.querySelector('#player-search');\n        const filterSelect = document.querySelector('#player-filter');\n        \n        if (searchInput) {\n            searchInput.addEventListener('input', () => this.searchPlayers());\n        }\n        \n        if (filterSelect) {\n            filterSelect.addEventListener('change', () => this.filterPlayers());\n        }\n    }\n\n    // Search players\n    searchPlayers() {\n        const searchTerm = document.querySelector('#player-search')?.value?.toLowerCase() || '';\n        const filteredPlayers = this.allPlayers.filter(player => \n            player.displayName?.toLowerCase().includes(searchTerm) ||\n            player.email?.toLowerCase().includes(searchTerm)\n        );\n        \n        this.displayPlayers(filteredPlayers);\n    }\n\n    // Filter players\n    filterPlayers() {\n        const filterValue = document.querySelector('#player-filter')?.value || 'all';\n        let filteredPlayers = this.allPlayers;\n        \n        switch (filterValue) {\n            case 'active':\n                filteredPlayers = this.allPlayers.filter(player => player.status === 'active');\n                break;\n            case 'archived':\n                filteredPlayers = this.allPlayers.filter(player => player.status === 'archived');\n                break;\n            case 'test':\n                filteredPlayers = this.allPlayers.filter(player => player.testWeeks === true);\n                break;\n            default:\n                filteredPlayers = this.allPlayers;\n        }\n        \n        this.displayPlayers(filteredPlayers);\n    }\n\n    // Edit player\n    async editPlayer(playerId) {\n        try {\n            console.log(`🔧 Editing player: ${playerId}`);\n            \n            const playerDoc = await this.db.collection('users').doc(playerId).get();\n            if (!playerDoc.exists) {\n                alert('Player not found');\n                return;\n            }\n            \n            const playerData = playerDoc.data();\n            this.showPlayerEditForm(playerId, playerData);\n            \n        } catch (error) {\n            console.error('❌ Error editing player:', error);\n            alert('Error editing player: ' + error.message);\n        }\n    }\n\n    // Show player edit form\n    showPlayerEditForm(playerId, playerData) {\n        const playerEditModal = document.querySelector('#player-edit-modal');\n        const playerManagementModal = document.querySelector('#player-management-modal');\n        \n        if (playerEditModal) {\n            playerEditModal.style.display = 'block';\n        }\n        \n        if (playerManagementModal) {\n            playerManagementModal.style.display = 'none';\n        }\n        \n        // Populate the existing form fields\n        const firstNameInput = document.querySelector('#edit-first-name');\n        const surnameInput = document.querySelector('#edit-surname');\n        const emailInput = document.querySelector('#edit-email');\n        const livesInput = document.querySelector('#edit-lives');\n        const statusSelect = document.querySelector('#edit-status');\n        const notesTextarea = document.querySelector('#edit-notes');\n        \n        if (firstNameInput) firstNameInput.value = playerData.firstName || '';\n        if (surnameInput) surnameInput.value = playerData.surname || '';\n        if (emailInput) emailInput.value = playerData.email || '';\n        if (livesInput) livesInput.value = playerData.lives || 2;\n        if (statusSelect) statusSelect.value = playerData.status || 'active';\n        if (notesTextarea) notesTextarea.value = playerData.adminNotes || '';\n        \n        // Set up form submission\n        const form = document.querySelector('#player-edit-form');\n        if (form) {\n            // Remove existing event listeners\n            form.removeEventListener('submit', this.savePlayerEdit.bind(this));\n            // Add new event listener\n            form.addEventListener('submit', (e) => this.savePlayerEdit(e, playerId));\n        }\n    }\n\n    // Save player edit\n    async savePlayerEdit(event, playerId) {\n        event.preventDefault();\n        \n        try {\n            const firstName = document.querySelector('#edit-first-name').value;\n            const surname = document.querySelector('#edit-surname').value;\n            const email = document.querySelector('#edit-email').value;\n            const lives = parseInt(document.querySelector('#edit-lives').value);\n            const status = document.querySelector('#edit-status').value;\n            const adminNotes = document.querySelector('#edit-notes').value;\n            \n            const updateData = {\n                firstName,\n                surname,\n                displayName: `${firstName} ${surname}`.trim(),\n                email,\n                lives,\n                status,\n                adminNotes,\n                lastUpdated: new Date()\n            };\n            \n            await this.db.collection('users').doc(playerId).update(updateData);\n            \n            console.log(`✅ Player ${playerId} updated successfully`);\n            alert('Player updated successfully!');\n            \n            this.closePlayerEdit();\n            this.loadPlayersForManagement();\n            \n        } catch (error) {\n            console.error('❌ Error saving player edit:', error);\n            alert('Error saving player: ' + error.message);\n        }\n    }\n\n    // Archive player\n    async archivePlayer(playerId) {\n        if (!confirm('Are you sure you want to archive this player?')) {\n            return;\n        }\n        \n        try {\n            await this.db.collection('users').doc(playerId).update({\n                status: 'archived',\n                archivedAt: new Date(),\n                lastUpdated: new Date()\n            });\n            \n            console.log(`✅ Player ${playerId} archived successfully`);\n            alert('Player archived successfully!');\n            \n            this.loadPlayersForManagement();\n            \n        } catch (error) {\n            console.error('❌ Error archiving player:', error);\n            alert('Error archiving player: ' + error.message);\n        }\n    }\n\n    // Unarchive player\n    async unarchivePlayer(playerId) {\n        if (!confirm('Are you sure you want to unarchive this player?')) {\n            return;\n        }\n        \n        try {\n            await this.db.collection('users').doc(playerId).update({\n                status: 'active',\n                unarchivedAt: new Date(),\n                lastUpdated: new Date()\n            });\n            \n            console.log(`✅ Player ${playerId} unarchived successfully`);\n            alert('Player unarchived successfully!');\n            \n            this.loadPlayersForManagement();\n            \n        } catch (error) {\n            console.error('❌ Error unarchiving player:', error);\n            alert('Error unarchiving player: ' + error.message);\n        }\n    }\n\n    // Add player to test weeks\n    async addToTestWeeks(playerId) {\n        try {\n            await this.db.collection('users').doc(playerId).update({\n                testWeeks: true,\n                lastUpdated: new Date()\n            });\n            \n            console.log(`✅ Player ${playerId} added to test weeks successfully`);\n            alert('Player added to test weeks successfully!');\n            \n            this.loadPlayersForManagement();\n            \n        } catch (error) {\n            console.error('❌ Error adding player to test weeks:', error);\n            alert('Error adding player to test weeks: ' + error.message);\n        }\n    }\n\n    // Delete player\n    async deletePlayer(playerId) {\n        if (!confirm('Are you sure you want to delete this player? This action cannot be undone.')) {\n            return;\n        }\n        \n        try {\n            await this.db.collection('users').doc(playerId).delete();\n            \n            console.log(`✅ Player ${playerId} deleted successfully`);\n            alert('Player deleted successfully!');\n            \n            this.loadPlayersForManagement();\n            \n        } catch (error) {\n            console.error('❌ Error deleting player:', error);\n            alert('Error deleting player: ' + error.message);\n        }\n    }\n\n    // Reset all player lives\n    async resetAllPlayerLives() {\n        if (!confirm('Are you sure you want to reset all player lives to 2? This will affect all active players.')) {\n            return;\n        }\n        \n        try {\n            const batch = this.db.batch();\n            const usersSnapshot = await this.db.collection('users').where('status', '==', 'active').get();\n            \n            usersSnapshot.forEach(doc => {\n                batch.update(doc.ref, {\n                    lives: 2,\n                    lastUpdated: new Date()\n                });\n            });\n            \n            await batch.commit();\n            \n            console.log(`✅ Reset ${usersSnapshot.size} player lives successfully`);\n            alert(`Reset ${usersSnapshot.size} player lives successfully!`);\n            \n            this.loadPlayersForManagement();\n            \n        } catch (error) {\n            console.error('❌ Error resetting player lives:', error);\n            alert('Error resetting player lives: ' + error.message);\n        }\n    }\n\n    // Generate test scores\n    generateTestScores() {\n        console.log('🔧 Generating test scores...');\n        // This method would generate test scores for testing purposes\n        // Implementation depends on your specific requirements\n        alert('Test scores generation not yet implemented');\n    }\n\n    // Cleanup method\n    cleanup() {\n        console.log('🧹 UserManagement cleanup completed');\n    }\n}\n","// Team Operations Module\n// Handles team management, picks, standings, and manual adjustments\n\nexport class TeamOperations {\n    constructor(db) {\n        this.db = db;\n        this.currentActiveEdition = 1;\n        this.currentActiveGameweek = '1';\n    }\n\n    // Update current active edition\n    updateCurrentActiveEdition(edition) {\n        this.currentActiveEdition = edition;\n        console.log(`TeamOperations: Updated currentActiveEdition to ${edition}`);\n    }\n\n    // Update current active gameweek\n    updateCurrentActiveGameweek(gameweek) {\n        this.currentActiveGameweek = gameweek;\n        console.log(`TeamOperations: Updated currentActiveGameweek to ${gameweek}`);\n    }\n\n    // Setup As It Stands functionality\n    setupAsItStandsFunctionality() {\n        console.log('🔧 Setting up As It Stands functionality...');\n        \n        const asItStandsBtn = document.querySelector('#as-it-stands-btn');\n        if (asItStandsBtn) {\n            asItStandsBtn.addEventListener('click', () => this.loadStandings());\n        }\n        \n        const exportStandingsBtn = document.querySelector('#export-standings-btn');\n        if (exportStandingsBtn) {\n            exportStandingsBtn.addEventListener('click', () => this.exportStandings());\n        }\n        \n        const manualAdjustmentBtn = document.querySelector('#manual-adjustment-btn');\n        if (manualAdjustmentBtn) {\n            manualAdjustmentBtn.addEventListener('click', () => this.setupManualAdjustments());\n        }\n        \n        const standingsHistoryBtn = document.querySelector('#standings-history-btn');\n        if (standingsHistoryBtn) {\n            standingsHistoryBtn.addEventListener('click', () => this.setupStandingsHistory());\n        }\n        \n        console.log('✅ As It Stands functionality setup complete');\n    }\n\n    // Initialize As It Stands tab\n    initializeAsItStandsTab(deviceType = 'desktop') {\n        console.log(`🔧 Initializing As It Stands tab for ${deviceType}...`);\n        \n        try {\n            // Find the As It Stands content container\n            const contentContainer = document.querySelector(`#${deviceType}-as-it-stands-tab`);\n            if (!contentContainer) {\n                console.warn(`❌ As It Stands content container not found for ${deviceType}`);\n                return;\n            }\n            \n            // Create missing elements if they don't exist\n            this.createAsItStandsElements(contentContainer, deviceType);\n            \n            // Load initial standings\n            this.loadStandings();\n            \n            console.log(`✅ As It Stands tab initialized for ${deviceType}`);\n            \n        } catch (error) {\n            console.error(`❌ Error initializing As It Stands tab for ${deviceType}:`, error);\n        }\n    }\n\n    // Create missing As It Stands elements\n    createAsItStandsElements(container, deviceType) {\n        console.log(`🔧 Creating As It Stands elements for ${deviceType}...`);\n        \n        // Create gameweek selector if it doesn't exist\n        let gameweekSelector = container.querySelector('.gameweek-selector');\n        if (!gameweekSelector) {\n            gameweekSelector = document.createElement('div');\n            gameweekSelector.className = 'gameweek-selector';\n            gameweekSelector.innerHTML = `\n                <label for=\"standings-gameweek\">Select Gameweek:</label>\n                <select id=\"standings-gameweek\">\n                    <option value=\"1\">Game Week 1</option>\n                    <option value=\"2\">Game Week 2</option>\n                    <option value=\"3\">Game Week 3</option>\n                    <option value=\"4\">Game Week 4</option>\n                    <option value=\"5\">Game Week 5</option>\n                    <option value=\"6\">Game Week 6</option>\n                    <option value=\"7\">Game Week 7</option>\n                    <option value=\"8\">Game Week 8</option>\n                    <option value=\"9\">Game Week 9</option>\n                    <option value=\"10\">Game Week 10</option>\n                    <option value=\"tiebreak\">Tiebreak Round</option>\n                </select>\n            `;\n            container.appendChild(gameweekSelector);\n            \n            // Add event listener for gameweek change\n            const select = gameweekSelector.querySelector('select');\n            if (select) {\n                select.addEventListener('change', () => {\n                    this.currentActiveGameweek = select.value;\n                    this.loadStandings();\n                });\n            }\n        }\n        \n        // Create standings container if it doesn't exist\n        let standingsContainer = container.querySelector('.standings-container');\n        if (!standingsContainer) {\n            standingsContainer = document.createElement('div');\n            standingsContainer.className = 'standings-container';\n            standingsContainer.innerHTML = '<p>Loading standings...</p>';\n            container.appendChild(standingsContainer);\n        }\n        \n        // Create standings summary if it doesn't exist\n        let standingsSummary = container.querySelector('.standings-summary');\n        if (!standingsSummary) {\n            standingsSummary = document.createElement('div');\n            standingsSummary.className = 'standings-summary';\n            standingsSummary.innerHTML = '<p>Loading summary...</p>';\n            container.appendChild(standingsSummary);\n        }\n        \n        console.log(`✅ As It Stands elements created for ${deviceType}`);\n    }\n\n    // Load standings\n    async loadStandings() {\n        try {\n            console.log('🔧 Loading standings...');\n            \n            // Get current gameweek\n            const currentGameweek = this.currentActiveGameweek;\n            console.log(`Current gameweek: ${currentGameweek}`);\n            \n            // Get all active players\n            const playersSnapshot = await this.db.collection('users')\n                .where('status', '==', 'active')\n                .get();\n            \n            const players = [];\n            playersSnapshot.forEach(doc => {\n                players.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            console.log(`Found ${players.length} active players`);\n            \n            // Get fixtures for current gameweek\n            const gameweekKey = currentGameweek === 'tiebreak' ? 'gwtiebreak' : `gw${currentGameweek}`;\n            const editionGameweekKey = `edition${this.currentActiveEdition}_${gameweekKey}`;\n            \n            const fixturesDoc = await this.db.collection('fixtures').doc(editionGameweekKey).get();\n            let fixtures = [];\n            \n            if (fixturesDoc.exists) {\n                const fixturesData = fixturesDoc.data();\n                fixtures = fixturesData.fixtures || [];\n                console.log(`Found ${fixtures.length} fixtures for gameweek ${currentGameweek}`);\n            } else {\n                console.log(`No fixtures found for gameweek ${currentGameweek}`);\n            }\n            \n            // Calculate standings\n            const standings = await this.calculateStandings(players, fixtures, currentGameweek);\n            \n            // Update displays\n            this.updateStandingsSummary(standings);\n            this.renderStandingsTable(standings);\n            \n            console.log('✅ Standings loaded successfully');\n            \n        } catch (error) {\n            console.error('❌ Error loading standings:', error);\n            alert('Error loading standings: ' + error.message);\n        }\n    }\n\n    // Calculate standings\n    async calculateStandings(players, fixtures, gameweek) {\n        console.log(`🔧 Calculating standings for gameweek ${gameweek}...`);\n        \n        const standings = [];\n        \n        for (const player of players) {\n            const playerStanding = {\n                id: player.id,\n                displayName: player.displayName || 'Unknown',\n                email: player.email || 'No email',\n                lives: player.lives || 2,\n                status: player.status || 'active',\n                picks: {},\n                totalPoints: 0,\n                eliminated: false\n            };\n            \n            // Get player picks for this gameweek\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${this.currentActiveEdition}_${gameweekKey}`;\n            \n            try {\n                const picksDoc = await this.db.collection('picks').doc(player.id).get();\n                if (picksDoc.exists) {\n                    const picksData = picksDoc.data();\n                    playerStanding.picks = picksData[editionGameweekKey] || {};\n                }\n            } catch (error) {\n                console.log(`No picks found for player ${player.id} in gameweek ${gameweek}`);\n            }\n            \n            // Calculate points based on picks and fixtures\n            if (fixtures.length > 0 && playerStanding.picks.team) {\n                const pickedTeam = playerStanding.picks.team;\n                const fixture = fixtures.find(f => \n                    f.homeTeam === pickedTeam || f.awayTeam === pickedTeam\n                );\n                \n                if (fixture) {\n                    if (fixture.status === 'FT') {\n                        // Match finished, calculate result\n                        const homeScore = parseInt(fixture.homeScore) || 0;\n                        const awayScore = parseInt(fixture.awayScore) || 0;\n                        \n                        if (pickedTeam === fixture.homeTeam) {\n                            if (homeScore > awayScore) {\n                                playerStanding.totalPoints = 3; // Win\n                            } else if (homeScore === awayScore) {\n                                playerStanding.totalPoints = 1; // Draw\n                                playerStanding.lives = Math.max(0, playerStanding.lives - 1);\n                            } else {\n                                playerStanding.totalPoints = 0; // Loss\n                                playerStanding.lives = Math.max(0, playerStanding.lives - 1);\n                            }\n                        } else {\n                            if (awayScore > homeScore) {\n                                playerStanding.totalPoints = 3; // Win\n                            } else if (awayScore === homeScore) {\n                                playerStanding.totalPoints = 1; // Draw\n                                playerStanding.lives = Math.max(0, playerStanding.lives - 1);\n                            } else {\n                                playerStanding.totalPoints = 0; // Loss\n                                playerStanding.lives = Math.max(0, playerStanding.lives - 1);\n                            }\n                        }\n                        \n                        if (playerStanding.lives === 0) {\n                            playerStanding.eliminated = true;\n                        }\n                    } else {\n                        // Match not finished\n                        playerStanding.totalPoints = 0;\n                    }\n                }\n            }\n            \n            standings.push(playerStanding);\n        }\n        \n        // Sort standings by points (descending), then by lives (descending), then by name\n        standings.sort((a, b) => {\n            if (a.totalPoints !== b.totalPoints) {\n                return b.totalPoints - a.totalPoints;\n            }\n            if (a.lives !== b.lives) {\n                return b.lives - a.lives;\n            }\n            return a.displayName.localeCompare(b.displayName);\n        });\n        \n        console.log(`✅ Calculated standings for ${standings.length} players`);\n        return standings;\n    }\n\n    // Update standings summary\n    updateStandingsSummary(standings) {\n        const summaryContainer = document.querySelector('#standings-summary');\n        if (!summaryContainer) return;\n        \n        const totalPlayers = standings.length;\n        const activePlayers = standings.filter(p => !p.eliminated).length;\n        const eliminatedPlayers = totalPlayers - activePlayers;\n        \n        summaryContainer.innerHTML = `\n            <div class=\"standings-summary\">\n                <h3>Standings Summary</h3>\n                <div class=\"summary-stats\">\n                    <div class=\"stat\">\n                        <span class=\"stat-label\">Total Players:</span>\n                        <span class=\"stat-value\">${totalPlayers}</span>\n                    </div>\n                    <div class=\"stat\">\n                        <span class=\"stat-label\">Active Players:</span>\n                        <span class=\"stat-value active\">${activePlayers}</span>\n                    </div>\n                    <div class=\"stat\">\n                        <span class=\"stat-label\">Eliminated:</span>\n                        <span class=\"stat-value eliminated\">${eliminatedPlayers}</span>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    // Render standings table\n    renderStandingsTable(standings) {\n        const tableContainer = document.querySelector('#standings-table-container');\n        if (!tableContainer) return;\n        \n        if (!standings || standings.length === 0) {\n            tableContainer.innerHTML = '<p>No standings data available</p>';\n            return;\n        }\n        \n        let tableHtml = `\n            <table class=\"standings-table\">\n                <thead>\n                    <tr>\n                        <th>Position</th>\n                        <th>Player</th>\n                        <th>Picked Team</th>\n                        <th>Result</th>\n                        <th>Points</th>\n                        <th>Lives</th>\n                        <th>Status</th>\n                    </tr>\n                </thead>\n                <tbody>\n        `;\n        \n        standings.forEach((player, index) => {\n            const position = index + 1;\n            const positionClass = position <= 3 ? 'top-three' : '';\n            const statusClass = player.eliminated ? 'eliminated' : 'active';\n            \n            const pickedTeam = player.picks.team || 'No pick';\n            let result = 'Pending';\n            let resultClass = 'pending';\n            \n            if (player.totalPoints > 0) {\n                if (player.totalPoints === 3) {\n                    result = 'Win';\n                    resultClass = 'win';\n                } else if (player.totalPoints === 1) {\n                    result = 'Draw';\n                    resultClass = 'draw';\n                }\n            } else if (player.picks.team) {\n                result = 'Loss';\n                resultClass = 'loss';\n            }\n            \n            tableHtml += `\n                <tr class=\"${positionClass} ${statusClass}\">\n                    <td class=\"position\">${position}</td>\n                    <td class=\"player-name\">${player.displayName}</td>\n                    <td class=\"picked-team\">${pickedTeam}</td>\n                    <td class=\"result ${resultClass}\">${result}</td>\n                    <td class=\"points\">${player.totalPoints}</td>\n                    <td class=\"lives\">${player.lives}</td>\n                    <td class=\"status ${statusClass}\">${player.eliminated ? 'Eliminated' : 'Active'}</td>\n                </tr>\n            `;\n        });\n        \n        tableHtml += `\n                </tbody>\n            </table>\n        `;\n        \n        tableContainer.innerHTML = tableHtml;\n    }\n\n    // Export standings\n    exportStandings() {\n        console.log('🔧 Exporting standings...');\n        \n        const tableContainer = document.querySelector('#standings-table-container');\n        if (!tableContainer) {\n            alert('No standings table to export');\n            return;\n        }\n        \n        const table = tableContainer.querySelector('table');\n        if (!table) {\n            alert('No standings table found');\n            return;\n        }\n        \n        // Convert table to CSV\n        const csv = this.tableToCSV(table);\n        \n        // Create download link\n        const blob = new Blob([csv], { type: 'text/csv' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `standings-gameweek-${this.currentActiveGameweek}-${new Date().toISOString().split('T')[0]}.csv`;\n        a.click();\n        \n        window.URL.revokeObjectURL(url);\n        console.log('✅ Standings exported successfully');\n    }\n\n    // Convert table to CSV\n    tableToCSV(table) {\n        const rows = Array.from(table.querySelectorAll('tr'));\n        const csv = rows.map(row => {\n            const cells = Array.from(row.querySelectorAll('th, td'));\n            return cells.map(cell => {\n                let text = cell.textContent || cell.innerText || '';\n                text = text.replace(/\"/g, '\"\"');\n                return `\"${text}\"`;\n            }).join(',');\n        }).join('\\n');\n        \n        return csv;\n    }\n\n    // Setup manual adjustments\n    setupManualAdjustments() {\n        console.log('🔧 Setting up manual adjustments...');\n        \n        const adjustmentContainer = document.querySelector('#manual-adjustment-container');\n        if (!adjustmentContainer) {\n            console.error('Manual adjustment container not found');\n            return;\n        }\n        \n        adjustmentContainer.style.display = 'block';\n        \n        // Load players for adjustment dropdown\n        this.updateAdjustmentPlayerDropdown([]);\n        \n        // Set up form submission\n        const form = document.querySelector('#manual-adjustment-form');\n        if (form) {\n            form.addEventListener('submit', (e) => this.applyManualAdjustment(e));\n        }\n    }\n\n    // Update adjustment player dropdown\n    async updateAdjustmentPlayerDropdown(players) {\n        const playerSelect = document.querySelector('#adjustment-player-select');\n        if (!playerSelect) return;\n        \n        if (players.length === 0) {\n            // Load players if not provided\n            try {\n                const playersSnapshot = await this.db.collection('users')\n                    .where('status', '==', 'active')\n                    .orderBy('displayName')\n                    .get();\n                \n                players = [];\n                playersSnapshot.forEach(doc => {\n                    players.push({\n                        id: doc.id,\n                        displayName: doc.data().displayName || 'Unknown'\n                    });\n                });\n            } catch (error) {\n                console.error('Error loading players for adjustment dropdown:', error);\n                return;\n            }\n        }\n        \n        playerSelect.innerHTML = '<option value=\"\">Select a player...</option>';\n        players.forEach(player => {\n            const option = document.createElement('option');\n            option.value = player.id;\n            option.textContent = player.displayName;\n            playerSelect.appendChild(option);\n        });\n    }\n\n    // Load player current lives\n    async loadPlayerCurrentLives(playerId) {\n        try {\n            const playerDoc = await this.db.collection('users').doc(playerId).get();\n            if (playerDoc.exists) {\n                const playerData = playerDoc.data();\n                const livesInput = document.querySelector('#adjustment-lives-input');\n                if (livesInput) {\n                    livesInput.value = playerData.lives || 2;\n                }\n            }\n        } catch (error) {\n            console.error('Error loading player lives:', error);\n        }\n    }\n\n    // Apply manual adjustment\n    async applyManualAdjustment(event) {\n        event.preventDefault();\n        \n        try {\n            const playerId = document.querySelector('#adjustment-player-select').value;\n            const newLives = parseInt(document.querySelector('#adjustment-lives-input').value);\n            const reason = document.querySelector('#adjustment-reason').value;\n            \n            if (!playerId) {\n                alert('Please select a player');\n                return;\n            }\n            \n            if (newLives < 0 || newLives > 2) {\n                alert('Lives must be between 0 and 2');\n                return;\n            }\n            \n            // Update player lives\n            await this.db.collection('users').doc(playerId).update({\n                lives: newLives,\n                lastUpdated: new Date()\n            });\n            \n            // Log the adjustment\n            await this.db.collection('adjustmentLogs').add({\n                playerId,\n                oldLives: 0, // We don't have the old value easily accessible\n                newLives,\n                reason,\n                adjustedBy: 'admin', // This should come from auth context\n                adjustedAt: new Date()\n            });\n            \n            console.log(`✅ Manual adjustment applied: Player ${playerId} lives set to ${newLives}`);\n            alert('Manual adjustment applied successfully!');\n            \n            // Hide the adjustment container\n            const adjustmentContainer = document.querySelector('#manual-adjustment-container');\n            if (adjustmentContainer) {\n                adjustmentContainer.style.display = 'none';\n            }\n            \n            // Refresh standings if they're currently displayed\n            if (document.querySelector('#standings-table-container')) {\n                this.loadStandings();\n            }\n            \n        } catch (error) {\n            console.error('❌ Error applying manual adjustment:', error);\n            alert('Error applying adjustment: ' + error.message);\n        }\n    }\n\n    // Setup standings history\n    setupStandingsHistory() {\n        console.log('🔧 Setting up standings history...');\n        \n        const historyContainer = document.querySelector('#standings-history-container');\n        if (!historyContainer) {\n            console.error('Standings history container not found');\n            return;\n        }\n        \n        historyContainer.style.display = 'block';\n        \n        // Load standings history\n        this.loadStandingsHistory();\n    }\n\n    // Load standings history\n    async loadStandingsHistory() {\n        try {\n            console.log('🔧 Loading standings history...');\n            \n            const logsSnapshot = await this.db.collection('adjustmentLogs')\n                .orderBy('adjustedAt', 'desc')\n                .limit(50)\n                .get();\n            \n            const logs = [];\n            logsSnapshot.forEach(doc => {\n                logs.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            this.renderStandingsHistory(logs);\n            \n        } catch (error) {\n            console.error('❌ Error loading standings history:', error);\n            alert('Error loading standings history: ' + error.message);\n        }\n    }\n\n    // Render standings history\n    renderStandingsHistory(logs) {\n        const historyContainer = document.querySelector('#standings-history-container');\n        if (!historyContainer) return;\n        \n        if (!logs || logs.length === 0) {\n            historyContainer.innerHTML = '<p>No adjustment history found</p>';\n            return;\n        }\n        \n        let historyHtml = `\n            <h3>Standings Adjustment History</h3>\n            <table class=\"history-table\">\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Player</th>\n                        <th>Old Lives</th>\n                        <th>New Lives</th>\n                        <th>Reason</th>\n                        <th>Adjusted By</th>\n                    </tr>\n                </thead>\n                <tbody>\n        `;\n        \n        logs.forEach(log => {\n            const date = log.adjustedAt?.toDate?.() || log.adjustedAt || new Date();\n            const formattedDate = date.toLocaleDateString('en-GB') + ' ' + date.toLocaleTimeString();\n            \n            historyHtml += `\n                <tr>\n                    <td>${formattedDate}</td>\n                    <td>${log.playerId}</td>\n                    <td>${log.oldLives}</td>\n                    <td>${log.newLives}</td>\n                    <td>${log.reason || 'No reason provided'}</td>\n                    <td>${log.adjustedBy || 'Unknown'}</td>\n                </tr>\n            `;\n        });\n        \n        historyHtml += `\n                </tbody>\n            </table>\n            <button id=\"export-history-btn\" class=\"export-btn\">Export History</button>\n        `;\n        \n        historyContainer.innerHTML = historyHtml;\n        \n        // Set up export button\n        const exportBtn = document.querySelector('#export-history-btn');\n        if (exportBtn) {\n            exportBtn.addEventListener('click', () => this.exportStandingsHistory(logs));\n        }\n    }\n\n    // Export standings history\n    exportStandingsHistory(logs) {\n        console.log('🔧 Exporting standings history...');\n        \n        if (!logs || logs.length === 0) {\n            alert('No history data to export');\n            return;\n        }\n        \n        // Convert logs to CSV\n        const csv = this.logsToCSV(logs);\n        \n        // Create download link\n        const blob = new Blob([csv], { type: 'text/csv' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `standings-history-${new Date().toISOString().split('T')[0]}.csv`;\n        a.click();\n        \n        window.URL.revokeObjectURL(url);\n        console.log('✅ Standings history exported successfully');\n    }\n\n    // Convert logs to CSV\n    logsToCSV(logs) {\n        const headers = ['Date', 'Player ID', 'Old Lives', 'New Lives', 'Reason', 'Adjusted By'];\n        const csv = [headers.join(',')];\n        \n        logs.forEach(log => {\n            const date = log.adjustedAt?.toDate?.() || log.adjustedAt || new Date();\n            const formattedDate = date.toLocaleDateString('en-GB') + ' ' + date.toLocaleTimeString();\n            \n            const row = [\n                formattedDate,\n                log.playerId || '',\n                log.oldLives || '',\n                log.newLives || '',\n                (log.reason || '').replace(/\"/g, '\"\"'),\n                log.adjustedBy || ''\n            ].map(field => `\"${field}\"`).join(',');\n            \n            csv.push(row);\n        });\n        \n        return csv.join('\\n');\n    }\n\n    // Adjust player lives\n    async adjustPlayerLives(playerId, currentLives) {\n        try {\n            const newLives = Math.max(0, Math.min(2, currentLives));\n            \n            await this.db.collection('users').doc(playerId).update({\n                lives: newLives,\n                lastUpdated: new Date()\n            });\n            \n            console.log(`✅ Player ${playerId} lives adjusted to ${newLives}`);\n            return true;\n            \n        } catch (error) {\n            console.error('❌ Error adjusting player lives:', error);\n            return false;\n        }\n    }\n\n    // Get team badge\n    getTeamBadge(teamName) {\n        // This method would return the team badge image URL\n        // Implementation depends on your team badge system\n        return null;\n    }\n\n    // Cleanup method\n    cleanup() {\n        console.log('🧹 TeamOperations cleanup completed');\n    }\n}\n","// Scheduling Module\n// Handles gameweek management, deadlines, and competition settings\n\nexport class Scheduling {\n    constructor(db) {\n        this.db = db;\n        this.currentActiveEdition = 1;\n        this.currentActiveGameweek = '1';\n    }\n\n    // Update current active edition\n    updateCurrentActiveEdition(edition) {\n        this.currentActiveEdition = edition;\n        console.log(`Scheduling: Updated currentActiveEdition to ${edition}`);\n    }\n\n    // Update current active gameweek\n    updateCurrentActiveGameweek(gameweek) {\n        this.currentActiveGameweek = gameweek;\n        console.log(`Scheduling: Updated currentActiveGameweek to ${gameweek}`);\n    }\n\n    // Setup quick edition selector\n    setupQuickEditionSelector() {\n        // Prevent multiple initializations\n        if (this.editionSelectorInitialized) {\n            console.log('🔄 Edition selector already initialized, skipping...');\n            return;\n        }\n        \n        console.log('🔧 Setting up quick edition selector...');\n        \n        // Use a more robust approach - try multiple times if elements aren't found\n        const setupElements = () => {\n            const editionSelector = document.querySelector('#quick-edition-selector');\n            const quickSaveEditionBtn = document.querySelector('#quick-save-edition-btn');\n            \n            console.log('🔍 Looking for elements...');\n            console.log('Edition selector found:', !!editionSelector);\n            console.log('Save button found:', !!quickSaveEditionBtn);\n            \n            if (!editionSelector) {\n                console.log('❌ Quick edition selector not found, will retry...');\n                return false;\n            }\n            \n            if (!quickSaveEditionBtn) {\n                console.log('❌ Quick save edition button not found, will retry...');\n                return false;\n            }\n            \n            console.log('✅ Found both elements');\n            console.log('🔍 Edition selector properties:', {\n                disabled: editionSelector.disabled,\n                style: editionSelector.style.cssText,\n                className: editionSelector.className,\n                type: editionSelector.type\n            });\n            \n            console.log('🔍 Save button properties:', {\n                disabled: quickSaveEditionBtn.disabled,\n                style: quickSaveEditionBtn.style.cssText,\n                className: quickSaveEditionBtn.className,\n                type: quickSaveEditionBtn.type\n            });\n            \n            // Load available editions\n            this.loadAvailableEditions();\n            \n            // Set up change handler for the selector\n            editionSelector.addEventListener('change', (e) => {\n                console.log('🔄 Edition selector change event triggered');\n                \n                // Reset Active Week to 1 when edition changes\n                const newEdition = editionSelector.value;\n                this.resetActiveWeekForNewEdition(newEdition);\n                \n                // Save the edition change\n                this.saveQuickEditionChange();\n                \n                // Refresh registration statistics if admin management manager is available\n                if (window.adminManagementManager && window.adminManagementManager.refreshRegistrationStatistics) {\n                    console.log('🔄 Refreshing registration statistics after edition change...');\n                    window.adminManagementManager.refreshRegistrationStatistics();\n                }\n            });\n            \n            // Set up save button event listener - use direct approach without cloning\n            console.log('🔧 Setting up save button event listener...');\n            console.log('🔍 Save button element:', quickSaveEditionBtn);\n            console.log('🔍 Save button properties:', {\n                disabled: quickSaveEditionBtn.disabled,\n                style: quickSaveEditionBtn.style.cssText,\n                className: quickSaveEditionBtn.className,\n                type: quickSaveEditionBtn.type,\n                onclick: quickSaveEditionBtn.onclick,\n                onmousedown: quickSaveEditionBtn.onmousedown,\n                onmouseup: quickSaveEditionBtn.onmouseup\n            });\n            \n            // Remove any existing event listeners\n            const newButton = quickSaveEditionBtn.cloneNode(true);\n            quickSaveEditionBtn.parentNode.replaceChild(newButton, quickSaveEditionBtn);\n            \n            // Get the new button reference\n            const freshButton = document.querySelector('#quick-save-edition-btn');\n            console.log('🔍 Fresh button element:', freshButton);\n            \n            freshButton.addEventListener('click', (e) => {\n                console.log('🔄 Quick save edition button clicked!');\n                e.preventDefault();\n                e.stopPropagation();\n                \n                // Show immediate feedback\n                const originalText = freshButton.textContent;\n                freshButton.textContent = 'Saving...';\n                freshButton.disabled = true;\n                \n                // Call the save method\n                this.saveQuickEditionChange().then(() => {\n                    // Show success feedback\n                    freshButton.textContent = 'Saved!';\n                    freshButton.style.backgroundColor = '#28a745';\n                    freshButton.style.color = 'white';\n                    \n                    // Reset button after 2 seconds\n                    setTimeout(() => {\n                        freshButton.textContent = originalText;\n                        freshButton.style.backgroundColor = '';\n                        freshButton.style.color = '';\n                        freshButton.disabled = false;\n                    }, 2000);\n                }).catch((error) => {\n                    // Show error feedback\n                    freshButton.textContent = 'Error!';\n                    freshButton.style.backgroundColor = '#dc3545';\n                    freshButton.style.color = 'white';\n                    \n                    // Reset button after 3 seconds\n                    setTimeout(() => {\n                        freshButton.textContent = originalText;\n                        freshButton.style.backgroundColor = '';\n                        freshButton.style.color = '';\n                        freshButton.disabled = false;\n                    }, 3000);\n                });\n            });\n            \n            // Also try mousedown and mouseup events\n            freshButton.addEventListener('mousedown', (e) => {\n                console.log('🔄 Quick save edition button mousedown!');\n            });\n            \n            freshButton.addEventListener('mouseup', (e) => {\n                console.log('🔄 Quick save edition button mouseup!');\n            });\n            \n            console.log('✅ Save button event listeners attached');\n            \n            // Also allow saving by pressing Enter in the selector\n            editionSelector.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') {\n                    console.log('🔄 Enter key pressed in edition selector');\n                    this.saveQuickEditionChange();\n                }\n            });\n            \n            // Ensure the selector looks and behaves like a dropdown\n            editionSelector.style.appearance = 'auto';\n            editionSelector.style.webkitAppearance = 'auto';\n            editionSelector.style.mozAppearance = 'auto';\n            editionSelector.style.cursor = 'pointer';\n            editionSelector.style.pointerEvents = 'auto';\n            editionSelector.style.opacity = '1';\n            editionSelector.disabled = false;\n            \n            // Remove any custom background image to avoid double arrows\n            editionSelector.style.backgroundImage = 'none';\n            editionSelector.style.backgroundRepeat = 'no-repeat';\n            editionSelector.style.backgroundPosition = 'right 8px center';\n            editionSelector.style.backgroundSize = '12px auto';\n            editionSelector.style.paddingRight = '8px';\n            \n            // Ensure the save button is enabled and clickable\n            quickSaveEditionBtn.disabled = false;\n            quickSaveEditionBtn.style.pointerEvents = 'auto';\n            quickSaveEditionBtn.style.opacity = '1';\n            quickSaveEditionBtn.style.cursor = 'pointer';\n            \n            // Set current selection\n            this.updateQuickEditionSelector();\n            \n            console.log('✅ Quick edition selector and save button setup complete');\n            return true;\n        };\n        \n        // Try to set up elements immediately\n        if (!setupElements()) {\n            // If elements aren't found, retry after a short delay\n            console.log('🔄 Elements not found, retrying in 100ms...');\n            setTimeout(() => {\n                if (!setupElements()) {\n                    console.log('🔄 Elements still not found, retrying in 500ms...');\n                    setTimeout(() => {\n                        if (!setupElements()) {\n                            console.error('❌ Failed to find elements after multiple retries');\n                        }\n                    }, 500);\n                }\n            }, 100);\n        }\n        \n        // Mark as initialized\n        this.editionSelectorInitialized = true;\n    }\n\n    // Setup active gameweek selector\n    setupActiveGameweekSelector() {\n        console.log('🔧 Setting up active gameweek selector...');\n        \n        const gameweekSelector = document.querySelector('#active-gameweek-select');\n        if (!gameweekSelector) {\n            console.log('❌ Active gameweek selector not found - checking for alternatives...');\n            \n            // Try alternative selectors\n            const alternativeSelectors = [\n                '#active-gameweek-select',\n                '#gameweek-select',\n                'select[id*=\"gameweek\"]',\n                'select[id*=\"week\"]'\n            ];\n            \n            for (const selector of alternativeSelectors) {\n                const element = document.querySelector(selector);\n                if (element) {\n                    console.log(`✅ Found alternative selector: ${selector}`);\n                    break;\n                }\n            }\n            \n            return;\n        }\n        \n        console.log('✅ Found active gameweek selector:', gameweekSelector);\n        \n        // Load available gameweeks\n        this.loadAvailableGameweeks();\n        \n        // Set up change handler\n        gameweekSelector.addEventListener('change', (e) => this.handleGameweekChange(e));\n        \n        // Set current selection\n        this.updateActiveGameweekSelector();\n        \n        console.log('✅ Active gameweek selector setup complete');\n    }\n\n    // Load available gameweeks\n    async loadAvailableGameweeks() {\n        try {\n            const gameweekSelector = document.querySelector('#active-gameweek-select');\n            if (!gameweekSelector) {\n                console.log('❌ Gameweek selector not found in loadAvailableGameweeks');\n                return;\n            }\n            \n            console.log('🔧 Loading gameweeks into selector:', gameweekSelector);\n            \n            // Clear existing options\n            gameweekSelector.innerHTML = '';\n            console.log('✅ Cleared existing options');\n            \n            // Add gameweek options (1-10)\n            for (let i = 1; i <= 10; i++) {\n                const option = document.createElement('option');\n                option.value = i.toString();\n                option.textContent = `Week ${i}`;\n                gameweekSelector.appendChild(option);\n                console.log(`✅ Added option: Week ${i}`);\n            }\n            \n            console.log(`✅ Loaded ${gameweekSelector.options.length} gameweek options`);\n            console.log('🔍 Final selector HTML:', gameweekSelector.innerHTML);\n            \n        } catch (error) {\n            console.error('❌ Error loading gameweeks:', error);\n        }\n    }\n\n    // Update active gameweek selector\n    updateActiveGameweekSelector() {\n        const gameweekSelector = document.querySelector('#active-gameweek-select');\n        if (!gameweekSelector) return;\n        \n        gameweekSelector.value = this.currentActiveGameweek;\n        console.log(`✅ Updated gameweek selector to ${this.currentActiveGameweek}`);\n    }\n\n    // Handle gameweek change\n    async handleGameweekChange(e) {\n        const selectedGameweek = e.target.value;\n        console.log('Gameweek selection changed to:', selectedGameweek);\n        \n        // Update current active gameweek\n        this.currentActiveGameweek = selectedGameweek;\n        \n        // Update global variables\n        if (window.currentActiveGameweek !== undefined) {\n            window.currentActiveGameweek = selectedGameweek;\n        }\n        \n        if (window.app && window.app.currentActiveGameweek !== undefined) {\n            window.app.currentActiveGameweek = selectedGameweek;\n        }\n        \n        // Update all other gameweek selectors\n        this.setDefaultGameweekSelection();\n        \n        // Save the change to database\n        await this.saveGameweekChange(selectedGameweek);\n    }\n\n    // Save gameweek change to database\n    async saveGameweekChange(gameweek) {\n        try {\n            const settingsDoc = await this.db.collection('settings').doc('currentCompetition').get();\n            let settings = {};\n            \n            if (settingsDoc.exists) {\n                settings = settingsDoc.data();\n            }\n            \n            settings.active_gameweek = gameweek;\n            settings.last_updated = new Date();\n            \n            await this.db.collection('settings').doc('currentCompetition').set(settings);\n            console.log(`✅ Gameweek change saved to database: ${gameweek}`);\n            \n        } catch (error) {\n            console.error('❌ Error saving gameweek change:', error);\n        }\n    }\n\n    // Set default gameweek selection across all selectors\n    setDefaultGameweekSelection() {\n        console.log('🔧 Setting default gameweek selection...');\n        \n        const gameweekSelectors = [\n            '#gameweek-select',           // Fixtures tab\n            '#score-gameweek-select',     // Scores tab\n\n            '#standings-gameweek-select', // As It Stands tab\n            '#history-gameweek-select',   // History tab\n            '#import-gameweek-select',    // API Import section\n            '#source-gameweek',           // Reallocate fixtures source\n            '#target-gameweek',           // Reallocate fixtures target\n            '#delete-gameweek'            // Delete fixtures\n        ];\n        \n        gameweekSelectors.forEach(selectorId => {\n            const selector = document.querySelector(selectorId);\n            if (selector) {\n                const optionExists = Array.from(selector.options).some(option => option.value === this.currentActiveGameweek);\n                if (optionExists) {\n                    selector.value = this.currentActiveGameweek;\n                    console.log(`✅ Set ${selectorId} to default gameweek: ${this.currentActiveGameweek}`);\n                    \n                    // Trigger change event to ensure any listeners are notified\n                    const event = new Event('change', { bubbles: true });\n                    selector.dispatchEvent(event);\n                } else {\n                    console.log(`⚠️ Gameweek ${this.currentActiveGameweek} not available in ${selectorId}`);\n                }\n            }\n        });\n    }\n\n    // Load available editions\n    async loadAvailableEditions() {\n        try {\n            const editionSelector = document.querySelector('#quick-edition-selector');\n            if (!editionSelector) return;\n            \n            // Get editions from settings\n            const settingsDoc = await this.db.collection('settings').doc('editions').get();\n            let editions = [];\n            \n            if (settingsDoc.exists) {\n                const settingsData = settingsDoc.data();\n                editions = settingsData.editions || [];\n            }\n            \n            // If no editions in settings, create default ones\n            if (editions.length === 0) {\n                editions = [\n                    { id: 1, name: 'Edition 1', active: true },\n                    { id: 2, name: 'Edition 2', active: false },\n                    { id: 3, name: 'Edition 3', active: false },\n                    { id: 4, name: 'Edition 4', active: false },\n                    { id: 'test', name: 'Test Weeks', active: false }\n                ];\n                \n                // Save default editions\n                await this.db.collection('settings').doc('editions').set({\n                    editions,\n                    lastUpdated: new Date()\n                });\n            } else {\n                // Check if we need to add missing editions\n                const requiredEditions = [\n                    { id: 1, name: 'Edition 1', active: true },\n                    { id: 2, name: 'Edition 2', active: false },\n                    { id: 3, name: 'Edition 3', active: false },\n                    { id: 4, name: 'Edition 4', active: false },\n                    { id: 'test', name: 'Test Weeks', active: false }\n                ];\n                \n                let needsUpdate = false;\n                requiredEditions.forEach(required => {\n                    const exists = editions.find(e => e.id === required.id);\n                    if (!exists) {\n                        editions.push(required);\n                        needsUpdate = true;\n                    }\n                });\n                \n                if (needsUpdate) {\n                    // Save updated editions\n                    await this.db.collection('settings').doc('editions').set({\n                        editions,\n                        lastUpdated: new Date()\n                    });\n                    console.log('✅ Added missing editions to database');\n                }\n            }\n            \n            // Populate selector\n            editionSelector.innerHTML = '';\n            editions.forEach(edition => {\n                const option = document.createElement('option');\n                option.value = edition.id;\n                option.textContent = edition.name;\n                editionSelector.appendChild(option);\n            });\n            \n            console.log(`✅ Loaded ${editions.length} editions`);\n            \n        } catch (error) {\n            console.error('❌ Error loading editions:', error);\n        }\n    }\n\n    // Update quick edition selector\n    updateQuickEditionSelector() {\n        const editionSelector = document.querySelector('#quick-edition-selector');\n        if (!editionSelector) return;\n        \n        editionSelector.value = this.currentActiveEdition;\n        console.log(`✅ Updated edition selector to ${this.currentActiveEdition}`);\n    }\n\n    // Save quick edition change\n    async saveQuickEditionChange() {\n        try {\n            const editionSelector = document.querySelector('#quick-edition-selector');\n            if (!editionSelector) return;\n            \n            const newEdition = editionSelector.value;\n            if (newEdition === this.currentActiveEdition) return;\n            \n            // Handle test edition specially\n            const editionValue = newEdition === 'test' ? 'test' : parseInt(newEdition);\n            \n            console.log(`🔧 Changing active edition from ${this.currentActiveEdition} to ${editionValue}`);\n            \n            // Update local state\n            this.currentActiveEdition = editionValue;\n            \n            // Update global state\n            if (window.currentActiveEdition !== undefined) {\n                window.currentActiveEdition = editionValue;\n            }\n            \n            if (window.app) {\n                window.app.currentActiveEdition = editionValue;\n            }\n            \n            // Update settings in database\n            await this.db.collection('settings').doc('currentActiveEdition').set({\n                edition: editionValue,\n                lastUpdated: new Date()\n            });\n            \n            console.log(`✅ Active edition changed to ${editionValue}`);\n            \n            // Reset Active Week to 1 for the new edition\n            this.resetActiveWeekForNewEdition(editionValue);\n            \n            // Ensure selector remains interactive and looks like a dropdown\n            editionSelector.disabled = false;\n            editionSelector.style.pointerEvents = 'auto';\n            editionSelector.style.opacity = '1';\n            editionSelector.style.cursor = 'pointer';\n            editionSelector.style.appearance = 'auto';\n            editionSelector.style.webkitAppearance = 'auto';\n            editionSelector.style.mozAppearance = 'auto';\n            \n            // Remove any custom background image to avoid double arrows\n            editionSelector.style.backgroundImage = 'none';\n            editionSelector.style.backgroundRepeat = 'no-repeat';\n            editionSelector.style.backgroundPosition = 'right 8px center';\n            editionSelector.style.backgroundSize = '12px auto';\n            editionSelector.style.paddingRight = '8px';\n            \n            console.log('✅ Edition selector remains interactive after change');\n            \n            // Log selector state after change\n            console.log('🔍 Selector state after change:', {\n                disabled: editionSelector.disabled,\n                style: editionSelector.style.cssText,\n                className: editionSelector.className,\n                value: editionSelector.value\n            });\n            \n            // Set up periodic check to ensure selector stays interactive\n            this.ensureSelectorInteractive(editionSelector);\n            \n            // Refresh displays\n            this.refreshDisplaysAfterEditionChange();\n            \n        } catch (error) {\n            console.error('❌ Error saving edition change:', error);\n            alert('Error changing edition: ' + error.message);\n        }\n    }\n\n    // Refresh displays after edition change\n    refreshDisplaysAfterEditionChange() {\n        console.log('🔧 Refreshing displays after edition change...');\n        \n        // Update edition display\n        this.updateActiveEditionDisplay(this.currentActiveEdition);\n        \n        // Refresh any standings displays\n        const standingsContainer = document.querySelector('#standings-table-container');\n        if (standingsContainer && standingsContainer.innerHTML !== '') {\n            // Trigger standings refresh if standings are currently displayed\n            const asItStandsBtn = document.querySelector('#as-it-stands-btn');\n            if (asItStandsBtn) {\n                asItStandsBtn.click();\n            }\n        }\n        \n        // Refresh any other relevant displays\n        this.refreshOtherDisplays();\n        \n        console.log('✅ Displays refreshed after edition change');\n    }\n\n    // Update active edition display\n    updateActiveEditionDisplay(edition) {\n        // Update the quick edition selector to reflect the new edition\n        const quickEditionSelector = document.querySelector('#quick-edition-selector');\n        if (quickEditionSelector) {\n            quickEditionSelector.value = edition;\n        }\n        \n        // Update any other edition-related displays\n        const editionElements = document.querySelectorAll('[data-edition-display]');\n        editionElements.forEach(element => {\n            element.textContent = `Edition ${edition}`;\n        });\n        \n        console.log(`✅ Updated edition display to: ${edition}`);\n    }\n\n    // Refresh other displays\n    refreshOtherDisplays() {\n        // This method would refresh any other displays that depend on the current edition\n        // Implementation depends on your specific UI requirements\n        console.log('Refreshing other displays...');\n    }\n\n    // Initialize competition settings\n    initializeCompetitionSettings() {\n        if (this.competitionSettingsInitialized) {\n            console.log('Competition settings already initialized, skipping...');\n            return;\n        }\n        \n        console.log('Initializing competition settings...');\n        this.competitionSettingsInitialized = true;\n        \n        // Load current settings and update display\n        this.loadCurrentCompetitionSettings();\n        \n        // Initialize competition settings functionality\n        this.setupCompetitionSettingsUI();\n    }\n\n    // Load current competition settings\n    async loadCurrentCompetitionSettings() {\n        try {\n            console.log('Loading current competition settings...');\n            \n            const settingsDoc = await this.db.collection('settings').doc('currentCompetition').get();\n            \n            if (settingsDoc.exists) {\n                const settings = settingsDoc.data();\n                this.updateCompetitionSettingsDisplay(settings);\n                console.log('✅ Competition settings loaded');\n            } else {\n                console.log('No competition settings found, using defaults');\n                this.updateCompetitionSettingsDisplay(this.getDefaultCompetitionSettings());\n            }\n            \n        } catch (error) {\n            console.error('❌ Error loading competition settings:', error);\n            this.updateCompetitionSettingsDisplay(this.getDefaultCompetitionSettings());\n        }\n    }\n\n    // Get default competition settings\n    getDefaultCompetitionSettings() {\n        return {\n            tiebreak_enabled: false,\n            registration_open: false,\n            registration_start_date: null,\n            registration_end_date: null,\n            current_gameweek: 1,\n            total_gameweeks: 10,\n            lives_per_player: 2\n        };\n    }\n\n    // Update competition settings display\n    updateCompetitionSettingsDisplay(settings) {\n        // Update form fields with current settings\n        const tiebreakCheckbox = document.querySelector('#tiebreak-enabled');\n        if (tiebreakCheckbox) {\n            tiebreakCheckbox.checked = settings.tiebreak_enabled || false;\n        }\n        \n        const registrationCheckbox = document.querySelector('#registration-open');\n        if (registrationCheckbox) {\n            registrationCheckbox.checked = settings.registration_open || false;\n        }\n        \n        const startDateInput = document.querySelector('#registration-start-date');\n        if (startDateInput && settings.registration_start_date) {\n            startDateInput.value = settings.registration_start_date;\n        }\n        \n        const endDateInput = document.querySelector('#registration-end-date');\n        if (endDateInput && settings.registration_end_date) {\n            endDateInput.value = settings.registration_end_date;\n        }\n        \n        const currentGameweekInput = document.querySelector('#current-gameweek');\n        if (currentGameweekInput) {\n            currentGameweekInput.value = settings.current_gameweek || 1;\n        }\n        \n        const totalGameweeksInput = document.querySelector('#total-gameweeks');\n        if (totalGameweeksInput) {\n            totalGameweeksInput.value = settings.total_gameweeks || 10;\n        }\n        \n        const livesPerPlayerInput = document.querySelector('#lives-per-player');\n        if (livesPerPlayerInput) {\n            livesPerPlayerInput.value = settings.lives_per_player || 2;\n        }\n    }\n\n    // Setup competition settings UI\n    setupCompetitionSettingsUI() {\n        console.log('🔧 Setting up competition settings UI...');\n        \n        // Set up form submission\n        const form = document.querySelector('#competition-settings-form');\n        if (form) {\n            form.addEventListener('submit', (e) => this.saveCompetitionSettings(e));\n        }\n        \n        // Set up active gameweek selector\n        this.setupActiveGameweekSelector();\n        \n        // Set up quick edition selector\n        this.setupQuickEditionSelector();\n        \n        // Set up individual field change handlers\n        this.setupSettingsFieldHandlers();\n        \n\n        \n        console.log('✅ Competition settings UI setup complete');\n    }\n\n    // Setup settings field handlers\n    setupSettingsFieldHandlers() {\n        // Tiebreak enabled checkbox\n        const tiebreakCheckbox = document.querySelector('#tiebreak-enabled');\n        if (tiebreakCheckbox) {\n            tiebreakCheckbox.addEventListener('change', () => this.handleTiebreakChange());\n        }\n        \n        // Registration open checkbox\n        const registrationCheckbox = document.querySelector('#registration-open');\n        if (registrationCheckbox) {\n            registrationCheckbox.addEventListener('change', () => this.handleRegistrationChange());\n        }\n        \n        // Date inputs\n        const startDateInput = document.querySelector('#registration-start-date');\n        if (startDateInput) {\n            startDateInput.addEventListener('change', () => this.handleDateChange());\n        }\n        \n        const endDateInput = document.querySelector('#registration-end-date');\n        if (endDateInput) {\n            endDateInput.addEventListener('change', () => this.handleDateChange());\n        }\n    }\n    \n    \n    \n    // Reset Active Week when edition changes\n    resetActiveWeekForNewEdition(newEdition) {\n        console.log(`🔧 Resetting Active Week for new edition: ${newEdition}`);\n        \n        // Reset to week 1 for the new edition\n        this.currentActiveGameweek = '1';\n        \n        // Update global state\n        if (window.currentActiveGameweek !== undefined) {\n            window.currentActiveGameweek = '1';\n        }\n        \n        if (window.app) {\n            window.app.currentActiveGameweek = '1';\n        }\n        \n        // Update the Active Week selector\n        const activeGameweekSelector = document.querySelector('#active-gameweek-select');\n        if (activeGameweekSelector) {\n            activeGameweekSelector.value = '1';\n            console.log('✅ Reset Active Week selector to Week 1');\n        }\n        \n        // Update the Competition Settings current gameweek field\n        const currentGameweekInput = document.querySelector('#current-gameweek');\n        if (currentGameweekInput) {\n            currentGameweekInput.value = '1';\n            console.log('✅ Reset Competition Settings current gameweek to 1');\n        }\n        \n        // Update all other gameweek selectors to maintain consistency\n        this.setDefaultGameweekSelection();\n        \n        console.log(`✅ Active Week reset to 1 for edition: ${newEdition}`);\n    }\n    \n    // Handle tiebreak change\n    handleTiebreakChange() {\n        const tiebreakCheckbox = document.querySelector('#tiebreak-enabled');\n        if (tiebreakCheckbox) {\n            const enabled = tiebreakCheckbox.checked;\n            console.log(`Tiebreak ${enabled ? 'enabled' : 'disabled'}`);\n            \n            // Update UI elements that depend on tiebreak\n            this.updateTiebreakUI(enabled);\n        }\n    }\n\n    // Handle registration change\n    handleRegistrationChange() {\n        const registrationCheckbox = document.querySelector('#registration-open');\n        if (registrationCheckbox) {\n            const open = registrationCheckbox.checked;\n            console.log(`Registration ${open ? 'opened' : 'closed'}`);\n            \n            // Update UI elements that depend on registration status\n            this.updateRegistrationUI(open);\n        }\n    }\n\n    // Handle date change\n    handleDateChange() {\n        const startDateInput = document.querySelector('#registration-start-date');\n        const endDateInput = document.querySelector('#registration-end-date');\n        \n        if (startDateInput && endDateInput) {\n            const startDate = startDateInput.value;\n            const endDate = endDateInput.value;\n            \n            if (startDate && endDate) {\n                const start = new Date(startDate);\n                const end = new Date(endDate);\n                \n                if (start >= end) {\n                    alert('Registration start date must be before end date');\n                    endDateInput.value = '';\n                }\n            }\n        }\n    }\n\n    // Update tiebreak UI\n    updateTiebreakUI(enabled) {\n        const tiebreakElements = document.querySelectorAll('[data-tiebreak-dependent]');\n        tiebreakElements.forEach(element => {\n            if (enabled) {\n                element.style.display = '';\n                element.disabled = false;\n            } else {\n                element.style.display = 'none';\n                element.disabled = true;\n            }\n        });\n    }\n\n    // Update registration UI\n    updateRegistrationUI(open) {\n        const registrationElements = document.querySelectorAll('[data-registration-dependent]');\n        registrationElements.forEach(element => {\n            if (open) {\n                element.style.display = '';\n                element.disabled = false;\n            } else {\n                element.style.display = 'none';\n                element.disabled = true;\n            }\n        });\n    }\n\n    // Save competition settings\n    async saveCompetitionSettings(event) {\n        event.preventDefault();\n        \n        try {\n            console.log('🔧 Saving competition settings...');\n            \n            const settings = {\n                tiebreak_enabled: document.querySelector('#tiebreak-enabled')?.checked || false,\n                registration_open: document.querySelector('#registration-open')?.checked || false,\n                registration_start_date: document.querySelector('#registration-start-date')?.value || null,\n                registration_end_date: document.querySelector('#registration-end-date')?.value || null,\n                current_gameweek: parseInt(document.querySelector('#current-gameweek')?.value) || 1,\n                total_gameweeks: parseInt(document.querySelector('#total-gameweeks')?.value) || 10,\n                lives_per_player: parseInt(document.querySelector('#lives-per-player')?.value) || 2,\n                lastUpdated: new Date()\n            };\n            \n            // Validate settings\n            if (settings.current_gameweek < 1 || settings.current_gameweek > settings.total_gameweeks) {\n                alert('Current gameweek must be between 1 and total gameweeks');\n                return;\n            }\n            \n            if (settings.lives_per_player < 1 || settings.lives_per_player > 5) {\n                alert('Lives per player must be between 1 and 5');\n                return;\n            }\n            \n            // Save to database\n            await this.db.collection('settings').doc('currentCompetition').set(settings);\n            \n            console.log('✅ Competition settings saved successfully');\n            alert('Competition settings saved successfully!');\n            \n            // Update local state\n            this.currentActiveGameweek = settings.current_gameweek.toString();\n            \n            // Update global state\n            if (window.currentActiveGameweek !== undefined) {\n                window.currentActiveGameweek = settings.current_gameweek.toString();\n            }\n            \n            if (window.app) {\n                window.app.currentActiveGameweek = settings.current_gameweek.toString();\n            }\n            \n            // Refresh displays\n            this.refreshDisplaysAfterSettingsChange();\n            \n        } catch (error) {\n            console.error('❌ Error saving competition settings:', error);\n            alert('Error saving settings: ' + error.message);\n        }\n    }\n\n    // Refresh displays after settings change\n    refreshDisplaysAfterSettingsChange() {\n        console.log('🔧 Refreshing displays after settings change...');\n        \n        // Update gameweek display\n        this.updateGameweekDisplay();\n        \n        // Update other relevant displays\n        this.updateOtherDisplays();\n        \n        console.log('✅ Displays refreshed after settings change');\n    }\n\n    // Update gameweek display\n    updateGameweekDisplay() {\n        const gameweekDisplay = document.querySelector('#current-gameweek-display');\n        if (gameweekDisplay) {\n            gameweekDisplay.textContent = `Game Week ${this.currentActiveGameweek}`;\n        }\n        \n        // Update any other gameweek-related displays\n        const gameweekElements = document.querySelectorAll('[data-gameweek-display]');\n        gameweekElements.forEach(element => {\n            element.textContent = `Game Week ${this.currentActiveGameweek}`;\n        });\n    }\n\n    // Update other displays\n    updateOtherDisplays() {\n        // This method would update any other displays that depend on the settings\n        // Implementation depends on your specific UI requirements\n        console.log('Updating other displays...');\n    }\n\n    // Set default selection\n    setDefaultSelection() {\n        console.log('🔧 Setting default selection...');\n        \n        // Set default edition\n        this.currentActiveEdition = 1;\n        \n        // Set default gameweek\n        this.currentActiveGameweek = '1';\n        \n        // Update global state\n        if (window.currentActiveEdition !== undefined) {\n            window.currentActiveEdition = 1;\n        }\n        \n        if (window.currentActiveGameweek !== undefined) {\n            window.currentActiveGameweek = '1';\n        }\n        \n        if (window.app) {\n            window.app.currentActiveEdition = 1;\n            window.app.currentActiveGameweek = '1';\n        }\n        \n        console.log('✅ Default selection set');\n    }\n\n    // Ensure selector stays interactive\n    ensureSelectorInteractive(selector) {\n        if (!selector) return;\n        \n        // Check every 100ms for 2 seconds to ensure selector stays interactive\n        let checkCount = 0;\n        const maxChecks = 20;\n        \n        const checkInterval = setInterval(() => {\n            checkCount++;\n            \n            // Log detailed selector state\n            const computedStyle = window.getComputedStyle(selector);\n            const isDisabled = selector.disabled;\n            const pointerEvents = selector.style.pointerEvents || computedStyle.pointerEvents;\n            const opacity = selector.style.opacity || computedStyle.opacity;\n            const cursor = selector.style.cursor || computedStyle.cursor;\n            const display = selector.style.display || computedStyle.display;\n            const visibility = selector.style.visibility || computedStyle.visibility;\n            const appearance = selector.style.appearance || computedStyle.appearance;\n            const webkitAppearance = selector.style.webkitAppearance || computedStyle.webkitAppearance;\n            const mozAppearance = selector.style.mozAppearance || computedStyle.mozAppearance;\n            \n            console.log(`🔍 Selector state check ${checkCount}:`);\n            console.log(`  - disabled: ${isDisabled}`);\n            console.log(`  - pointerEvents: ${pointerEvents}`);\n            console.log(`  - opacity: ${opacity}`);\n            console.log(`  - cursor: ${cursor}`);\n            console.log(`  - display: ${display}`);\n            console.log(`  - visibility: ${visibility}`);\n            console.log(`  - appearance: ${appearance}`);\n            console.log(`  - webkitAppearance: ${webkitAppearance}`);\n            console.log(`  - mozAppearance: ${mozAppearance}`);\n            console.log(`  - style.cssText: ${selector.style.cssText}`);\n            console.log(`  - className: ${selector.className}`);\n            console.log(`  - tagName: ${selector.tagName}`);\n            console.log(`  - type: ${selector.type}`);\n            console.log(`  - computed classes: ${selector.classList.toString()}`);\n            console.log(`  - parent element: ${selector.parentElement?.tagName} ${selector.parentElement?.className}`);\n            \n            if (selector.disabled || selector.style.pointerEvents === 'none' || selector.style.opacity === '0') {\n                console.log(`🔄 Selector became non-interactive (check ${checkCount}), re-enabling...`);\n                selector.disabled = false;\n                selector.style.pointerEvents = 'auto';\n                selector.style.opacity = '1';\n                selector.style.cursor = 'pointer';\n            }\n            \n            // Force dropdown appearance\n            if (selector.style.appearance !== 'auto' || selector.style.webkitAppearance !== 'auto') {\n                console.log(`🔄 Forcing dropdown appearance (check ${checkCount})...`);\n                selector.style.appearance = 'auto';\n                selector.style.webkitAppearance = 'auto';\n                selector.style.mozAppearance = 'auto';\n                \n                // Remove any custom background image to avoid double arrows\n                selector.style.backgroundImage = 'none';\n                selector.style.backgroundRepeat = 'no-repeat';\n                selector.style.backgroundPosition = 'right 8px center';\n                selector.style.backgroundSize = '12px auto';\n                selector.style.paddingRight = '8px';\n            }\n            \n            // Check if selector is being styled as a button (which would cause visual locking)\n            const hasButtonLikeStyling = selector.style.backgroundColor === 'var(--alty-yellow)' ||\n                                       selector.style.textAlign === 'center' ||\n                                       selector.style.borderRadius === '8px' ||\n                                       selector.style.borderRadius === '12px' ||\n                                       selector.style.borderRadius === '16px' ||\n                                       selector.style.borderRadius === '20px' ||\n                                       selector.style.borderRadius === '24px';\n            \n            if (hasButtonLikeStyling) {\n                console.log(`⚠️ Selector has button-like styling (check ${checkCount}), resetting to dropdown...`);\n                                 console.log(`🔍 Button-like properties detected:`, {\n                     backgroundColor: selector.style.backgroundColor,\n                     textAlign: selector.style.textAlign,\n                     borderRadius: selector.style.borderRadius\n                 });\n                 // Reset to standard dropdown styling\n                 selector.style.borderRadius = '4px';\n                 selector.style.backgroundColor = 'white';\n                 selector.style.textAlign = 'left';\n                 selector.style.border = '1px solid #ccc';\n                 selector.style.padding = '4px 30px 4px 8px';\n                 selector.style.cursor = 'pointer';\n                 selector.style.appearance = 'auto';\n                 selector.style.webkitAppearance = 'auto';\n                 selector.style.mozAppearance = 'auto';\n            }\n            \n            // Check if element is still a select element\n            if (selector.tagName !== 'SELECT') {\n                console.log(`⚠️ Element is no longer a SELECT element! Current tagName: ${selector.tagName}`);\n                // Try to find the original select element\n                const originalSelector = document.querySelector('#quick-edition-selector');\n                if (originalSelector && originalSelector.tagName === 'SELECT') {\n                    console.log('🔄 Found original SELECT element, switching back...');\n                    selector = originalSelector;\n                }\n            }\n            \n            if (checkCount >= maxChecks) {\n                clearInterval(checkInterval);\n                console.log('✅ Selector interactive state monitoring completed');\n            }\n        }, 100);\n    }\n    \n    // Cleanup method\n    cleanup() {\n        console.log('🧹 Scheduling cleanup completed');\n    }\n}\n","// Audit Module\n// Handles audit trails, logging, and monitoring of admin actions\n\nexport class Audit {\n    constructor(db) {\n        this.db = db;\n        this.auditLogs = [];\n        this.monitoringActive = false;\n    }\n\n    // Initialize audit functionality\n    initializeAudit() {\n        console.log('🔧 Initializing audit functionality...');\n        \n        // Set up audit monitoring\n        this.setupAuditMonitoring();\n        \n        // Set up audit log viewing\n        this.setupAuditLogViewing();\n        \n        console.log('✅ Audit functionality initialized');\n    }\n\n    // Setup audit monitoring\n    setupAuditMonitoring() {\n        console.log('🔧 Setting up audit monitoring...');\n        \n        // Start monitoring admin actions\n        this.startActionMonitoring();\n        \n        // Set up periodic audit checks\n        this.setupPeriodicAuditChecks();\n        \n        console.log('✅ Audit monitoring setup complete');\n    }\n\n    // Start action monitoring\n    startActionMonitoring() {\n        this.monitoringActive = true;\n        console.log('✅ Action monitoring started');\n        \n        // Monitor DOM changes for admin actions\n        this.monitorDOMChanges();\n        \n        // Monitor Firebase operations\n        this.monitorFirebaseOperations();\n    }\n\n    // Monitor DOM changes\n    monitorDOMChanges() {\n        // This would monitor DOM changes to detect admin actions\n        // Implementation depends on your specific monitoring requirements\n        console.log('🔧 DOM change monitoring active');\n    }\n\n    // Monitor Firebase operations\n    monitorFirebaseOperations() {\n        // This would monitor Firebase operations for audit purposes\n        // Implementation depends on your specific monitoring requirements\n        console.log('🔧 Firebase operation monitoring active');\n    }\n\n    // Setup periodic audit checks\n    setupPeriodicAuditChecks() {\n        // Run audit checks every hour\n        setInterval(() => {\n            this.runAuditChecks();\n        }, 60 * 60 * 1000);\n        \n        console.log('✅ Periodic audit checks scheduled');\n    }\n\n    // Run audit checks\n    async runAuditChecks() {\n        try {\n            console.log('🔧 Running audit checks...');\n            \n            // Check for suspicious activity\n            await this.checkForSuspiciousActivity();\n            \n            // Check for unauthorized access\n            await this.checkForUnauthorizedAccess();\n            \n            // Generate audit report\n            await this.generateAuditReport();\n            \n            console.log('✅ Audit checks completed');\n            \n        } catch (error) {\n            console.error('❌ Error running audit checks:', error);\n        }\n    }\n\n    // Check for suspicious activity\n    async checkForSuspiciousActivity() {\n        try {\n            console.log('🔧 Checking for suspicious activity...');\n            \n            // Check for rapid-fire admin actions\n            const recentActions = await this.getRecentAdminActions(5); // Last 5 minutes\n            \n            if (recentActions.length > 10) {\n                console.warn('⚠️ High volume of admin actions detected');\n                await this.logSuspiciousActivity('High volume of admin actions', recentActions);\n            }\n            \n            // Check for unusual time patterns\n            const unusualTimeActions = await this.checkUnusualTimePatterns();\n            if (unusualTimeActions.length > 0) {\n                console.warn('⚠️ Unusual time pattern detected');\n                await this.logSuspiciousActivity('Unusual time pattern', unusualTimeActions);\n            }\n            \n            console.log('✅ Suspicious activity check completed');\n            \n        } catch (error) {\n            console.error('❌ Error checking for suspicious activity:', error);\n        }\n    }\n\n    // Check for unauthorized access\n    async checkForUnauthorizedAccess() {\n        try {\n            console.log('🔧 Checking for unauthorized access...');\n            \n            // Check for failed login attempts\n            const failedLogins = await this.getFailedLoginAttempts(10); // Last 10 minutes\n            \n            if (failedLogins.length > 5) {\n                console.warn('⚠️ Multiple failed login attempts detected');\n                await this.logSecurityEvent('Multiple failed login attempts', failedLogins);\n            }\n            \n            // Check for access from unusual locations\n            const unusualAccess = await this.checkUnusualAccessLocations();\n            if (unusualAccess.length > 0) {\n                console.warn('⚠️ Unusual access location detected');\n                await this.logSecurityEvent('Unusual access location', unusualAccess);\n            }\n            \n            console.log('✅ Unauthorized access check completed');\n            \n        } catch (error) {\n            console.error('❌ Error checking for unauthorized access:', error);\n        }\n    }\n\n    // Generate audit report\n    async generateAuditReport() {\n        try {\n            console.log('🔧 Generating audit report...');\n            \n            const report = {\n                timestamp: new Date(),\n                period: '1 hour',\n                totalActions: 0,\n                suspiciousActivities: 0,\n                securityEvents: 0,\n                recommendations: []\n            };\n            \n            // Get action counts\n            const actions = await this.getAdminActions(60); // Last hour\n            report.totalActions = actions.length;\n            \n            // Get suspicious activity count\n            const suspicious = await this.getSuspiciousActivities(60);\n            report.suspiciousActivities = suspicious.length;\n            \n            // Get security event count\n            const security = await this.getSecurityEvents(60);\n            report.securityEvents = security.length;\n            \n            // Generate recommendations\n            report.recommendations = this.generateRecommendations(report);\n            \n            // Save report\n            await this.saveAuditReport(report);\n            \n            console.log('✅ Audit report generated and saved');\n            \n        } catch (error) {\n            console.error('❌ Error generating audit report:', error);\n        }\n    }\n\n    // Generate recommendations\n    generateRecommendations(report) {\n        const recommendations = [];\n        \n        if (report.suspiciousActivities > 5) {\n            recommendations.push('Consider implementing rate limiting for admin actions');\n        }\n        \n        if (report.securityEvents > 3) {\n            recommendations.push('Review access control policies and consider additional security measures');\n        }\n        \n        if (report.totalActions > 100) {\n            recommendations.push('Monitor admin activity patterns for potential automation');\n        }\n        \n        return recommendations;\n    }\n\n    // Save audit report\n    async saveAuditReport(report) {\n        try {\n            await this.db.collection('auditReports').add({\n                ...report,\n                timestamp: new Date(),\n                generatedBy: 'system'\n            });\n            \n            console.log('✅ Audit report saved to database');\n            \n        } catch (error) {\n            console.error('❌ Error saving audit report:', error);\n        }\n    }\n\n    // Get recent admin actions\n    async getRecentAdminActions(minutes) {\n        try {\n            const cutoff = new Date(Date.now() - (minutes * 60 * 1000));\n            \n            const actionsSnapshot = await this.db.collection('auditLogs')\n                .where('timestamp', '>=', cutoff)\n                .orderBy('timestamp', 'desc')\n                .get();\n            \n            const actions = [];\n            actionsSnapshot.forEach(doc => {\n                actions.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            return actions;\n            \n        } catch (error) {\n            console.error('Error getting recent admin actions:', error);\n            return [];\n        }\n    }\n\n    // Get admin actions\n    async getAdminActions(minutes) {\n        try {\n            const cutoff = new Date(Date.now() - (minutes * 60 * 1000));\n            \n            const actionsSnapshot = await this.db.collection('auditLogs')\n                .where('timestamp', '>=', cutoff)\n                .orderBy('timestamp', 'desc')\n                .get();\n            \n            const actions = [];\n            actionsSnapshot.forEach(doc => {\n                actions.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            return actions;\n            \n        } catch (error) {\n            console.error('Error getting admin actions:', error);\n            return [];\n        }\n    }\n\n    // Get failed login attempts\n    async getFailedLoginAttempts(minutes) {\n        try {\n            const cutoff = new Date(Date.now() - (minutes * 60 * 1000));\n            \n            const loginsSnapshot = await this.db.collection('loginAttempts')\n                .where('timestamp', '>=', cutoff)\n                .where('success', '==', false)\n                .orderBy('timestamp', 'desc')\n                .get();\n            \n            const logins = [];\n            loginsSnapshot.forEach(doc => {\n                logins.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            return logins;\n            \n        } catch (error) {\n            console.error('Error getting failed login attempts:', error);\n            return [];\n        }\n    }\n\n    // Check unusual time patterns\n    async checkUnusualTimePatterns() {\n        try {\n            const now = new Date();\n            const hour = now.getHours();\n            \n            // Consider unusual if between 1 AM and 5 AM\n            if (hour >= 1 && hour <= 5) {\n                const actions = await this.getAdminActions(60);\n                return actions.filter(action => {\n                    const actionHour = action.timestamp?.toDate?.()?.getHours() || new Date(action.timestamp).getHours();\n                    return actionHour >= 1 && actionHour <= 5;\n                });\n            }\n            \n            return [];\n            \n        } catch (error) {\n            console.error('Error checking unusual time patterns:', error);\n            return [];\n        }\n    }\n\n    // Check unusual access locations\n    async checkUnusualAccessLocations() {\n        try {\n            // This would check for access from unusual IP addresses or locations\n            // Implementation depends on your location tracking system\n            return [];\n            \n        } catch (error) {\n            console.error('Error checking unusual access locations:', error);\n            return [];\n        }\n    }\n\n    // Get suspicious activities\n    async getSuspiciousActivities(minutes) {\n        try {\n            const cutoff = new Date(Date.now() - (minutes * 60 * 1000));\n            \n            const activitiesSnapshot = await this.db.collection('suspiciousActivities')\n                .where('timestamp', '>=', cutoff)\n                .orderBy('timestamp', 'desc')\n                .get();\n            \n            const activities = [];\n            activitiesSnapshot.forEach(doc => {\n                activities.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            return activities;\n            \n        } catch (error) {\n            console.error('Error getting suspicious activities:', error);\n            return [];\n        }\n    }\n\n    // Get security events\n    async getSecurityEvents(minutes) {\n        try {\n            const cutoff = new Date(Date.now() - (minutes * 60 * 1000));\n            \n            const eventsSnapshot = await this.db.collection('securityEvents')\n                .where('timestamp', '>=', cutoff)\n                .orderBy('timestamp', 'desc')\n                .get();\n            \n            const events = [];\n            eventsSnapshot.forEach(doc => {\n                events.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            return events;\n            \n        } catch (error) {\n            console.error('Error getting security events:', error);\n            return [];\n        }\n    }\n\n    // Log suspicious activity\n    async logSuspiciousActivity(type, details) {\n        try {\n            await this.db.collection('suspiciousActivities').add({\n                type,\n                details,\n                timestamp: new Date(),\n                severity: 'medium'\n            });\n            \n            console.log(`✅ Suspicious activity logged: ${type}`);\n            \n        } catch (error) {\n            console.error('❌ Error logging suspicious activity:', error);\n        }\n    }\n\n    // Log security event\n    async logSecurityEvent(type, details) {\n        try {\n            await this.db.collection('securityEvents').add({\n                type,\n                details,\n                timestamp: new Date(),\n                severity: 'high'\n            });\n            \n            console.log(`✅ Security event logged: ${type}`);\n            \n        } catch (error) {\n            console.error('❌ Error logging security event:', error);\n        }\n    }\n\n    // Log admin action\n    async logAdminAction(action, details, userId = null) {\n        try {\n            const logEntry = {\n                action,\n                details,\n                userId,\n                timestamp: new Date(),\n                ipAddress: await this.getClientIP(),\n                userAgent: navigator.userAgent\n            };\n            \n            await this.db.collection('auditLogs').add(logEntry);\n            \n            // Add to local cache\n            this.auditLogs.push(logEntry);\n            \n            // Keep only last 1000 logs in memory\n            if (this.auditLogs.length > 1000) {\n                this.auditLogs = this.auditLogs.slice(-1000);\n            }\n            \n            console.log(`✅ Admin action logged: ${action}`);\n            \n        } catch (error) {\n            console.error('❌ Error logging admin action:', error);\n        }\n    }\n\n    // Get client IP address\n    async getClientIP() {\n        try {\n            // This would get the client's IP address\n            // Implementation depends on your IP detection method\n            return 'unknown';\n            \n        } catch (error) {\n            console.error('Error getting client IP:', error);\n            return 'unknown';\n        }\n    }\n\n    // Setup audit log viewing\n    setupAuditLogViewing() {\n        console.log('🔧 Setting up audit log viewing...');\n        \n        // Set up audit log display\n        this.setupAuditLogDisplay();\n        \n        // Set up audit log export\n        this.setupAuditLogExport();\n        \n        console.log('✅ Audit log viewing setup complete');\n    }\n\n    // Setup audit log display\n    setupAuditLogDisplay() {\n        const auditLogContainer = document.querySelector('#audit-log-container');\n        if (!auditLogContainer) {\n            console.log('Audit log container not found');\n            return;\n        }\n        \n        // Set up refresh button\n        const refreshBtn = document.querySelector('#refresh-audit-logs');\n        if (refreshBtn) {\n            refreshBtn.addEventListener('click', () => this.refreshAuditLogs());\n        }\n        \n        // Set up filter controls\n        this.setupAuditLogFilters();\n        \n        // Load initial audit logs\n        this.loadAuditLogs();\n    }\n\n    // Setup audit log filters\n    setupAuditLogFilters() {\n        const filterContainer = document.querySelector('#audit-log-filters');\n        if (!filterContainer) return;\n        \n        // Action type filter\n        const actionFilter = document.querySelector('#action-type-filter');\n        if (actionFilter) {\n            actionFilter.addEventListener('change', () => this.filterAuditLogs());\n        }\n        \n        // Date range filter\n        const dateFilter = document.querySelector('#date-range-filter');\n        if (dateFilter) {\n            dateFilter.addEventListener('change', () => this.filterAuditLogs());\n        }\n        \n        // User filter\n        const userFilter = document.querySelector('#user-filter');\n        if (userFilter) {\n            userFilter.addEventListener('change', () => this.filterAuditLogs());\n        }\n    }\n\n    // Setup audit log export\n    setupAuditLogExport() {\n        const exportBtn = document.querySelector('#export-audit-logs');\n        if (exportBtn) {\n            exportBtn.addEventListener('click', () => this.exportAuditLogs());\n        }\n    }\n\n    // Load audit logs\n    async loadAuditLogs() {\n        try {\n            console.log('🔧 Loading audit logs...');\n            \n            const logsSnapshot = await this.db.collection('auditLogs')\n                .orderBy('timestamp', 'desc')\n                .limit(100)\n                .get();\n            \n            const logs = [];\n            logsSnapshot.forEach(doc => {\n                logs.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            this.displayAuditLogs(logs);\n            \n        } catch (error) {\n            console.error('❌ Error loading audit logs:', error);\n            alert('Error loading audit logs: ' + error.message);\n        }\n    }\n\n    // Display audit logs\n    displayAuditLogs(logs) {\n        const logContainer = document.querySelector('#audit-log-list');\n        if (!logContainer) return;\n        \n        if (!logs || logs.length === 0) {\n            logContainer.innerHTML = '<p>No audit logs found</p>';\n            return;\n        }\n        \n        let logsHtml = `\n            <table class=\"audit-log-table\">\n                <thead>\n                    <tr>\n                        <th>Timestamp</th>\n                        <th>Action</th>\n                        <th>User</th>\n                        <th>Details</th>\n                        <th>IP Address</th>\n                    </tr>\n                </thead>\n                <tbody>\n        `;\n        \n        logs.forEach(log => {\n            const timestamp = log.timestamp?.toDate?.() || log.timestamp || new Date();\n            const formattedTime = timestamp.toLocaleDateString('en-GB') + ' ' + timestamp.toLocaleTimeString();\n            \n            logsHtml += `\n                <tr>\n                    <td>${formattedTime}</td>\n                    <td>${log.action || 'Unknown'}</td>\n                    <td>${log.userId || 'System'}</td>\n                    <td>${log.details || 'No details'}</td>\n                    <td>${log.ipAddress || 'Unknown'}</td>\n                </tr>\n            `;\n        });\n        \n        logsHtml += `\n                </tbody>\n            </table>\n        `;\n        \n        logContainer.innerHTML = logsHtml;\n    }\n\n    // Refresh audit logs\n    async refreshAuditLogs() {\n        await this.loadAuditLogs();\n    }\n\n    // Filter audit logs\n    async filterAuditLogs() {\n        try {\n            const actionType = document.querySelector('#action-type-filter')?.value;\n            const dateRange = document.querySelector('#date-range-filter')?.value;\n            const userId = document.querySelector('#user-filter')?.value;\n            \n            let query = this.db.collection('auditLogs').orderBy('timestamp', 'desc');\n            \n            // Apply filters\n            if (actionType && actionType !== 'all') {\n                query = query.where('action', '==', actionType);\n            }\n            \n            if (userId && userId !== 'all') {\n                query = query.where('userId', '==', userId);\n            }\n            \n            // Apply date range\n            if (dateRange && dateRange !== 'all') {\n                const cutoff = this.getDateCutoff(dateRange);\n                query = query.where('timestamp', '>=', cutoff);\n            }\n            \n            const logsSnapshot = await query.limit(100).get();\n            \n            const logs = [];\n            logsSnapshot.forEach(doc => {\n                logs.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            this.displayAuditLogs(logs);\n            \n        } catch (error) {\n            console.error('❌ Error filtering audit logs:', error);\n        }\n    }\n\n    // Get date cutoff\n    getDateCutoff(range) {\n        const now = new Date();\n        \n        switch (range) {\n            case '1h':\n                return new Date(now.getTime() - (60 * 60 * 1000));\n            case '24h':\n                return new Date(now.getTime() - (24 * 60 * 60 * 1000));\n            case '7d':\n                return new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));\n            case '30d':\n                return new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000));\n            default:\n                return new Date(0);\n        }\n    }\n\n    // Export audit logs\n    async exportAuditLogs() {\n        try {\n            console.log('🔧 Exporting audit logs...');\n            \n            const logsSnapshot = await this.db.collection('auditLogs')\n                .orderBy('timestamp', 'desc')\n                .limit(1000)\n                .get();\n            \n            const logs = [];\n            logsSnapshot.forEach(doc => {\n                logs.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            \n            // Convert to CSV\n            const csv = this.logsToCSV(logs);\n            \n            // Create download link\n            const blob = new Blob([csv], { type: 'text/csv' });\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `audit-logs-${new Date().toISOString().split('T')[0]}.csv`;\n            a.click();\n            \n            window.URL.revokeObjectURL(url);\n            console.log('✅ Audit logs exported successfully');\n            \n        } catch (error) {\n            console.error('❌ Error exporting audit logs:', error);\n            alert('Error exporting audit logs: ' + error.message);\n        }\n    }\n\n    // Convert logs to CSV\n    logsToCSV(logs) {\n        const headers = ['Timestamp', 'Action', 'User ID', 'Details', 'IP Address', 'User Agent'];\n        const csv = [headers.join(',')];\n        \n        logs.forEach(log => {\n            const timestamp = log.timestamp?.toDate?.() || log.timestamp || new Date();\n            const formattedTime = timestamp.toLocaleDateString('en-GB') + ' ' + timestamp.toLocaleTimeString();\n            \n            const row = [\n                formattedTime,\n                log.action || '',\n                log.userId || '',\n                (log.details || '').replace(/\"/g, '\"\"'),\n                log.ipAddress || '',\n                (log.userAgent || '').replace(/\"/g, '\"\"')\n            ].map(field => `\"${field}\"`).join(',');\n            \n            csv.push(row);\n        });\n        \n        return csv.join('\\n');\n    }\n\n    // Stop monitoring\n    stopMonitoring() {\n        this.monitoringActive = false;\n        console.log('✅ Action monitoring stopped');\n    }\n\n    // Cleanup method\n    cleanup() {\n        console.log('🧹 Audit cleanup completed');\n        this.stopMonitoring();\n    }\n}\n","// Main Admin Manager\n// Orchestrates all admin functionality modules\n\nimport { UserManagement } from './userManagement.js';\nimport { TeamOperations } from './teamOperations.js';\nimport { Scheduling } from './scheduling.js';\nimport { Audit } from './audit.js';\n\nexport class AdminManager {\n    constructor(db, fixturesManager = null, scoresManager = null) {\n        this.db = db;\n        this.fixturesManager = fixturesManager;\n        this.scoresManager = scoresManager;\n        \n        // Initialize module instances\n        this.userManagement = new UserManagement(db);\n        this.teamOperations = new TeamOperations(db);\n        this.scheduling = new Scheduling(db);\n        this.audit = new Audit(db);\n        \n        // State tracking\n        this.adminManagementInitialized = false;\n        this.adminDashboardInitialized = false;\n        this.adminTabsInitialized = false;\n        this.fixtureManagementInitialized = false;\n        this.registrationManagementInitialized = false;\n        this.competitionSettingsInitialized = false;\n        this.eventListenersInitialized = false;\n        this.playerManagementEventListenersInitialized = false;\n        \n        // Current active edition and gameweek\n        this.currentActiveEdition = 1;\n        this.currentActiveGameweek = '1';\n        \n        // Method to update the current active edition\n        this.updateCurrentActiveEdition = (edition) => {\n            this.currentActiveEdition = edition;\n            this.userManagement.updateCurrentActiveEdition(edition);\n            this.teamOperations.updateCurrentActiveEdition(edition);\n            this.scheduling.updateCurrentActiveEdition(edition);\n            console.log(`AdminManager: Updated currentActiveEdition to ${edition}`);\n        };\n        \n        // Method to update the current active gameweek\n        this.updateCurrentActiveGameweek = (gameweek) => {\n            this.currentActiveGameweek = gameweek;\n            this.teamOperations.updateCurrentActiveGameweek(gameweek);\n            this.scheduling.updateCurrentActiveGameweek(gameweek);\n            console.log(`AdminManager: Updated currentActiveGameweek to ${gameweek}`);\n        };\n    }\n\n    // Initialize admin management\n    initializeAdminManagement() {\n        if (this.adminManagementInitialized) {\n            console.log('Admin management already initialized, skipping...');\n            return;\n        }\n        \n        console.log('Initializing admin management...');\n        this.adminManagementInitialized = true;\n        \n        // Event listeners are now set up in initializeAdminPage() to avoid duplicates\n    }\n\n    // Initialize admin page\n    initializeAdminPage() {\n        console.log('🚀 Initializing admin page...');\n        \n        // Initialize competition settings\n        this.scheduling.initializeCompetitionSettings();\n        \n        // Build admin dashboard to ensure all functions are exposed\n        this.buildAdminDashboard();\n        \n        // Set up event listeners\n        this.setupEventListeners();\n        \n        // Ensure Save Settings button is properly enabled and has event listener\n        this.ensureSaveSettingsButtonReady();\n        \n        // Initialize Football Web Pages API integration for admin interface\n        this.initializeAdminApiIntegration();\n        \n        // Initialize audit functionality\n        this.audit.initializeAudit();\n        \n        // Initialize Player Picks v2 functionality\n        this.initializePlayerPicksV2();\n        \n        console.log('✅ Admin page initialization complete');\n    }\n\n    // Initialize Player Picks v2 functionality\n    initializePlayerPicksV2() {\n        console.log('🚀 Initializing Player Picks v2...');\n        \n        // Get DOM elements\n        const editionSelect = document.querySelector('#picks-v2-edition-select');\n        const gameweekSelect = document.querySelector('#picks-v2-gameweek-select');\n        const refreshBtn = document.querySelector('#picks-v2-refresh-btn');\n        const exportBtn = document.querySelector('#picks-v2-export-btn');\n        \n        if (!editionSelect || !gameweekSelect || !refreshBtn) {\n            console.error('❌ Player Picks v2 elements not found');\n            return;\n        }\n        \n        // Set up event listeners\n        editionSelect.addEventListener('change', () => this.loadPlayerPicksV2());\n        gameweekSelect.addEventListener('change', () => this.loadPlayerPicksV2());\n        refreshBtn.addEventListener('click', () => this.loadPlayerPicksV2());\n        exportBtn.addEventListener('click', () => this.exportPlayerPicksV2());\n        \n        // Load initial data\n        this.loadPlayerPicksV2();\n        \n        console.log('✅ Player Picks v2 initialized');\n    }\n\n    // Load player picks for v2 tab\n    async loadPlayerPicksV2() {\n        console.log('🔄 Loading Player Picks v2...');\n        \n        const editionSelect = document.querySelector('#picks-v2-edition-select');\n        const gameweekSelect = document.querySelector('#picks-v2-gameweek-select');\n        const tableBody = document.querySelector('#picks-v2-table-body');\n        const loadingDiv = document.querySelector('#picks-v2-loading');\n        \n        if (!editionSelect || !gameweekSelect || !tableBody) {\n            console.error('❌ Player Picks v2 elements not found');\n            return;\n        }\n        \n        const selectedEdition = editionSelect.value;\n        const selectedGameweek = gameweekSelect.value;\n        \n        // Show loading\n        loadingDiv.style.display = 'block';\n        tableBody.innerHTML = '';\n        \n        try {\n            console.log(`🔍 Fetching picks for edition: ${selectedEdition}, gameweek: ${selectedGameweek}`);\n            \n            // Query picks collection\n            const picksQuery = this.db.collection('picks')\n                .where('edition', '==', selectedEdition)\n                .where('gameweek', '==', selectedGameweek)\n                .where('isActive', '==', true);\n            \n            const picksSnapshot = await picksQuery.get();\n            console.log(`✅ Found ${picksSnapshot.size} picks`);\n            \n\n            \n            // Update stats\n            this.updatePlayerPicksV2Stats(picksSnapshot);\n            \n            // Render table\n            this.renderPlayerPicksV2Table(picksSnapshot, tableBody);\n            \n        } catch (error) {\n            console.error('❌ Error loading Player Picks v2:', error);\n            tableBody.innerHTML = `\n                <tr>\n                    <td colspan=\"5\" class=\"text-center text-danger\">\n                        Error loading picks: ${error.message}\n                    </td>\n                </tr>\n            `;\n        } finally {\n            loadingDiv.style.display = 'none';\n        }\n    }\n\n    // Update Player Picks v2 statistics\n    updatePlayerPicksV2Stats(picksSnapshot) {\n        const totalCount = document.querySelector('#picks-v2-total-count');\n        const playersCount = document.querySelector('#picks-v2-players-count');\n        const teamsCount = document.querySelector('#picks-v2-teams-count');\n        \n        if (!totalCount || !playersCount || !teamsCount) return;\n        \n        const picks = picksSnapshot.docs.map(doc => doc.data());\n        const uniquePlayers = new Set(picks.map(pick => pick.userId)).size;\n        const uniqueTeams = new Set(picks.map(pick => pick.teamPicked)).size;\n        \n\n        \n        totalCount.textContent = picksSnapshot.size;\n        playersCount.textContent = uniquePlayers;\n        teamsCount.textContent = uniqueTeams;\n    }\n\n    // Render Player Picks v2 table\n    renderPlayerPicksV2Table(picksSnapshot, tableBody) {\n        if (picksSnapshot.empty) {\n            tableBody.innerHTML = `\n                <tr>\n                    <td colspan=\"5\" class=\"text-center text-muted\">\n                        No picks found for this edition and game week\n                    </td>\n                </tr>\n            `;\n            return;\n        }\n        \n        const rows = picksSnapshot.docs.map(doc => {\n            const pickData = doc.data();\n            return `\n                <tr>\n                    <td>\n                        <strong>${pickData.userFirstName} ${pickData.userSurname}</strong>\n                    </td>\n                    <td>\n                        <span class=\"team-badge\">${pickData.teamPicked}</span>\n                    </td>\n                    <td>${pickData.gameweek}</td>\n                    <td>${pickData.edition}</td>\n                    <td>\n                        <span class=\"status-badge status-active\">Active</span>\n                    </td>\n                </tr>\n            `;\n        }).join('');\n        \n        tableBody.innerHTML = rows;\n    }\n\n    // Export Player Picks v2 data\n    exportPlayerPicksV2() {\n        console.log('📤 Exporting Player Picks v2...');\n        \n        const editionSelect = document.querySelector('#picks-v2-edition-select');\n        const gameweekSelect = document.querySelector('#picks-v2-gameweek-select');\n        \n        if (!editionSelect || !gameweekSelect) return;\n        \n        const selectedEdition = editionSelect.value;\n        const selectedGameweek = gameweekSelect.value;\n        \n        // This would implement CSV export functionality\n        alert(`Export functionality for ${selectedEdition} - Game Week ${selectedGameweek} would be implemented here.`);\n    }\n\n    // Ensure Save Settings button is ready\n    ensureSaveSettingsButtonReady() {\n        console.log('🔧 Ensuring Save Settings button is ready...');\n        \n        const saveSettingsBtn = document.querySelector('#save-settings-btn');\n        if (!saveSettingsBtn) {\n            console.error('Save Settings button not found');\n            return;\n        }\n        \n        // Force enable the button\n        saveSettingsBtn.disabled = false;\n        saveSettingsBtn.style.pointerEvents = 'auto';\n        saveSettingsBtn.style.opacity = '1';\n        saveSettingsBtn.style.cursor = 'pointer';\n        saveSettingsBtn.style.backgroundColor = 'var(--alty-yellow)';\n        saveSettingsBtn.style.color = 'var(--dark-text)';\n        saveSettingsBtn.classList.remove('disabled');\n        saveSettingsBtn.removeAttribute('disabled');\n        \n        // Remove any existing event listeners and re-attach\n        saveSettingsBtn.removeEventListener('click', (e) => this.scheduling.saveCompetitionSettings(e));\n        saveSettingsBtn.addEventListener('click', (e) => this.scheduling.saveCompetitionSettings(e));\n        \n        console.log('✅ Save Settings button is ready and enabled');\n        console.log('Button disabled state:', saveSettingsBtn.disabled);\n        console.log('Button pointer-events:', saveSettingsBtn.style.pointerEvents);\n        console.log('Button opacity:', saveSettingsBtn.style.opacity);\n        console.log('Button cursor:', saveSettingsBtn.style.cursor);\n        console.log('Button background color:', saveSettingsBtn.style.backgroundColor);\n        console.log('Button text color:', saveSettingsBtn.style.textColor);\n        console.log('Button classes:', saveSettingsBtn.className);\n        console.log('Button attributes:', Array.from(saveSettingsBtn.attributes).map(attr => `${attr.name}=\"${attr.value}\"`));\n    }\n\n    // Setup event listeners\n    setupEventListeners() {\n        if (this.eventListenersInitialized) {\n            console.log('🔧 Event listeners already initialized, skipping...');\n            return;\n        }\n        \n        console.log('🔧 Setting up admin management event listeners...');\n        \n        // Set up settings event listeners\n        this.setupSettingsEventListeners();\n        \n        // Set up API suspension event listeners\n        this.setupApiSuspensionEventListeners();\n        \n        // Set up quick edition selector\n        this.scheduling.setupQuickEditionSelector();\n        \n        // Set up As It Stands functionality\n        this.teamOperations.setupAsItStandsFunctionality();\n        \n        // Set up admin tabs\n        this.setupAdminTabs();\n        \n        // Set up player management event listeners\n        this.setupPlayerManagementEventListeners();\n        \n        this.eventListenersInitialized = true;\n        console.log('✅ Admin management event listeners setup complete');\n    }\n\n    // Setup settings event listeners\n    setupSettingsEventListeners() {\n        console.log('🔧 Setting up settings event listeners...');\n        \n        // Set up save settings button monitoring\n        this.setupSaveSettingsButtonMonitoring();\n        \n        console.log('✅ Settings event listeners setup complete');\n    }\n\n    // Setup API suspension event listeners\n    setupApiSuspensionEventListeners() {\n        console.log('🔧 Setting up API suspension event listeners...');\n        \n        const apiSuspensionContainer = document.querySelector('#api-suspension-container');\n        if (!apiSuspensionContainer) {\n            console.log('API suspension container not found');\n            return;\n        }\n        \n        // Load current API suspension settings\n        this.loadApiSuspensionSettings();\n        \n        // Set up form submission\n        const form = document.querySelector('#api-suspension-form');\n        if (form) {\n            form.addEventListener('submit', (e) => this.saveApiSuspensionSettings(e));\n        }\n        \n        console.log('✅ API suspension event listeners setup complete');\n    }\n\n    // Setup save settings button monitoring\n    setupSaveSettingsButtonMonitoring() {\n        console.log('🔧 Setting up save settings button monitoring...');\n        \n        // Monitor for changes in competition settings form\n        const competitionForm = document.querySelector('#competition-settings-form');\n        if (competitionForm) {\n            const formElements = competitionForm.querySelectorAll('input, select, textarea');\n            \n            formElements.forEach(element => {\n                element.addEventListener('change', () => {\n                    this.enableSaveSettingsButton();\n                });\n                \n                element.addEventListener('input', () => {\n                    this.enableSaveSettingsButton();\n                });\n            });\n        }\n        \n        console.log('✅ Save settings button monitoring setup complete');\n    }\n\n    // Setup player management event listeners\n    setupPlayerManagementEventListeners() {\n        if (this.playerManagementEventListenersInitialized) {\n            console.log('🔧 Player management event listeners already initialized, skipping...');\n            return;\n        }\n        \n        console.log('🔧 Setting up player management event listeners...');\n        \n        // Player management stat cards\n        const totalRegistrationsCard = document.querySelector('#total-registrations-card');\n        const currentEditionCard = document.querySelector('#current-edition-card');\n        const archivedPlayersCard = document.querySelector('#archived-players-card');\n        \n        if (totalRegistrationsCard) {\n            // Remove existing event listeners to prevent duplicates\n            const newTotalCard = totalRegistrationsCard.cloneNode(true);\n            totalRegistrationsCard.parentNode.replaceChild(newTotalCard, totalRegistrationsCard);\n            \n            newTotalCard.addEventListener('click', () => {\n                this.userManagement.showPlayerManagement('total');\n            });\n        }\n        \n        if (currentEditionCard) {\n            // Remove existing event listeners to prevent duplicates\n            const newCurrentCard = currentEditionCard.cloneNode(true);\n            currentEditionCard.parentNode.replaceChild(newCurrentCard, currentEditionCard);\n            \n            newCurrentCard.addEventListener('click', () => {\n                this.userManagement.showPlayerManagement('current');\n            });\n        }\n        \n        if (archivedPlayersCard) {\n            // Remove existing event listeners to prevent duplicates\n            const newArchivedCard = archivedPlayersCard.cloneNode(true);\n            archivedPlayersCard.parentNode.replaceChild(newArchivedCard, archivedPlayersCard);\n            \n            newArchivedCard.addEventListener('click', () => {\n                this.userManagement.showPlayerManagement('archived');\n            });\n        }\n        \n        // Check orphaned accounts button\n        const checkOrphanedAccountsBtn = document.querySelector('#check-orphaned-accounts');\n        if (checkOrphanedAccountsBtn) {\n            checkOrphanedAccountsBtn.addEventListener('click', () => {\n                this.userManagement.checkOrphanedAccounts();\n            });\n        }\n        \n        // Firebase Auth help button\n        const firebaseAuthHelpBtn = document.querySelector('#firebase-auth-help');\n        if (firebaseAuthHelpBtn) {\n            firebaseAuthHelpBtn.addEventListener('click', () => {\n                this.userManagement.showFirebaseAuthDeletionInstructions();\n            });\n        }\n        \n        // Close player management modal\n        const closePlayerManagementBtn = document.querySelector('#close-player-management');\n        if (closePlayerManagementBtn) {\n            closePlayerManagementBtn.addEventListener('click', () => {\n                this.userManagement.closePlayerManagement();\n            });\n        }\n        \n        // Search players button\n        const searchPlayersBtn = document.querySelector('#search-players-btn');\n        if (searchPlayersBtn) {\n            searchPlayersBtn.addEventListener('click', () => {\n                this.userManagement.searchPlayers();\n            });\n        }\n        \n        // Close player edit modal\n        const closePlayerEditBtn = document.querySelector('#close-player-edit');\n        if (closePlayerEditBtn) {\n            closePlayerEditBtn.addEventListener('click', () => {\n                this.userManagement.closePlayerEdit();\n            });\n        }\n        \n        // Cancel player edit button\n        const cancelPlayerEditBtn = document.querySelector('#cancel-player-edit');\n        if (cancelPlayerEditBtn) {\n            cancelPlayerEditBtn.addEventListener('click', () => {\n                this.userManagement.closePlayerEdit();\n            });\n        }\n        \n        // Reload page button\n        const reloadPageBtn = document.querySelector('#reload-page-btn');\n        if (reloadPageBtn) {\n            reloadPageBtn.addEventListener('click', () => {\n                location.reload();\n            });\n        }\n        \n        this.playerManagementEventListenersInitialized = true;\n        console.log('✅ Player management event listeners setup complete');\n    }\n\n    // Enable save settings button\n    enableSaveSettingsButton() {\n        const saveSettingsBtn = document.querySelector('#save-settings-btn');\n        if (saveSettingsBtn) {\n            saveSettingsBtn.disabled = false;\n            saveSettingsBtn.style.opacity = '1';\n            saveSettingsBtn.style.cursor = 'pointer';\n            saveSettingsBtn.classList.remove('disabled');\n        }\n    }\n\n    // Load API suspension settings\n    async loadApiSuspensionSettings() {\n        try {\n            console.log('Loading API suspension settings...');\n            \n            const settingsDoc = await this.db.collection('settings').doc('apiSuspension').get();\n            \n            if (settingsDoc.exists) {\n                const settings = settingsDoc.data();\n                this.updateApiSuspensionDisplay(settings);\n                console.log('✅ API suspension settings loaded');\n            } else {\n                console.log('No API suspension settings found, using defaults');\n                this.updateApiSuspensionDisplay({\n                    footballWebPages: false,\n                    theSportsDb: false,\n                    reason: '',\n                    suspendedUntil: null\n                });\n            }\n            \n        } catch (error) {\n            console.error('❌ Error loading API suspension settings:', error);\n            this.updateApiSuspensionDisplay({\n                footballWebPages: false,\n                theSportsDb: false,\n                reason: '',\n                suspendedUntil: null\n            });\n        }\n    }\n\n    // Update API suspension display\n    updateApiSuspensionDisplay(settings) {\n        const footballWebPagesCheckbox = document.querySelector('#football-web-pages-suspended');\n        if (footballWebPagesCheckbox) {\n            footballWebPagesCheckbox.checked = settings.footballWebPages || false;\n        }\n        \n        const theSportsDbCheckbox = document.querySelector('#the-sports-db-suspended');\n        if (theSportsDbCheckbox) {\n            theSportsDbCheckbox.checked = settings.theSportsDb || false;\n        }\n        \n        const reasonInput = document.querySelector('#api-suspension-reason');\n        if (reasonInput) {\n            reasonInput.value = settings.reason || '';\n        }\n        \n        const suspendedUntilInput = document.querySelector('#api-suspended-until');\n        if (suspendedUntilInput && settings.suspendedUntil) {\n            suspendedUntilInput.value = settings.suspendedUntil;\n        }\n    }\n\n    // Save API suspension settings\n    async saveApiSuspensionSettings(event) {\n        if (event) event.preventDefault();\n        \n        try {\n            console.log('🔧 Saving API suspension settings...');\n            \n            const settings = {\n                footballWebPages: document.querySelector('#football-web-pages-suspended')?.checked || false,\n                theSportsDb: document.querySelector('#the-sports-db-suspended')?.checked || false,\n                reason: document.querySelector('#api-suspension-reason')?.value || '',\n                suspendedUntil: document.querySelector('#api-suspended-until')?.value || null,\n                lastUpdated: new Date()\n            };\n            \n            // Save to database\n            await this.db.collection('settings').doc('apiSuspension').set(settings);\n            \n            console.log('✅ API suspension settings saved successfully');\n            alert('API suspension settings saved successfully!');\n            \n            // Log the action\n            await this.audit.logAdminAction('API suspension settings updated', settings);\n            \n        } catch (error) {\n            console.error('❌ Error saving API suspension settings:', error);\n            alert('Error saving API suspension settings: ' + error.message);\n        }\n    }\n\n    // Check if API is suspended\n    async isApiSuspended(apiName) {\n        try {\n            const settingsDoc = await this.db.collection('settings').doc('apiSuspension').get();\n            \n            if (settingsDoc.exists) {\n                const settings = settingsDoc.data();\n                \n                if (apiName === 'footballWebPages' && settings.footballWebPages) {\n                    return this.checkSuspensionExpiry(settings.suspendedUntil);\n                }\n                \n                if (apiName === 'theSportsDb' && settings.theSportsDb) {\n                    return this.checkSuspensionExpiry(settings.suspendedUntil);\n                }\n            }\n            \n            return false;\n            \n        } catch (error) {\n            console.error('Error checking API suspension status:', error);\n            return false;\n        }\n    }\n\n    // Check suspension expiry\n    checkSuspensionExpiry(suspendedUntil) {\n        if (!suspendedUntil) return true; // Suspended indefinitely\n        \n        const expiryDate = new Date(suspendedUntil);\n        const now = new Date();\n        \n        return now < expiryDate;\n    }\n\n    // Build admin dashboard\n    buildAdminDashboard(settings) {\n        console.log('🔧 Building admin dashboard...');\n        \n        const adminDashboard = document.querySelector('#admin-dashboard');\n        if (!adminDashboard) {\n            console.error('Admin dashboard container not found');\n            return;\n        }\n        \n        // Build dashboard content\n        this.buildDashboardContent(adminDashboard, settings);\n        \n        console.log('✅ Admin dashboard built successfully');\n    }\n\n    // Build dashboard content\n    buildDashboardContent(container, settings) {\n        // This method would build the actual dashboard content\n        // Implementation depends on your specific dashboard requirements\n        console.log('Building dashboard content...');\n    }\n\n    // Load registration data for the registration tab\n    async loadRegistrationData() {\n        try {\n            console.log('🔧 Loading registration data...');\n            \n            // Initialize registration settings functionality for admin page\n            this.initializeRegistrationSettingsForAdmin();\n            \n            // Load registration settings\n            if (window.registrationManager) {\n                await window.registrationManager.loadRegistrationSettings();\n            }\n            \n            // Load registration statistics\n            await this.loadRegistrationStatistics();\n            \n            // Load all editions overview (this populates the \"All Editions Registration Status\" cards)\n            if (window.registrationManager) {\n                await window.registrationManager.loadAllEditionsOverview();\n            }\n            \n            console.log('✅ Registration data loaded successfully');\n            \n        } catch (error) {\n            console.error('❌ Error loading registration data:', error);\n        }\n    }\n\n    // Initialize registration settings functionality for admin page\n    initializeRegistrationSettingsForAdmin() {\n        try {\n            console.log('🔧 Initializing registration settings for admin page...');\n            \n            // Set up save registration settings button\n            const saveRegistrationSettingsBtn = document.querySelector('#save-registration-settings');\n            if (saveRegistrationSettingsBtn) {\n                // Remove existing event listeners to avoid duplicates\n                const newBtn = saveRegistrationSettingsBtn.cloneNode(true);\n                saveRegistrationSettingsBtn.parentNode.replaceChild(newBtn, saveRegistrationSettingsBtn);\n                \n                // Add new event listener\n                newBtn.addEventListener('click', async () => {\n                    if (window.registrationManager) {\n                        await window.registrationManager.saveRegistrationSettings();\n                        \n                        // Also refresh the overview from admin management to ensure UI updates\n                        if (window.registrationManager) {\n                            await window.registrationManager.loadAllEditionsOverview();\n                        }\n                        \n                        // Refresh registration statistics as well\n                        await this.loadRegistrationStatistics();\n                    }\n                });\n                \n                console.log('✅ Save registration settings button initialized');\n            }\n            \n            // Set up refresh registration stats button\n            const refreshStatsBtn = document.querySelector('#refresh-registration-stats');\n            if (refreshStatsBtn) {\n                // Remove existing event listeners to avoid duplicates\n                const newRefreshBtn = refreshStatsBtn.cloneNode(true);\n                refreshStatsBtn.parentNode.replaceChild(newRefreshBtn, refreshStatsBtn);\n                \n                // Add new event listener\n                newRefreshBtn.addEventListener('click', async () => {\n                    await this.refreshRegistrationStatistics();\n                });\n                \n                console.log('✅ Refresh registration stats button initialized');\n            }\n            \n            console.log('✅ Registration settings for admin page initialized successfully');\n            \n        } catch (error) {\n            console.error('❌ Error initializing registration settings for admin page:', error);\n        }\n    }\n\n    // Refresh registration statistics when edition changes\n    async refreshRegistrationStatistics() {\n        try {\n            console.log('🔄 Refreshing registration statistics for edition change...');\n            await this.loadRegistrationStatistics();\n        } catch (error) {\n            console.error('❌ Error refreshing registration statistics:', error);\n        }\n    }\n\n    // Load registration statistics\n    async loadRegistrationStatistics() {\n        try {\n            console.log('🔧 Loading registration statistics...');\n            \n            // Get all users and filter in memory to avoid composite index requirements\n            const allUsersQuery = await this.db.collection('users').get();\n            const currentEdition = this.getCurrentActiveEdition();\n            \n            let totalActive = 0;\n            let currentEditionCount = 0;\n            let archivedCount = 0;\n            \n            console.log(`🔍 Checking ${allUsersQuery.size} users for active status...`);\n            \n            allUsersQuery.forEach(doc => {\n                const userData = doc.data();\n                const userName = userData.displayName || userData.firstName || 'Unknown';\n                \n                // Check if user is active (has no status field or status is 'active' - case-insensitive)\n                const status = userData.status;\n                const isActive = !status || status.toLowerCase() === 'active';\n                \n                console.log(`👤 ${userName}: status=\"${status}\", isActive=${isActive}`);\n                \n                if (isActive) {\n                    totalActive++;\n                    \n                    // Check if user is registered for current edition using the registrations object\n                    if (userData.registrations && userData.registrations[`edition${currentEdition}`]) {\n                        currentEditionCount++;\n                        console.log(`✅ ${userName} counted for current edition (${currentEdition})`);\n                    } else {\n                        console.log(`⏭️ ${userName} active but not registered for current edition (${currentEdition})`);\n                    }\n                } else if (userData.status === 'archived') {\n                    archivedCount++;\n                    console.log(`📦 ${userName} is archived`);\n                } else {\n                    console.log(`❌ ${userName} not active (status: \"${status}\")`);\n                }\n            });\n            \n            // Update the UI\n            const totalRegistrationsElement = document.querySelector('#total-registrations');\n            const currentEditionElement = document.querySelector('#current-edition-registrations');\n            const archivedElement = document.querySelector('#archived-players-count');\n            \n            if (totalRegistrationsElement) {\n                totalRegistrationsElement.textContent = totalActive;\n            }\n            \n            if (currentEditionElement) {\n                currentEditionElement.textContent = currentEditionCount;\n            }\n            \n            if (archivedElement) {\n                archivedElement.textContent = archivedCount;\n            }\n            \n            console.log(`✅ Registration statistics loaded: ${totalActive} active, ${currentEditionCount} current edition (${currentEdition}), ${archivedCount} archived`);\n            \n        } catch (error) {\n            console.error('❌ Error loading registration statistics:', error);\n        }\n    }\n\n    // Get current active edition\n    getCurrentActiveEdition() {\n        // Get the current active edition from the edition selector\n        const editionSelector = document.querySelector('#edition-selector');\n        if (editionSelector) {\n            return editionSelector.value;\n        }\n        \n        // Fallback to checking window.currentActiveEdition\n        if (window.currentActiveEdition) {\n            return window.currentActiveEdition;\n        }\n        \n        // Default fallback\n        return 1;\n    }\n\n    // Setup admin tabs\n    setupAdminTabs() {\n        console.log('🔧 Setting up admin tabs...');\n        \n        const tabContainer = document.querySelector('#admin-tabs');\n        if (!tabContainer) {\n            console.log('Admin tabs container not found');\n            return;\n        }\n        \n        // Set up tab switching\n        this.setupTabSwitching();\n        \n        // Set up tab content\n        this.setupTabContent();\n        \n        console.log('✅ Admin tabs setup complete');\n    }\n\n    // Setup tab switching\n    setupTabSwitching() {\n        const tabs = document.querySelectorAll('.admin-tab');\n        const tabContents = document.querySelectorAll('.admin-tab-content');\n        \n        tabs.forEach(tab => {\n            tab.addEventListener('click', () => {\n                const targetTab = tab.getAttribute('data-tab');\n                this.switchTab(targetTab);\n            });\n        });\n    }\n\n    // Switch tab\n    switchTab(targetTab) {\n        // Hide all tab contents\n        const tabContents = document.querySelectorAll('.admin-tab-content');\n        tabContents.forEach(content => {\n            content.style.display = 'none';\n        });\n        \n        // Remove active class from all tabs\n        const tabs = document.querySelectorAll('.admin-tab');\n        tabs.forEach(tab => {\n            tab.classList.remove('active');\n        });\n        \n        // Show target tab content\n        const targetContent = document.querySelector(`#${targetTab}-content`);\n        if (targetContent) {\n            targetContent.style.display = 'block';\n        }\n        \n        // Add active class to target tab\n        const targetTabElement = document.querySelector(`[data-tab=\"${targetTab}\"]`);\n        if (targetTabElement) {\n            targetTabElement.classList.add('active');\n        }\n        \n        // Load tab-specific content\n        this.loadTabContent(targetTab);\n    }\n\n    // Load tab content\n    loadTabContent(tabName) {\n        switch (tabName) {\n            case 'user-management':\n                this.userManagement.showPlayerManagement('total');\n                break;\n            case 'team-operations':\n                this.teamOperations.loadStandings();\n                break;\n            case 'scheduling':\n                this.scheduling.loadCurrentCompetitionSettings();\n                break;\n            case 'audit':\n                this.audit.loadAuditLogs();\n                break;\n            default:\n                console.log(`No specific content for tab: ${tabName}`);\n        }\n    }\n\n    // Setup tab content\n    setupTabContent() {\n        // Initialize default tab\n        this.switchTab('user-management');\n    }\n\n    // Initialize fixture management\n    initializeFixtureManagement() {\n        if (this.fixtureManagementInitialized) {\n            console.log('Fixture management already initialized, skipping...');\n            return;\n        }\n        \n        console.log('Initializing fixture management...');\n        this.fixtureManagementInitialized = true;\n        \n        // Set up fixture management event listeners\n        this.setupFixtureManagementEventListeners();\n        \n        console.log('✅ Fixture management initialized');\n    }\n\n    // Setup fixture management event listeners\n    setupFixtureManagementEventListeners() {\n        console.log('🔧 Setting up fixture management event listeners...');\n        \n        const addFixtureBtn = document.querySelector('#add-fixture-btn');\n        if (addFixtureBtn) {\n            addFixtureBtn.addEventListener('click', () => this.fixturesManager.addFixtureRow());\n        }\n        \n        const saveFixturesBtn = document.querySelector('#save-fixtures-btn');\n        if (saveFixturesBtn) {\n            saveFixturesBtn.addEventListener('click', () => this.fixturesManager.saveFixtures());\n        }\n        \n        const checkFixturesBtn = document.querySelector('#check-fixtures-btn');\n        if (checkFixturesBtn) {\n            checkFixturesBtn.addEventListener('click', () => this.fixturesManager.checkFixtures());\n        }\n        \n        console.log('✅ Fixture management event listeners setup complete');\n    }\n\n    // Initialize registration management\n    initializeRegistrationManagement() {\n        if (this.registrationManagementInitialized) {\n            console.log('Registration management already initialized, skipping...');\n            return;\n        }\n        \n        console.log('Initializing registration management...');\n        this.registrationManagementInitialized = true;\n        \n        // Set up registration management functionality\n        this.setupRegistrationManagement();\n        \n        console.log('✅ Registration management initialized');\n    }\n\n    // Setup registration management\n    setupRegistrationManagement() {\n        console.log('🔧 Setting up registration management...');\n        \n        // This would set up registration management functionality\n        // Implementation depends on your specific requirements\n        \n        console.log('✅ Registration management setup complete');\n    }\n\n    // Initialize admin API integration\n    initializeAdminApiIntegration() {\n        console.log('🔧 Initializing admin API integration...');\n        \n        // Set up import button event listeners\n        this.setupImportButtonEventListeners();\n        \n        console.log('✅ Admin API integration initialized');\n    }\n\n    // Setup import button event listeners\n    setupImportButtonEventListeners() {\n        console.log('🔧 Setting up import button event listeners...');\n        \n        // Select All Fixtures button\n        const selectAllBtn = document.querySelector('#select-all-fixtures-btn');\n        if (selectAllBtn) {\n            selectAllBtn.addEventListener('click', () => {\n                if (window.app && window.app.apiManager && window.app.apiManager.footballWebPagesAPI) {\n                    window.app.apiManager.footballWebPagesAPI.selectAllFixtures();\n                }\n            });\n            console.log('✅ Select All Fixtures button event listener attached');\n        }\n        \n        // Deselect All Fixtures button\n        const deselectAllBtn = document.querySelector('#deselect-all-fixtures-btn');\n        if (deselectAllBtn) {\n            deselectAllBtn.addEventListener('click', () => {\n                if (window.app && window.app.apiManager && window.app.apiManager.footballWebPagesAPI) {\n                    window.app.apiManager.footballWebPagesAPI.deselectAllFixtures();\n                }\n            });\n            console.log('✅ Deselect All Fixtures button event listener attached');\n        }\n        \n        // Import Selected Fixtures button\n        const importSelectedBtn = document.querySelector('#import-selected-fixtures-btn');\n        if (importSelectedBtn) {\n            importSelectedBtn.addEventListener('click', async () => {\n                if (window.app && window.app.apiManager && window.app.apiManager.footballWebPagesAPI) {\n                    await window.app.apiManager.footballWebPagesAPI.importSelectedFixtures();\n                }\n            });\n            console.log('✅ Import Selected Fixtures button event listener attached');\n        }\n        \n        console.log('✅ Import button event listeners setup complete');\n    }\n\n    // Initialize enhanced vidiprinter\n    initializeEnhancedVidiprinter() {\n        console.log('🔧 Initializing enhanced vidiprinter...');\n        \n        // This would initialize the enhanced vidiprinter functionality\n        // Implementation depends on your specific vidiprinter requirements\n        \n        console.log('✅ Enhanced vidiprinter initialized');\n    }\n\n    // Start enhanced vidiprinter\n    async startEnhancedVidiprinter() {\n        console.log('🔧 Starting enhanced vidiprinter...');\n        \n        // This would start the enhanced vidiprinter\n        // Implementation depends on your specific vidiprinter requirements\n        \n        console.log('✅ Enhanced vidiprinter started');\n    }\n\n    // Stop enhanced vidiprinter\n    stopEnhancedVidiprinter() {\n        console.log('🔧 Stopping enhanced vidiprinter...');\n        \n        // This would stop the enhanced vidiprinter\n        // Implementation depends on your specific vidiprinter requirements\n        \n        console.log('✅ Enhanced vidiprinter stopped');\n    }\n\n    // Clear enhanced vidiprinter feed\n    clearEnhancedVidiprinterFeed() {\n        console.log('🔧 Clearing enhanced vidiprinter feed...');\n        \n        // This would clear the enhanced vidiprinter feed\n        // Implementation depends on your specific vidiprinter requirements\n        \n        console.log('✅ Enhanced vidiprinter feed cleared');\n    }\n\n    // Reset test edition players to 2 lives\n    async resetTestLives() {\n        if (!confirm('Are you sure you want to reset all TEST EDITION players to 2 lives? This will only affect players in the test edition.')) return;\n        \n        try {\n            const statusElement = document.querySelector('#reset-status');\n            if (statusElement) {\n                statusElement.textContent = 'Resetting test players...';\n                statusElement.style.color = '#007bff';\n            }\n            \n            const usersSnapshot = await this.db.collection('users').get();\n            const batch = this.db.batch();\n            let resetCount = 0;\n            let skippedCount = 0;\n            \n            console.log('🔍 Checking users for test edition reset...');\n            \n            usersSnapshot.forEach(doc => {\n                const userData = doc.data();\n                const userName = userData.displayName || userData.firstName || 'Unknown';\n                \n                // Check if user is registered for test edition using the registrations object\n                const isTestEditionPlayer = userData.registrations && userData.registrations.editiontest;\n                \n                console.log(`👤 ${userName}: status=${userData.status}, registrations.editiontest=${isTestEditionPlayer}`);\n                \n                if (userData.status === 'active' && isTestEditionPlayer) {\n                    batch.update(doc.ref, {\n                        lives: 2,\n                        lastUpdated: new Date()\n                    });\n                    resetCount++;\n                    console.log(`✅ Will reset ${userName} to 2 lives`);\n                } else {\n                    skippedCount++;\n                    console.log(`⏭️ Skipping ${userName} - not active or not in test edition`);\n                }\n            });\n            \n            await batch.commit();\n            \n            if (statusElement) {\n                statusElement.textContent = `✅ Reset ${resetCount} test edition players to 2 lives successfully! (Skipped ${skippedCount})`;\n                statusElement.style.color = '#28a745';\n            } else {\n                alert(`✅ Reset ${resetCount} test edition players to 2 lives successfully! (Skipped ${skippedCount})`);\n            }\n            \n            console.log(`✅ Reset ${resetCount} test edition players to 2 lives (Skipped ${skippedCount})`);\n            \n        } catch (error) {\n            console.error('Error resetting test player lives:', error);\n            const statusElement = document.querySelector('#reset-status');\n            if (statusElement) {\n                statusElement.textContent = `❌ Error: ${error.message}`;\n                statusElement.style.color = '#dc3545';\n            } else {\n                alert('Error resetting test player lives: ' + error.message);\n            }\n        }\n    }\n\n    // Cleanup method\n    cleanup() {\n        console.log('🧹 AdminManager cleanup started');\n        \n        // Cleanup all modules\n        this.userManagement.cleanup();\n        this.teamOperations.cleanup();\n        this.scheduling.cleanup();\n        this.audit.cleanup();\n        \n        console.log('🧹 AdminManager cleanup completed');\n    }\n}\n","// Database Module\n// Handles all database operations, user management, settings management, and real-time updates\n\nclass DatabaseManager {\n    constructor() {\n        this.db = null;\n        this.databaseInitialized = false;\n        this.adminSessionMonitoring = null;\n        this.adminTokenRefresh = null;\n        this.realTimeScoreUpdates = null;\n        this.enhancedVidiprinter = null;\n        this.deadlineChecker = null;\n    }\n\n    // Initialize database manager\n    initializeDatabaseManager() {\n        if (this.databaseInitialized) {\n            console.log('Database manager already initialized, skipping...');\n            return;\n        }\n        \n        console.log('Initializing database manager...');\n        this.databaseInitialized = true;\n        \n        this.initializeDatabase();\n        this.setupEventListeners();\n    }\n\n    // Initialize database reference\n    initializeDatabase() {\n        if (window.db) {\n            this.db = window.db;\n            console.log('Database reference initialized');\n        } else {\n            console.warn('Database not available yet, retrying in 100ms');\n            setTimeout(() => this.initializeDatabase(), 100);\n        }\n    }\n\n    // Check and initialize database when Firebase becomes available\n    checkAndInitializeDatabase() {\n        if (window.db && !this.db) {\n            this.db = window.db;\n            console.log('Database reference initialized in checkAndInitializeDatabase');\n        }\n    }\n\n    // Set up event listeners\n    setupEventListeners() {\n        // Initialize database when DOM is ready\n        document.addEventListener('DOMContentLoaded', () => this.initializeDatabase());\n        \n        // Set up periodic database check for admin page\n        if (window.location.pathname.endsWith('admin.html')) {\n            setInterval(() => this.checkAndInitializeDatabase(), 100);\n        }\n    }\n\n    // Database Operations - User Management\n    async getUserDocument(userId) {\n        try {\n            const doc = await this.db.collection('users').doc(userId).get();\n            return doc;\n        } catch (error) {\n            console.error('Error getting user document:', error);\n            throw error;\n        }\n    }\n\n    async updateUserDocument(userId, updateData) {\n        try {\n            await this.db.collection('users').doc(userId).update(updateData);\n            console.log('User document updated successfully');\n        } catch (error) {\n            console.error('Error updating user document:', error);\n            throw error;\n        }\n    }\n\n    async saveEditionPreference(edition, userId) {\n        try {\n            await this.db.collection('users').doc(userId).update({\n                defaultEdition: edition,\n                lastUpdated: new Date()\n            });\n            console.log('Edition preference saved successfully');\n        } catch (error) {\n            console.error('Error saving edition preference:', error);\n            throw error;\n        }\n    }\n\n    async saveUserDefaultEdition(userId) {\n        try {\n            await this.db.collection('users').doc(userId).update({\n                defaultEdition: window.currentActiveEdition,\n                lastUpdated: new Date()\n            });\n            console.log('User default edition saved successfully');\n        } catch (error) {\n            console.error('Error saving user default edition:', error);\n            throw error;\n        }\n    }\n\n    async getAllUsers() {\n        try {\n            const usersSnapshot = await this.db.collection('users').get();\n            return usersSnapshot;\n        } catch (error) {\n            console.error('Error getting all users:', error);\n            throw error;\n        }\n    }\n\n    async getUsersByEdition(edition) {\n        try {\n            const usersSnapshot = await this.db.collection('users').get();\n            const users = [];\n            usersSnapshot.forEach(doc => {\n                const userData = doc.data();\n                if (userData.registrations && userData.registrations[edition]) {\n                    users.push({ id: doc.id, ...userData });\n                }\n            });\n            return users;\n        } catch (error) {\n            console.error('Error getting users by edition:', error);\n            throw error;\n        }\n    }\n\n    async getUsersOrderedByName(limit = 20) {\n        try {\n            const usersSnapshot = await this.db.collection('users').orderBy('firstName').limit(limit).get();\n            return usersSnapshot;\n        } catch (error) {\n            console.error('Error getting users ordered by name:', error);\n            throw error;\n        }\n    }\n\n    // Database Operations - Settings Management\n    async getSettingsDocument(docId = 'currentCompetition') {\n        try {\n            const settingsDoc = await this.db.collection('settings').doc(docId).get();\n            return settingsDoc;\n        } catch (error) {\n            console.error('Error getting settings document:', error);\n            throw error;\n        }\n    }\n\n    async setSettingsDocument(docId, settings) {\n        try {\n            await this.db.collection('settings').doc(docId).set(settings);\n            console.log('Settings document set successfully');\n        } catch (error) {\n            console.error('Error setting settings document:', error);\n            throw error;\n        }\n    }\n\n    async getRegistrationSettings(edition) {\n        try {\n            const settingsDoc = await this.db.collection('settings').doc(`registration_edition_${edition}`).get();\n            return settingsDoc;\n        } catch (error) {\n            console.error('Error getting registration settings:', error);\n            throw error;\n        }\n    }\n\n    async setRegistrationSettings(edition, settings) {\n        try {\n            await this.db.collection('settings').doc(`registration_edition_${edition}`).set(settings);\n            console.log('Registration settings saved successfully');\n        } catch (error) {\n            console.error('Error saving registration settings:', error);\n            throw error;\n        }\n    }\n\n    // Database Operations - Fixtures & Scores\n    async getFixturesDocument(gameweekKey) {\n        try {\n            const fixturesDoc = await this.db.collection('fixtures').doc(gameweekKey).get();\n            return fixturesDoc;\n        } catch (error) {\n            console.error('Error getting fixtures document:', error);\n            throw error;\n        }\n    }\n\n    async updateFixturesDocument(gameweekKey, fixturesData) {\n        try {\n            await this.db.collection('fixtures').doc(gameweekKey).set(fixturesData);\n            console.log('Fixtures document updated successfully');\n        } catch (error) {\n            console.error('Error updating fixtures document:', error);\n            throw error;\n        }\n    }\n\n    async deleteFixturesDocument(gameweekKey) {\n        try {\n            await this.db.collection('fixtures').doc(gameweekKey).delete();\n            console.log('Fixtures document deleted successfully');\n        } catch (error) {\n            console.error('Error deleting fixtures document:', error);\n            throw error;\n        }\n    }\n\n    // Database Operations - Picks Management\n    async updateUserPick(userId, gameweekKey, pickData) {\n        try {\n            const updateData = {};\n            updateData[`picks.${gameweekKey}`] = pickData;\n            \n            await this.db.collection('users').doc(userId).update(updateData);\n            console.log('User pick updated successfully');\n        } catch (error) {\n            console.error('Error updating user pick:', error);\n            throw error;\n        }\n    }\n\n    async removeUserPick(userId, gameweekKey) {\n        try {\n            const updateData = {};\n            updateData[`picks.${gameweekKey}`] = this.db.FieldValue.delete();\n            \n            await this.db.collection('users').doc(userId).update(updateData);\n            console.log('User pick removed successfully');\n        } catch (error) {\n            console.error('Error removing user pick:', error);\n            throw error;\n        }\n    }\n\n    async getUserPicks(userId) {\n        try {\n            const userDoc = await this.db.collection('users').doc(userId).get();\n            if (userDoc.exists) {\n                return userDoc.data().picks || {};\n            }\n            return {};\n        } catch (error) {\n            console.error('Error getting user picks:', error);\n            throw error;\n        }\n    }\n\n    // Database Operations - Registration Management\n    async updateUserRegistration(userId, edition, registrationData) {\n        try {\n            const updateData = {};\n            updateData[`registrations.${edition}`] = registrationData;\n            \n            await this.db.collection('users').doc(userId).update(updateData);\n            console.log('User registration updated successfully');\n        } catch (error) {\n            console.error('Error updating user registration:', error);\n            throw error;\n        }\n    }\n\n    async removeUserRegistration(userId, edition) {\n        try {\n            const updateData = {};\n            updateData[`registrations.${edition}`] = this.db.FieldValue.delete();\n            \n            await this.db.collection('users').doc(userId).update(updateData);\n            console.log('User registration removed successfully');\n        } catch (error) {\n            console.error('Error removing user registration:', error);\n            throw error;\n        }\n    }\n\n    // Database Operations - Admin Management\n    async checkAdminStatus(userId) {\n        try {\n            const adminDoc = await this.db.collection('users').doc(userId).get();\n            if (adminDoc.exists && adminDoc.data().isAdmin === true) {\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Error checking admin status:', error);\n            throw error;\n        }\n    }\n\n    async updateUserStatus(userId, status, additionalData = {}) {\n        try {\n            const updateData = {\n                status: status,\n                lastUpdated: new Date(),\n                ...additionalData\n            };\n            \n            if (status === 'archived') {\n                updateData.archivedDate = new Date();\n            } else if (status === 'active') {\n                updateData.unarchivedDate = new Date();\n            }\n            \n            await this.db.collection('users').doc(userId).update(updateData);\n            console.log('User status updated successfully');\n        } catch (error) {\n            console.error('Error updating user status:', error);\n            throw error;\n        }\n    }\n\n    async resetAllPlayerLives() {\n        try {\n            const usersSnapshot = await this.db.collection('users').get();\n            const batch = this.db.batch();\n            \n            usersSnapshot.forEach(doc => {\n                const userData = doc.data();\n                if (userData.status === 'active') {\n                    batch.update(doc.ref, {\n                        lives: 2,\n                        lastUpdated: new Date()\n                    });\n                }\n            });\n            \n            await batch.commit();\n            console.log('All player lives reset successfully');\n        } catch (error) {\n            console.error('Error resetting player lives:', error);\n            throw error;\n        }\n    }\n\n    // Database Operations - Batch Operations\n    async batchUpdateUsers(updates) {\n        try {\n            const batch = this.db.batch();\n            \n            updates.forEach(update => {\n                const userRef = this.db.collection('users').doc(update.userId);\n                batch.update(userRef, update.data);\n            });\n            \n            await batch.commit();\n            console.log('Batch update completed successfully');\n        } catch (error) {\n            console.error('Error in batch update:', error);\n            throw error;\n        }\n    }\n\n    async batchDeleteUsers(userIds) {\n        try {\n            const batch = this.db.batch();\n            \n            userIds.forEach(userId => {\n                const userRef = this.db.collection('users').doc(userId);\n                batch.delete(userRef);\n            });\n            \n            await batch.commit();\n            console.log('Batch delete completed successfully');\n        } catch (error) {\n            console.error('Error in batch delete:', error);\n            throw error;\n        }\n    }\n\n    // Real-time Updates & Monitoring\n    startRealTimeScoreUpdates(gameweek, callback) {\n        try {\n            if (this.realTimeScoreUpdates) {\n                this.stopRealTimeScoreUpdates();\n            }\n            \n            const gameweekKey = `gw${gameweek}`;\n            this.realTimeScoreUpdates = this.db.collection('fixtures').doc(gameweekKey)\n                .onSnapshot((doc) => {\n                    if (doc.exists) {\n                        const fixtures = doc.data();\n                        if (callback && typeof callback === 'function') {\n                            callback(fixtures);\n                        }\n                    }\n                }, (error) => {\n                    console.error('Real-time score updates error:', error);\n                });\n            \n            console.log('Real-time score updates started for gameweek:', gameweek);\n        } catch (error) {\n            console.error('Error starting real-time score updates:', error);\n        }\n    }\n\n    stopRealTimeScoreUpdates() {\n        try {\n            if (this.realTimeScoreUpdates) {\n                this.realTimeScoreUpdates();\n                this.realTimeScoreUpdates = null;\n                console.log('Real-time score updates stopped');\n            }\n        } catch (error) {\n            console.error('Error stopping real-time score updates:', error);\n        }\n    }\n\n    startEnhancedVidiprinter(callback) {\n        try {\n            if (this.enhancedVidiprinter) {\n                this.stopEnhancedVidiprinter();\n            }\n            \n            this.enhancedVidiprinter = this.db.collection('vidiprinter')\n                .orderBy('timestamp', 'desc')\n                .limit(100)\n                .onSnapshot((snapshot) => {\n                    const events = [];\n                    snapshot.forEach(doc => {\n                        events.push({ id: doc.id, ...doc.data() });\n                    });\n                    \n                    if (callback && typeof callback === 'function') {\n                        callback(events);\n                    }\n                }, (error) => {\n                    console.error('Enhanced vidiprinter error:', error);\n                });\n            \n            console.log('Enhanced vidiprinter started');\n        } catch (error) {\n            console.error('Error starting enhanced vidiprinter:', error);\n        }\n    }\n\n    stopEnhancedVidiprinter() {\n        try {\n            if (this.enhancedVidiprinter) {\n                this.enhancedVidiprinter();\n                this.enhancedVidiprinter = null;\n                console.log('Enhanced vidiprinter stopped');\n            }\n        } catch (error) {\n            console.error('Error stopping enhanced vidiprinter:', error);\n        }\n    }\n\n    startDeadlineChecker(callback) {\n        try {\n            if (this.deadlineChecker) {\n                clearInterval(this.deadlineChecker);\n            }\n            \n            this.deadlineChecker = setInterval(() => {\n                if (callback && typeof callback === 'function') {\n                    callback();\n                }\n            }, 60000); // Check every minute\n            \n            console.log('Deadline checker started');\n        } catch (error) {\n            console.error('Error starting deadline checker:', error);\n        }\n    }\n\n    stopDeadlineChecker() {\n        try {\n            if (this.deadlineChecker) {\n                clearInterval(this.deadlineChecker);\n                this.deadlineChecker = null;\n                console.log('Deadline checker stopped');\n            }\n        } catch (error) {\n            console.error('Error stopping deadline checker:', error);\n        }\n    }\n\n    // Admin Session Management\n    startAdminSessionMonitoring(userId, timeoutCallback, warningCallback) {\n        try {\n            if (this.adminSessionMonitoring) {\n                this.stopAdminSessionMonitoring();\n            }\n            \n            let lastActivity = Date.now();\n            const sessionTimeout = 30 * 60 * 1000; // 30 minutes\n            const warningTime = 25 * 60 * 1000; // 25 minutes\n            \n            const updateActivity = () => {\n                lastActivity = Date.now();\n            };\n            \n            // Update activity on user interaction\n            document.addEventListener('click', updateActivity);\n            document.addEventListener('keypress', updateActivity);\n            document.addEventListener('scroll', updateActivity);\n            \n            this.adminSessionMonitoring = setInterval(() => {\n                const timeSinceActivity = Date.now() - lastActivity;\n                \n                if (timeSinceActivity >= sessionTimeout) {\n                    this.stopAdminSessionMonitoring();\n                    if (timeoutCallback && typeof timeoutCallback === 'function') {\n                        timeoutCallback();\n                    }\n                } else if (timeSinceActivity >= warningTime && timeSinceActivity < sessionTimeout) {\n                    if (warningCallback && typeof warningCallback === 'function') {\n                        warningCallback();\n                    }\n                }\n            }, 1000); // Check every second\n            \n            console.log('Admin session monitoring started');\n        } catch (error) {\n            console.error('Error starting admin session monitoring:', error);\n        }\n    }\n\n    stopAdminSessionMonitoring() {\n        try {\n            if (this.adminSessionMonitoring) {\n                clearInterval(this.adminSessionMonitoring);\n                this.adminSessionMonitoring = null;\n                \n                // Remove event listeners\n                document.removeEventListener('click', this.updateActivity);\n                document.removeEventListener('keypress', this.updateActivity);\n                document.removeEventListener('scroll', this.updateActivity);\n                \n                console.log('Admin session monitoring stopped');\n            }\n        } catch (error) {\n            console.error('Error stopping admin session monitoring:', error);\n        }\n    }\n\n    startAdminTokenRefresh(user, refreshCallback) {\n        try {\n            if (this.adminTokenRefresh) {\n                this.stopAdminTokenRefresh();\n            }\n            \n            this.adminTokenRefresh = setInterval(async () => {\n                try {\n                    await user.getIdToken(true);\n                    if (refreshCallback && typeof refreshCallback === 'function') {\n                        refreshCallback();\n                    }\n                } catch (error) {\n                    console.error('Error refreshing admin token:', error);\n                }\n            }, 10 * 60 * 1000); // Refresh every 10 minutes\n            \n            console.log('Admin token refresh started');\n        } catch (error) {\n            console.error('Error starting admin token refresh:', error);\n        }\n    }\n\n    stopAdminTokenRefresh() {\n        try {\n            if (this.adminTokenRefresh) {\n                clearInterval(this.adminTokenRefresh);\n                this.adminTokenRefresh = null;\n                console.log('Admin token refresh stopped');\n            }\n        } catch (error) {\n            console.error('Error stopping admin token refresh:', error);\n        }\n    }\n\n    // Utility Functions\n    getDatabaseReference() {\n        return this.db;\n    }\n\n    isDatabaseInitialized() {\n        return this.db !== null;\n    }\n\n    // Cleanup method\n    cleanup() {\n        this.stopRealTimeScoreUpdates();\n        this.stopEnhancedVidiprinter();\n        this.stopDeadlineChecker();\n        this.stopAdminSessionMonitoring();\n        this.stopAdminTokenRefresh();\n        \n        this.databaseInitialized = false;\n        console.log('Database Manager cleanup completed');\n    }\n}\n\n// Export the DatabaseManager class\nexport default DatabaseManager;\n","// Football Web Pages API Module\n// Handles all Football Web Pages API integrations, including fixtures, scores, and vidiprinter data\n\nexport class FootballWebPagesAPI {\n    constructor(db = null, currentActiveEdition = 1) {\n        this.db = db;\n        this.currentActiveEdition = currentActiveEdition;\n        this.config = null;\n        this.initializeConfiguration();\n    }\n\n    // Initialize configuration\n    initializeConfiguration() {\n        this.loadConfiguration();\n    }\n\n    // Load configuration from global variables\n    loadConfiguration() {\n        // First try to access from window object (most reliable)\n        if (typeof window !== 'undefined' && window.FOOTBALL_WEBPAGES_CONFIG) {\n            this.config = window.FOOTBALL_WEBPAGES_CONFIG;\n            console.log('✅ Football Web Pages API configuration loaded from window object');\n            console.log('API Key available:', !!this.config.RAPIDAPI_KEY);\n            return true;\n        }\n        \n        // Try to access from ENV_CONFIG (new environment configuration)\n        if (typeof window !== 'undefined' && window.ENV_CONFIG && window.ENV_CONFIG.RAPIDAPI_KEY) {\n            this.config = {\n                BASE_URL: 'https://football-web-pages1.p.rapidapi.com',\n                RAPIDAPI_KEY: window.ENV_CONFIG.RAPIDAPI_KEY,\n                RAPIDAPI_HOST: 'football-web-pages1.p.rapidapi.com'\n            };\n            console.log('✅ Football Web Pages API configuration loaded from ENV_CONFIG');\n            console.log('API Key available:', !!this.config.RAPIDAPI_KEY);\n            return true;\n        }\n        \n        // Fallback: try to access as global variable (may not work in strict mode)\n        if (typeof FOOTBALL_WEBPAGES_CONFIG !== 'undefined') {\n            this.config = FOOTBALL_WEBPAGES_CONFIG;\n            console.log('✅ Football Web Pages API configuration loaded from global variable');\n            console.log('API Key available:', !!this.config.RAPIDAPI_KEY);\n            return true;\n        }\n        \n        console.warn('⚠️ Football Web Pages API configuration not found - will retry during initialization');\n        this.retryLoadConfiguration();\n        return false;\n    }\n\n    // Retry loading configuration with exponential backoff\n    retryLoadConfiguration() {\n        let attempts = 0;\n        const maxAttempts = 10;\n        \n        const attemptLoad = () => {\n            attempts++;\n            console.log(`🔄 Attempt ${attempts}/${maxAttempts} to load Football Web Pages API configuration...`);\n            \n            // First try window object (most reliable)\n            if (typeof window !== 'undefined' && window.FOOTBALL_WEBPAGES_CONFIG) {\n                this.config = window.FOOTBALL_WEBPAGES_CONFIG;\n                console.log('✅ Football Web Pages API configuration loaded from window object on retry attempt', attempts);\n                return;\n            }\n            \n            // Try to access from ENV_CONFIG (new environment configuration)\n            if (typeof window !== 'undefined' && window.ENV_CONFIG && window.ENV_CONFIG.RAPIDAPI_KEY) {\n                this.config = {\n                    BASE_URL: 'https://football-web-pages1.p.rapidapi.com',\n                    RAPIDAPI_KEY: window.ENV_CONFIG.RAPIDAPI_KEY,\n                    RAPIDAPI_HOST: 'football-web-pages1.p.rapidapi.com'\n                };\n                console.log('✅ Football Web Pages API configuration loaded from ENV_CONFIG on retry attempt', attempts);\n                return;\n            }\n            \n            // Fallback: try global variable\n            if (typeof FOOTBALL_WEBPAGES_CONFIG !== 'undefined') {\n                this.config = FOOTBALL_WEBPAGES_CONFIG;\n                console.log('✅ Football Web Pages API configuration loaded on retry attempt', attempts);\n                return;\n            }\n            \n            if (attempts < maxAttempts) {\n                setTimeout(attemptLoad, 1000);\n            } else {\n                console.error('❌ Failed to load Football Web Pages API configuration after', maxAttempts, 'attempts');\n                console.error('This will prevent API functions from working properly');\n                \n                // Try one more time after a longer delay\n                setTimeout(() => {\n                    if (typeof window !== 'undefined' && window.FOOTBALL_WEBPAGES_CONFIG) {\n                        this.config = window.FOOTBALL_WEBPAGES_CONFIG;\n                        console.log('✅ Football Web Pages API configuration loaded from window object on final attempt');\n                    } else if (typeof FOOTBALL_WEBPAGES_CONFIG !== 'undefined') {\n                        this.config = FOOTBALL_WEBPAGES_CONFIG;\n                        console.log('✅ Football Web Pages API configuration loaded on final attempt');\n                    }\n                }, 2000);\n            }\n        };\n        \n        setTimeout(attemptLoad, 100);\n    }\n\n    // Check if configuration is available\n    isConfigurationLoaded() {\n        return this.config !== null;\n    }\n\n    // Get configuration safely\n    getConfiguration() {\n        if (!this.isConfigurationLoaded()) {\n            this.retryLoadConfiguration();\n            return null;\n        }\n        return this.config;\n    }\n\n    // Test API connection\n    async testApiConnection() {\n        console.log('🧪 Testing Football Web Pages API connection...');\n        \n        const statusElement = document.querySelector('#api-key-status');\n        const testBtn = document.querySelector('#test-api-connection');\n        \n        if (!statusElement || !testBtn) {\n            console.error('Required elements not found for API test');\n            return;\n        }\n        \n        // Try to load configuration if not already loaded\n        if (!this.config) {\n            this.loadConfiguration();\n            \n            // Wait a bit for the config to load\n            if (!this.config) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n            }\n        }\n        \n        // Check if we have the API configuration\n        if (!this.config || !this.config.RAPIDAPI_KEY) {\n            statusElement.textContent = 'API key not configured - please refresh the page';\n            statusElement.className = 'status-indicator error';\n            console.error('API configuration not available for test connection');\n            return;\n        }\n\n        try {\n            statusElement.textContent = 'Testing connection...';\n            statusElement.className = 'status-indicator loading';\n            testBtn.disabled = true;\n\n            const response = await fetch('https://football-web-pages1.p.rapidapi.com/fixtures-results.json?comp=5&round=0&team=0', {\n                method: 'GET',\n                headers: {\n                    'X-RapidAPI-Key': this.config.RAPIDAPI_KEY,\n                    'X-RapidAPI-Host': this.config.RAPIDAPI_HOST\n                }\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                statusElement.textContent = `✅ API connection successful! Received ${data.length || 0} items`;\n                statusElement.className = 'status-indicator success';\n                console.log('✅ API test successful:', data);\n            } else {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error('❌ API test failed:', error);\n            statusElement.textContent = `❌ API connection failed: ${error.message}`;\n            statusElement.className = 'status-indicator error';\n        } finally {\n            testBtn.disabled = false;\n        }\n    }\n\n    // Check API key status\n    checkApiKeyStatus() {\n        const statusElement = document.querySelector('#api-key-status');\n        if (!statusElement) {\n            console.log('❌ API key status element not found');\n            return;\n        }\n        \n        console.log('🔍 checkApiKeyStatus called');\n        console.log('🔍 Status element found:', statusElement);\n        console.log('🔍 Current config:', this.config);\n        console.log('🔍 FOOTBALL_WEBPAGES_CONFIG available:', typeof FOOTBALL_WEBPAGES_CONFIG !== 'undefined');\n        \n        // Try to load configuration if not already loaded\n        if (!this.config && typeof FOOTBALL_WEBPAGES_CONFIG !== 'undefined') {\n            this.config = FOOTBALL_WEBPAGES_CONFIG;\n            console.log('✅ Football Web Pages API configuration loaded during status check');\n        }\n        \n        // Get buttons that should be enabled/disabled based on API key status\n        const testApiBtn = document.querySelector('#test-api-connection');\n        const fetchDateRangeBtn = document.querySelector('#fetch-date-range-fixtures-btn');\n        const fetchAllBtn = document.querySelector('#fetch-all-fixtures-btn');\n        \n        console.log('🔍 Button elements found:', {\n            testApiBtn: !!testApiBtn,\n            fetchDateRangeBtn: !!fetchDateRangeBtn,\n            fetchAllBtn: !!fetchAllBtn\n        });\n        \n        if (testApiBtn) console.log('🔍 Test API button disabled state:', testApiBtn.disabled);\n        if (fetchDateRangeBtn) console.log('🔍 Fetch Date Range button disabled state:', fetchDateRangeBtn.disabled);\n        if (fetchAllBtn) console.log('🔍 Fetch All button disabled state:', fetchAllBtn.disabled);\n        \n        if (this.config && this.config.RAPIDAPI_KEY) {\n            statusElement.textContent = 'API key configured';\n            statusElement.className = 'status-indicator success';\n            console.log('API key status: Configured successfully');\n            console.log('🔑 API Key value:', this.config.RAPIDAPI_KEY.substring(0, 10) + '...');\n            \n            // Enable fetch buttons\n            if (testApiBtn) {\n                testApiBtn.disabled = false;\n                console.log('✅ Test API button enabled');\n            }\n            if (fetchDateRangeBtn) {\n                fetchDateRangeBtn.disabled = false;\n                console.log('✅ Fetch Date Range button enabled');\n            }\n            if (fetchAllBtn) {\n                fetchAllBtn.disabled = false;\n                console.log('✅ Fetch All button enabled');\n            }\n            \n            // Import buttons should remain disabled until fixtures are fetched\n            this.updateImportButtonStates(false);\n        } else {\n            statusElement.textContent = 'API key missing - retrying...';\n            statusElement.className = 'status-indicator error';\n            console.log('API key status: Missing - configuration may still be loading');\n            console.log('🔍 Current config state:', this.config);\n            \n            // Disable fetch buttons\n            if (testApiBtn) {\n                testApiBtn.disabled = true;\n                console.log('❌ Test API button disabled');\n            }\n            if (fetchDateRangeBtn) {\n                fetchDateRangeBtn.disabled = true;\n                console.log('❌ Fetch Date Range button disabled');\n            }\n            if (fetchAllBtn) {\n                fetchAllBtn.disabled = true;\n                console.log('❌ Fetch All button disabled');\n            }\n            \n            // Disable import buttons when API key is missing\n            this.updateImportButtonStates(false);\n            \n            // If we don't have the config yet, try to load it again\n            if (!this.config) {\n                this.retryLoadConfiguration();\n            }\n        }\n    }\n\n    // Fetch fixtures by date range\n    async fetchDateRangeFixtures() {\n        console.log('📅 Fetching fixtures by date range...');\n        \n        const startDate = document.querySelector('#start-date').value;\n        const endDate = document.querySelector('#end-date').value;\n        const statusElement = document.querySelector('#fetch-status');\n        const league = document.querySelector('#date-range-league').value;\n        const season = document.querySelector('#date-range-season').value;\n        \n        if (!startDate || !endDate) {\n            if (statusElement) {\n                statusElement.textContent = 'Please select both start and end dates';\n                statusElement.className = 'status-message error';\n            }\n            return;\n        }\n        \n        if (!league || !season) {\n            if (statusElement) {\n                statusElement.textContent = 'Please select both league and season';\n                statusElement.className = 'status-message error';\n            }\n            return;\n        }\n\n        if (!statusElement) {\n            console.error('Fetch status element not found');\n            return;\n        }\n\n        // Try to load configuration if not already loaded\n        if (!this.config) {\n            this.loadConfiguration();\n            \n            // Wait a bit for the config to load\n            if (!this.config) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n            }\n        }\n        \n        // Check if we have the API configuration\n        if (!this.config || !this.config.RAPIDAPI_KEY) {\n            statusElement.textContent = 'API key not configured - please refresh the page';\n            statusElement.className = 'status-message error';\n            console.error('API configuration not available for date range fetch');\n            return;\n        }\n\n        try {\n            console.log(`📅 Fetching fixtures with parameters: league=${league}, season=${season}, startDate=${startDate}, endDate=${endDate}`);\n            \n            // Try different date formats - the API might expect DD/MM/YYYY or MM/DD/YYYY\n            const dateFormats = [\n                startDate, // YYYY-MM-DD (original)\n                startDate.split('-').reverse().join('/'), // DD/MM/YYYY\n                startDate.split('-').slice(1).concat(startDate.split('-')[0]).join('/'), // MM/DD/YYYY\n            ];\n            \n            console.log(`📅 Trying date formats:`, dateFormats);\n            console.log(`📅 Note: You're searching for ${startDate} (${new Date(startDate).toLocaleDateString()})`);\n            console.log(`📅 If you meant September 8th, 2025, use 2025-09-08 instead`);\n            \n            statusElement.innerHTML = '<h4>🔄 Fetching Fixtures...</h4><p>Please wait while we fetch fixtures from the API...</p><p>This may take a few seconds for large date ranges.</p>';\n            statusElement.className = 'status-message loading';\n\n            // Try date range query first, then fall back to league-only if needed\n            let response;\n            let successfulFormat = null;\n            \n            for (const dateFormat of dateFormats) {\n                try {\n                    console.log(`📅 Trying date format: ${dateFormat}`);\n                    \n                    // First attempt: Date range query with current format\n                    response = await fetch(`https://football-web-pages1.p.rapidapi.com/fixtures-results.json?from=${dateFormat}&to=${dateFormat}&comp=${league}&season=${season}`, {\n                        method: 'GET',\n                        headers: {\n                            'X-RapidAPI-Key': this.config.RAPIDAPI_KEY,\n                            'X-RapidAPI-Host': this.config.RAPIDAPI_HOST\n                        }\n                    });\n                    \n                    if (response.ok) {\n                        successfulFormat = dateFormat;\n                        console.log(`✅ Date range query successful with format: ${dateFormat}`);\n                        break;\n                    } else {\n                        console.log(`❌ Date range query failed with format ${dateFormat}: ${response.status} ${response.statusText}`);\n                    }\n                } catch (fetchError) {\n                    console.log(`❌ Date range query error with format ${dateFormat}:`, fetchError);\n                }\n            }\n            \n            // If no date format worked, fall back to league-only query\n            if (!successfulFormat) {\n                console.log('All date range queries failed, trying league-only query...');\n                response = await fetch(`https://football-web-pages1.p.rapidapi.com/fixtures-results.json?comp=${league}&round=0&team=0`, {\n                    method: 'GET',\n                    headers: {\n                        'X-RapidAPI-Key': this.config.RAPIDAPI_KEY,\n                        'X-RapidAPI-Host': this.config.RAPIDAPI_HOST\n                    }\n                });\n            }\n\n            console.log(`📅 API Response Status: ${response.status} ${response.statusText}`);\n            \n            if (response.ok) {\n                const data = await response.json();\n                console.log(`📅 API Response Data:`, data);\n                \n                // Handle the actual API response structure: {fixtures-results: {...}}\n                let fixtures = [];\n                if (data['fixtures-results']) {\n                    const fixturesData = data['fixtures-results'];\n                    console.log(`📅 Fixtures data structure:`, fixturesData);\n                    \n                    // Check if fixtures is an array or needs to be extracted\n                    if (Array.isArray(fixturesData)) {\n                        fixtures = fixturesData;\n                    } else if (fixturesData.fixtures && Array.isArray(fixturesData.fixtures)) {\n                        fixtures = fixturesData.fixtures;\n                    } else if (fixturesData.matches && Array.isArray(fixturesData.matches)) {\n                        fixtures = fixturesData.matches;\n                    } else {\n                        // Try to find any array in the response\n                        const keys = Object.keys(fixturesData);\n                        console.log(`📅 Available keys in fixtures-results:`, keys);\n                        \n                        for (const key of keys) {\n                            if (Array.isArray(fixturesData[key])) {\n                                fixtures = fixturesData[key];\n                                console.log(`📅 Found fixtures array in key: ${key}`);\n                                break;\n                            }\n                        }\n                    }\n                }\n                \n                console.log(`📅 Extracted fixtures:`, fixtures);\n                \n                if (fixtures && fixtures.length > 0) {\n                    // Filter fixtures to only show those matching the selected date range\n                    const filteredFixtures = fixtures.filter(fixture => {\n                        const fixtureDate = fixture.date;\n                        if (!fixtureDate) return false;\n                        \n                        // Check if fixture date falls within the selected range\n                        const fixtureDateObj = new Date(fixtureDate);\n                        const startDateObj = new Date(startDate);\n                        const endDateObj = new Date(endDate);\n                        \n                        // Set time to start of day for accurate comparison\n                        startDateObj.setHours(0, 0, 0, 0);\n                        endDateObj.setHours(23, 59, 59, 999);\n                        fixtureDateObj.setHours(0, 0, 0, 0);\n                        \n                        return fixtureDateObj >= startDateObj && fixtureDateObj <= endDateObj;\n                    });\n                    \n                    console.log(`📅 Filtered fixtures for date range ${startDate} to ${endDate}:`, filteredFixtures.length);\n                    \n                    if (filteredFixtures.length === 0) {\n                        statusElement.innerHTML = `<h4>No Fixtures Found</h4><p>No fixtures found for the date range ${startDate} to ${endDate}.</p>`;\n                        statusElement.className = 'status-message info';\n                        return;\n                    }\n                    \n                    // Display fixtures in a more organized way\n                    let fixturesHtml = `<h4>Fixtures Found for ${startDate} to ${endDate}:</h4><div class=\"fixtures-list\">`;\n                    \n                    // Log the first few filtered fixtures to see their structure\n                    console.log('📅 First 3 filtered fixtures structure:', filteredFixtures.slice(0, 3));\n                    \n                    filteredFixtures.forEach((fixture, index) => {\n                        if (index < 20) { // Limit to first 20 fixtures\n                            // Use the correct property names from the API response\n                            const homeTeam = fixture['home-team']?.name || fixture.homeTeam || fixture.home || fixture.homeTeamName || fixture.home_team || fixture.home_team_name || fixture.team1 || fixture.team1Name || 'TBD';\n                            const awayTeam = fixture['away-team']?.name || fixture.awayTeam || fixture.away || fixture.awayTeamName || fixture.away_team || fixture.away_team_name || fixture.team2 || fixture.team2Name || 'TBD';\n                            \n                            // Use the correct property names from the API response\n                            const matchDate = fixture.date || fixture.matchDate || fixture.fixtureDate || fixture.match_date || fixture.fixture_date || fixture.dateTime || fixture.date_time || 'TBD';\n                            \n                            // Use the correct property names from the API response\n                            const competition = fixture.competition?.name || fixture.competition || fixture.comp || fixture.league || fixture.competitionName || fixture.leagueName || 'TBD';\n                            \n                            // Extract additional fixture information\n                            const time = fixture.time || 'TBD';\n                            const referee = fixture.referee || 'TBD';\n                            const attendance = fixture.attendance || 'TBD';\n                            const venue = fixture.venue || 'TBD';\n                            const matchId = fixture.id || 'TBD';\n                            \n                            // Enhanced score extraction with more fallback options\n                            let homeScore = fixture['home-team']?.score || \n                                          fixture['home-team']?.goals || \n                                          fixture.homeScore || \n                                          fixture.homeGoals || \n                                          fixture.home_score || \n                                          fixture.home_goals || \n                                          fixture.score1 || \n                                          fixture.goals1 || \n                                          fixture.ht_score?.split('-')[0] || // Half-time score\n                                          fixture.ft_score?.split('-')[0] || // Full-time score\n                                          fixture.score?.split('-')[0] || // General score\n                                          'TBD';\n                            \n                            let awayScore = fixture['away-team']?.score || \n                                          fixture['away-team']?.goals || \n                                          fixture.awayScore || \n                                          fixture.awayGoals || \n                                          fixture.away_score || \n                                          fixture.away_goals || \n                                          fixture.score2 || \n                                          fixture.goals2 || \n                                          fixture.ht_score?.split('-')[1] || // Half-time score\n                                          fixture.ft_score?.split('-')[1] || // Full-time score\n                                          fixture.score?.split('-')[1] || // General score\n                                          'TBD';\n                            \n                            const status = fixture.status?.full || fixture.status?.short || 'TBD';\n                            \n                            fixturesHtml += `\n                                <div class=\"fixture-item\">\n                                    <input type=\"checkbox\" id=\"fixture-${index}\" class=\"fixture-checkbox\" data-fixture='${JSON.stringify(fixture)}'>\n                                    <label for=\"fixture-${index}\">\n                                        <strong>${homeTeam} vs ${awayTeam}</strong><br>\n                                        <small>Date: ${matchDate} | Time: ${time} | Competition: ${competition}</small><br>\n                                        <small>Venue: ${venue} | Match ID: ${matchId}</small><br>\n                                        <small>Referee: ${referee} | Attendance: ${attendance}</small><br>\n                                        <small>Score: ${homeScore} - ${awayScore} | Status: ${status}</small>\n                                    </label>\n                                </div>\n                            `;\n                        }\n                    });\n                    if (filteredFixtures.length > 20) {\n                        fixturesHtml += `<p><em>... and ${filteredFixtures.length - 20} more fixtures</em></p>`;\n                    }\n                    fixturesHtml += '</div>';\n                    \n                    // Use the displayFixtures method to properly handle the fixtures and enable import buttons\n                    const fixturesContainer = document.querySelector('#fixtures-container');\n                    if (fixturesContainer) {\n                        this.displayFixtures(filteredFixtures, fixturesContainer);\n                        console.log(`✅ Date range fixtures displayed using displayFixtures: ${filteredFixtures.length} fixtures for ${startDate} to ${endDate}`);\n                        \n                        // Update status to show completion\n                        statusElement.innerHTML = `<h4>✅ Fetch Complete!</h4><p>Successfully fetched and displayed ${filteredFixtures.length} fixtures for ${startDate} to ${endDate}.</p><p>The fixtures are now displayed below and import buttons are enabled.</p>`;\n                        statusElement.className = 'status-message success';\n                        \n                        // Show the import controls\n                        const importControls = document.querySelector('#import-controls');\n                        if (importControls) {\n                            importControls.style.display = 'block';\n                            console.log('✅ Import controls displayed');\n                        }\n                    } else {\n                        // Fallback to the old method if fixtures container is not available\n                        statusElement.innerHTML = fixturesHtml;\n                        statusElement.className = 'status-message success';\n                        console.log(`✅ Date range fixtures fetched successfully: ${filteredFixtures.length} fixtures for ${startDate} to ${endDate}`);\n                        \n                        // Show the import controls\n                        const importControls = document.querySelector('#import-controls');\n                        if (importControls) {\n                            importControls.style.display = 'block';\n                            console.log('✅ Import controls displayed');\n                        }\n                    }\n                } else {\n                    statusElement.textContent = 'No fixtures found for the selected date range';\n                    statusElement.className = 'status-message info';\n                    console.log('No fixtures found in API response');\n                }\n            } else {\n                const errorText = await response.text();\n                console.error(`📅 API Error Response: ${errorText}`);\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error('❌ Date range fetch failed:', error);\n            statusElement.textContent = `❌ Failed to fetch fixtures: ${error.message}`;\n            statusElement.className = 'status-message error';\n        }\n    }\n\n    // Fetch all fixtures\n    async fetchAllFixtures() {\n        const fixturesContainer = document.querySelector('#fixtures-container');\n        const statusElement = document.querySelector('#fetch-status');\n        \n        if (!fixturesContainer || !statusElement) {\n            console.error('Required elements not found for all fixtures fetch');\n            return;\n        }\n        \n        statusElement.textContent = 'Fetching all fixtures...';\n        statusElement.className = 'status-message info';\n        \n        try {\n            const response = await fetch('/.netlify/functions/fetch-scores?comp=5&team=0');\n            \n            if (response.ok) {\n                const data = await response.json();\n                this.displayFixtures(data.fixtures || [], fixturesContainer);\n                statusElement.textContent = `Found ${data.fixtures ? data.fixtures.length : 0} fixtures`;\n                statusElement.className = 'status-message success';\n            } else {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error('Error fetching all fixtures:', error);\n            statusElement.textContent = 'Error fetching fixtures';\n            statusElement.className = 'status-message error';\n        }\n    }\n\n    // Display fixtures in the container\n    displayFixtures(fixtures, container) {\n        console.log(`🔧 displayFixtures called with ${fixtures?.length || 0} fixtures`);\n        console.log(`🔧 Container element:`, container);\n        console.log(`🔧 Container visibility:`, container.style.display, container.offsetParent !== null);\n        console.log(`🔧 Container computed styles:`, window.getComputedStyle(container));\n        \n        if (!Array.isArray(fixtures) || fixtures.length === 0) {\n            container.innerHTML = '<p>No fixtures found</p>';\n            console.log('🔧 No fixtures available, disabling import buttons');\n            // Disable import buttons when no fixtures are available\n            this.updateImportButtonStates(false);\n            return;\n        }\n        \n        console.log('🔧 Displaying fixtures, enabling import buttons');\n        container.innerHTML = '';\n        \n        fixtures.forEach((fixture, index) => {\n            const fixtureElement = document.createElement('div');\n            fixtureElement.className = 'fixture-item';\n            \n            // Handle different API response formats\n            const homeTeam = fixture['home-team']?.name || fixture.homeTeam || fixture.home || fixture.homeTeamName || fixture.home_team || fixture.home_team_name || fixture.team1 || fixture.team1Name || 'TBD';\n            const awayTeam = fixture['away-team']?.name || fixture.awayTeam || fixture.away || fixture.awayTeamName || fixture.away_team || fixture.away_team_name || fixture.team2 || fixture.team2Name || 'TBD';\n            const matchDate = fixture.date || fixture.matchDate || fixture.fixtureDate || fixture.match_date || fixture.fixture_date || fixture.dateTime || fixture.date_time || 'TBD';\n            \n            fixtureElement.innerHTML = `\n                <input type=\"checkbox\" id=\"fixture-${index}\" value=\"${index}\" class=\"fixture-checkbox\" data-fixture='${JSON.stringify(fixture)}'>\n                <label for=\"fixture-${index}\">\n                    ${homeTeam} vs ${awayTeam} - ${matchDate}\n                </label>\n            `;\n            container.appendChild(fixtureElement);\n            console.log(`🔧 Added fixture element:`, fixtureElement);\n        });\n        \n        // Add a success message at the top of the container\n        const successMessage = document.createElement('div');\n        successMessage.className = 'fixture-success-message';\n        successMessage.innerHTML = `<h4>✅ ${fixtures.length} Fixtures Loaded Successfully!</h4><p>Select the fixtures you want to import and use the import buttons below.</p>`;\n        container.insertBefore(successMessage, container.firstChild);\n        console.log(`🔧 Added success message:`, successMessage);\n        \n        // Enable import buttons when fixtures are available\n        this.updateImportButtonStates(true);\n        \n        // Make sure the container is visible\n        container.style.display = 'block';\n        container.style.visibility = 'visible';\n        container.style.opacity = '1';\n        \n        console.log(`🔧 Successfully displayed ${fixtures.length} fixtures in container`);\n        console.log(`🔧 Final container HTML:`, container.innerHTML);\n        console.log(`🔧 Final container styles:`, {\n            display: container.style.display,\n            visibility: container.style.visibility,\n            opacity: container.style.opacity,\n            computedDisplay: window.getComputedStyle(container).display,\n            computedVisibility: window.getComputedStyle(container).visibility,\n            computedOpacity: window.getComputedStyle(container).opacity\n        });\n    }\n\n    // Select all fixtures\n    selectAllFixtures() {\n        console.log('✅ Selecting all fixtures...');\n        const checkboxes = document.querySelectorAll('.fixture-checkbox');\n        checkboxes.forEach(checkbox => checkbox.checked = true);\n        console.log(`✅ Selected ${checkboxes.length} fixtures`);\n    }\n    \n    // Deselect all fixtures\n    deselectAllFixtures() {\n        console.log('❌ Deselecting all fixtures...');\n        const checkboxes = document.querySelectorAll('.fixture-checkbox');\n        checkboxes.forEach(checkbox => checkbox.checked = false);\n        console.log(`❌ Deselected ${checkboxes.length} fixtures`);\n    }\n\n    // Update import button states\n    updateImportButtonStates(enable) {\n        console.log(`🔧 updateImportButtonStates called with enable: ${enable}`);\n        \n        const importSelectedFixturesBtn = document.querySelector('#import-selected-fixtures-btn');\n        const selectAllFixturesBtn = document.querySelector('#select-all-fixtures-btn');\n        const deselectAllFixturesBtn = document.querySelector('#deselect-all-fixtures-btn');\n        \n        console.log('🔧 Found import buttons:', {\n            importSelectedFixturesBtn: !!importSelectedFixturesBtn,\n            selectAllFixturesBtn: !!selectAllFixturesBtn,\n            deselectAllFixturesBtn: !!deselectAllFixturesBtn\n        });\n        \n        if (importSelectedFixturesBtn) {\n            importSelectedFixturesBtn.disabled = !enable;\n            console.log(`🔧 Import Selected Fixtures button ${enable ? 'enabled' : 'disabled'}`);\n        }\n        \n        if (selectAllFixturesBtn) {\n            selectAllFixturesBtn.disabled = !enable;\n            console.log(`🔧 Select All Fixtures button ${enable ? 'enabled' : 'disabled'}`);\n        }\n        \n        if (deselectAllFixturesBtn) {\n            deselectAllFixturesBtn.disabled = !enable;\n            console.log(`🔧 Deselect All Fixtures button ${enable ? 'enabled' : 'disabled'}`);\n        }\n    }\n\n    // Import selected fixtures to a game week\n    async importSelectedFixtures() {\n        console.log('📥 Importing selected fixtures...');\n        \n        const selectedFixtures = [];\n        const checkboxes = document.querySelectorAll('.fixture-checkbox:checked');\n        \n        if (checkboxes.length === 0) {\n            alert('Please select at least one fixture to import.');\n            return;\n        }\n        \n        const gameWeek = document.querySelector('#import-gameweek-select').value;\n        if (!gameWeek) {\n            alert('Please select a game week to import to.');\n            return;\n        }\n        \n        checkboxes.forEach(checkbox => {\n            try {\n                const fixtureData = JSON.parse(checkbox.dataset.fixture);\n                selectedFixtures.push(fixtureData);\n            } catch (error) {\n                console.error('Error parsing fixture data:', error);\n            }\n        });\n        \n        console.log(`📥 Importing ${selectedFixtures.length} fixtures to Game Week ${gameWeek}:`, selectedFixtures);\n        \n        try {\n            // Convert API fixture format to database format\n            const fixturesToSave = selectedFixtures.map(fixture => ({\n                homeTeam: fixture['home-team']?.name || fixture.homeTeam || 'TBD',\n                awayTeam: fixture['away-team']?.name || fixture.awayTeam || 'TBD',\n                date: fixture.date || fixture.match?.date || 'TBD',\n                kickOffTime: fixture.time || 'TBD', // Extract time from API response\n                venue: fixture.venue || 'TBD',\n                status: 'NS', // Not Started\n                matchId: fixture.id || fixture.match?.id || null,\n                competition: fixture.competition?.name || 'National League'\n            }));\n            \n            // Use the same format as the fixtures manager\n            const gameweekKey = gameWeek === 'tiebreak' ? 'gwtiebreak' : `gw${gameWeek}`;\n            const editionGameweekKey = `edition${this.currentActiveEdition}_${gameweekKey}`;\n            \n            // Save to Firestore\n            if (this.db) {\n                await this.db.collection('fixtures').doc(editionGameweekKey).set({\n                    fixtures: fixturesToSave,\n                    gameweek: gameWeek,\n                    edition: this.currentActiveEdition,\n                    lastUpdated: new Date(),\n                    importedFrom: 'API'\n                });\n            } else {\n                console.error('Database not available for saving fixtures');\n                throw new Error('Database not available');\n            }\n            \n            console.log(`📥 Successfully saved ${fixturesToSave.length} fixtures to Game Week ${gameWeek}`);\n            alert(`Successfully imported ${fixturesToSave.length} fixtures to Game Week ${gameWeek}!`);\n            \n            // Refresh the fixture display to show the imported fixtures\n            // Note: This will need to be handled by the calling code\n            console.log('Fixtures imported successfully. Please refresh the fixture display manually.');\n            \n            // Uncheck all checkboxes after import\n            checkboxes.forEach(checkbox => checkbox.checked = false);\n            \n            // Update status message if available\n            const statusElement = document.querySelector('#import-status');\n            if (statusElement) {\n                statusElement.textContent = `Successfully imported ${fixturesToSave.length} fixtures to Game Week ${gameWeek}`;\n                statusElement.className = 'status-message success';\n            }\n            \n        } catch (error) {\n            console.error('Error importing fixtures:', error);\n            alert('Error importing fixtures: ' + error.message);\n            \n            // Update status message if available\n            const statusElement = document.querySelector('#import-status');\n            if (statusElement) {\n                statusElement.textContent = 'Error importing fixtures: ' + error.message;\n                statusElement.className = 'status-message error';\n            }\n        }\n    }\n\n    // Cleanup method\n    cleanup() {\n        console.log('🧹 Football Web Pages API cleanup completed');\n    }\n}\n","// Vidiprinter API Module\n// Handles all vidiprinter data fetching and processing functionality\n\nexport class VidiprinterAPI {\n    constructor(footballWebPagesAPI = null) {\n        this.footballWebPagesAPI = footballWebPagesAPI;\n    }\n\n    // Fetch historical vidiprinter data\n    async fetchHistoricalVidiprinterData(startDate, startTime, endDate, endTime) {\n        console.log('📅 Fetching historical vidiprinter data:', { startDate, startTime, endDate, endTime });\n        \n        try {\n            // Try to fetch data for the date range, but also try some fallback dates\n            const datesToTry = [\n                startDate,\n                endDate,\n                '2025-08-09', // Known date with fixtures\n                '2025-08-10', // Day after known fixtures\n                '2025-08-08'  // Day before known fixtures\n            ];\n            \n            const allEvents = [];\n            const triedDates = new Set();\n            \n            for (const date of datesToTry) {\n                if (triedDates.has(date)) continue;\n                triedDates.add(date);\n                \n                console.log(`📅 Trying to fetch vidiprinter data for date: ${date}`);\n                \n                try {\n                    const response = await fetch(`https://football-web-pages1.p.rapidapi.com/vidiprinter.json?comp=5&team=0&date=${date}`, {\n                        headers: {\n                            'X-RapidAPI-Key': this.footballWebPagesAPI?.config?.RAPIDAPI_KEY || '',\n                            'X-RapidAPI-Host': this.footballWebPagesAPI?.config?.RAPIDAPI_HOST || 'football-web-pages1.p.rapidapi.com'\n                        }\n                    });\n                    \n                    if (!response.ok) {\n                        console.log(`📅 Failed to fetch data for ${date}: ${response.status} ${response.statusText}`);\n                        continue;\n                    }\n                    \n                    const data = await response.json();\n                    console.log(`📅 Response for ${date}:`, data);\n                    \n                    if (data.vidiprinter && data.vidiprinter.events && Array.isArray(data.vidiprinter.events)) {\n                        console.log(`📅 Found ${data.vidiprinter.events.length} events for ${date}`);\n                        if (data.vidiprinter.events.length > 0) {\n                            allEvents.push(...data.vidiprinter.events);\n                            console.log(`📅 Added ${data.vidiprinter.events.length} events from ${date}`);\n                        }\n                    } else {\n                        console.log(`📅 No events found for ${date}`);\n                    }\n                } catch (error) {\n                    console.log(`📅 Error fetching data for ${date}:`, error);\n                }\n            }\n            \n            console.log(`📅 Total events collected from all dates: ${allEvents.length}`);\n            \n            if (allEvents.length === 0) {\n                console.log('📅 No events found for any date, returning empty result');\n                return {\n                    events: [],\n                    startDate,\n                    startTime,\n                    endDate,\n                    endTime,\n                    message: 'No vidiprinter events found for the requested date range or fallback dates'\n                };\n            }\n            \n            // Filter events based on time range\n            const filteredEvents = this.filterEventsByTimeRange(allEvents, startDate, startTime, endDate, endTime);\n            \n            console.log('📅 Filtered events:', filteredEvents);\n            \n            return {\n                events: filteredEvents,\n                startDate,\n                startTime,\n                endDate,\n                endTime\n            };\n            \n        } catch (error) {\n            console.error('❌ Error fetching historical vidiprinter data:', error);\n            throw error;\n        }\n    }\n\n    // Filter events by time range\n    filterEventsByTimeRange(events, startDate, startTime, endDate, endTime) {\n        if (!events || !Array.isArray(events)) {\n            console.log('❌ No events array provided or not an array');\n            return [];\n        }\n        \n        console.log(`🔍 Filtering ${events.length} events between ${startDate} ${startTime} and ${endDate} ${endTime}`);\n        \n        const filteredEvents = events.filter(event => {\n            if (!event['date/time']) {\n                console.log('❌ Event missing date/time:', event);\n                return false;\n            }\n            \n            const eventDateTime = this.parseEventDateTime(event['date/time']);\n            if (!eventDateTime) {\n                console.log('❌ Failed to parse event date/time:', event['date/time']);\n                return false;\n            }\n            \n            const startDateTime = new Date(`${startDate} ${startTime}`);\n            const endDateTime = new Date(`${endDate} ${endTime}`);\n            \n            console.log(`📅 Event: ${event['date/time']} -> Parsed: ${eventDateTime}`);\n            console.log(`📅 Start: ${startDate} ${startTime} -> ${startDateTime}`);\n            console.log(`📅 End: ${endDate} ${endTime} -> ${endDateTime}`);\n            console.log(`📅 In range: ${eventDateTime >= startDateTime && eventDateTime <= endDateTime}`);\n            \n            return eventDateTime >= startDateTime && eventDateTime <= endDateTime;\n        });\n        \n        console.log(`✅ Filtered events result: ${filteredEvents.length} events`);\n        return filteredEvents;\n    }\n\n    // Parse event date/time string\n    parseEventDateTime(dateTimeString) {\n        console.log(`🔍 Parsing date/time: \"${dateTimeString}\"`);\n        \n        // Handle format: \"2025-08-09 22:33:44\"\n        const [datePart, timePart] = dateTimeString.split(' ');\n        console.log(`📅 Date part: \"${datePart}\", Time part: \"${timePart}\"`);\n        \n        if (!datePart || !timePart) {\n            console.log('❌ Invalid date/time format - missing date or time part');\n            return null;\n        }\n        \n        const [year, month, day] = datePart.split('-');\n        const [hour, minute, second] = timePart.split(':');\n        \n        console.log(`📅 Parsed: Year=${year}, Month=${month}, Day=${day}, Hour=${hour}, Minute=${minute}, Second=${second}`);\n        \n        if (!year || !month || !day || !hour || !minute || !second) {\n            console.log('❌ Invalid date/time format - missing components');\n            return null;\n        }\n        \n        const parsedDate = new Date(year, month - 1, day, hour, minute, second);\n        console.log(`📅 Final parsed date: ${parsedDate}`);\n        \n        return parsedDate;\n    }\n\n    // Fetch historical data for a specific interval\n    async fetchHistoricalDataForInterval(startDate, startTime, endDate, endTime) {\n        console.log('Fetching historical data for interval:', { startDate, startTime, endDate, endTime });\n        \n        try {\n            const data = await this.fetchHistoricalVidiprinterData(startDate, startTime, endDate, endTime);\n            return data;\n        } catch (error) {\n            console.error('Error fetching historical data for interval:', error);\n            throw error;\n        }\n    }\n\n    // Fetch current vidiprinter data for a competition\n    async fetchVidiprinterData(competition = 5) {\n        console.log('📺 Fetching current vidiprinter data for competition:', competition);\n        \n        try {\n            const currentDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n            const currentTime = new Date().toLocaleTimeString('en-GB', { \n                hour: '2-digit', \n                minute: '2-digit',\n                second: '2-digit',\n                hour12: false \n            });\n            \n            console.log(`📺 Fetching vidiprinter for date: ${currentDate}, time: ${currentTime}`);\n            \n            // Try current date first\n            let response = await fetch(`https://football-web-pages1.p.rapidapi.com/vidiprinter.json?comp=${competition}&team=0&date=${currentDate}`, {\n                headers: {\n                    'X-RapidAPI-Key': this.footballWebPagesAPI?.config?.RAPIDAPI_KEY || '',\n                    'X-RapidAPI-Host': this.footballWebPagesAPI?.config?.RAPIDAPI_HOST || 'football-web-pages1.p.rapidapi.com'\n                }\n            });\n            \n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            \n            let data = await response.json();\n            console.log('📺 Current date vidiprinter response:', data);\n            \n            // If no events on current date, try recent dates\n            if (!data.vidiprinter || !data.vidiprinter.events || data.vidiprinter.events.length === 0) {\n                console.log('📺 No events on current date, trying recent dates...');\n                \n                const recentDates = [\n                    '2025-08-09', // Known date with fixtures\n                    '2025-08-10', // Day after\n                    '2025-08-08'  // Day before\n                ];\n                \n                for (const date of recentDates) {\n                    console.log(`📺 Trying date: ${date}`);\n                    response = await fetch(`https://football-web-pages1.p.rapidapi.com/vidiprinter.json?comp=${competition}&team=0&date=${date}`, {\n                        headers: {\n                            'X-RapidAPI-Key': this.footballWebPagesAPI?.config?.RAPIDAPI_KEY || '',\n                            'X-RapidAPI-Host': this.footballWebPagesAPI?.config?.RAPIDAPI_HOST || 'football-web-pages1.p.rapidapi.com'\n                        }\n                    });\n                    \n                    if (response.ok) {\n                        data = await response.json();\n                        console.log(`📺 Response for ${date}:`, data);\n                        \n                        if (data.vidiprinter && data.vidiprinter.events && data.vidiprinter.events.length > 0) {\n                            console.log(`📺 Found ${data.vidiprinter.events.length} events for ${date}`);\n                            break;\n                        }\n                    }\n                }\n            }\n            \n            if (data.vidiprinter && data.vidiprinter.events && data.vidiprinter.events.length > 0) {\n                console.log(`📺 Returning ${data.vidiprinter.events.length} events from vidiprinter`);\n                return data.vidiprinter.events;\n            } else {\n                console.log('📺 No events found in any vidiprinter response');\n                // Return a placeholder event to show the system is working\n                return [{\n                    text: 'No live matches currently available. The vidiprinter will update when matches are in progress.',\n                    type: 'status',\n                    'date/time': new Date().toISOString()\n                }];\n            }\n            \n        } catch (error) {\n            console.error('❌ Error fetching vidiprinter data:', error);\n            // Return a placeholder event to show the system is working\n            return [{\n                text: 'Vidiprinter system is running. Waiting for live match updates...',\n                type: 'status',\n                'date/time': new Date().toISOString()\n            }];\n        }\n    }\n\n    // Fetch enhanced vidiprinter data for a competition, team, and date\n    async fetchEnhancedVidiprinterData(competition = 5, team = 0, date = null) {\n        console.log('Fetching enhanced vidiprinter data:', { competition, team, date });\n        \n        try {\n            const targetDate = date || new Date().toISOString().split('T')[0]; // Use provided date or current date\n            console.log(`📅 Fetching enhanced vidiprinter for date: ${targetDate}`);\n            \n            const response = await fetch(`https://football-web-pages1.p.rapidapi.com/vidiprinter.json?comp=${competition}&team=${team}&date=${targetDate}`, {\n                headers: {\n                    'X-RapidAPI-Key': this.footballWebPagesAPI?.config?.RAPIDAPI_KEY || '',\n                    'X-RapidAPI-Host': this.footballWebPagesAPI?.config?.RAPIDAPI_HOST || 'football-web-pages1.p.rapidapi.com'\n                }\n            });\n            \n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            \n            const data = await response.json();\n            console.log('📺 Enhanced vidiprinter API response:', data);\n            \n            if (data.vidiprinter && data.vidiprinter.events) {\n                console.log(`📺 Found ${data.vidiprinter.events.length} events in enhanced vidiprinter response`);\n                return data.vidiprinter.events;\n            } else {\n                console.log('📺 No events found in enhanced vidiprinter response');\n                return [];\n            }\n            \n        } catch (error) {\n            console.error('Error fetching enhanced vidiprinter data:', error);\n            return [];\n        }\n    }\n\n    // Cleanup method\n    cleanup() {\n        console.log('🧹 Vidiprinter API cleanup completed');\n    }\n}\n","// Data Processor Module\n// Handles data processing, transformation, and utility functions for API data\n\nexport class DataProcessor {\n    constructor() {\n        // Initialize any data processing utilities\n    }\n\n    // Convert API fixture format to database format\n    convertApiFixtureToDatabase(fixture) {\n        return {\n            homeTeam: fixture['home-team']?.name || fixture.homeTeam || 'TBD',\n            awayTeam: fixture['away-team']?.name || fixture.awayTeam || 'TBD',\n            date: fixture.date || fixture.match?.date || 'TBD',\n            kickOffTime: fixture.time || 'TBD',\n            venue: fixture.venue || 'TBD',\n            status: 'NS', // Not Started\n            matchId: fixture.id || fixture.match?.id || null,\n            competition: fixture.competition?.name || 'National League'\n        };\n    }\n\n    // Extract scores from API fixture with multiple fallback methods\n    extractScores(fixture) {\n        let homeScore = null;\n        let awayScore = null;\n        let homeScoreHT = null;\n        let awayScoreHT = null;\n\n        // Method 1: Direct score properties from home-team/away-team objects\n        if (fixture['home-team'] && fixture['away-team']) {\n            homeScore = fixture['home-team'].score ?? fixture['home-team'].goals ?? fixture['home-team'].result;\n            awayScore = fixture['away-team'].score ?? fixture['away-team'].goals ?? fixture['away-team'].result;\n        }\n\n        // Method 2: Alternative score properties\n        if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined)) {\n            homeScore = fixture.homeScore ?? fixture.homeGoals ?? fixture.score1 ?? fixture.home_result;\n            awayScore = fixture.awayScore ?? fixture.awayGoals ?? fixture.score2 ?? fixture.away_result;\n        }\n\n        // Method 3: Split score strings (most common format)\n        if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined)) {\n            // Try full-time score first\n            if (fixture.ft_score && fixture.ft_score.includes('-')) {\n                const ftParts = fixture.ft_score.split('-');\n                homeScore = parseInt(ftParts[0].trim());\n                awayScore = parseInt(ftParts[1].trim());\n            }\n\n            // Try general score field\n            if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined) && fixture.score && fixture.score.includes('-')) {\n                const scoreParts = fixture.score.split('-');\n                homeScore = parseInt(scoreParts[0].trim());\n                awayScore = parseInt(scoreParts[1].trim());\n            }\n\n            // Try result field\n            if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined) && fixture.result && fixture.result.includes('-')) {\n                const resultParts = fixture.result.split('-');\n                homeScore = parseInt(resultParts[0].trim());\n                awayScore = parseInt(resultParts[1].trim());\n            }\n        }\n\n        // Method 4: Check for individual goal properties\n        if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined)) {\n            homeScore = fixture.homeGoals ?? fixture.goals1 ?? fixture.home_goals;\n            awayScore = fixture.awayGoals ?? fixture.goals2 ?? fixture.away_goals;\n        }\n\n        // Method 5: Check for any numeric score-like properties\n        if ((homeScore === null || homeScore === undefined) && (awayScore === null || awayScore === undefined)) {\n            // Look for any property that might contain scores\n            const possibleScoreProps = ['score', 'result', 'goals', 'ft_score', 'ht_score', 'final_score'];\n            for (const prop of possibleScoreProps) {\n                if (fixture[prop] && typeof fixture[prop] === 'string' && fixture[prop].includes('-')) {\n                    const parts = fixture[prop].split('-');\n                    if (parts.length === 2 && !isNaN(parseInt(parts[0])) && !isNaN(parseInt(parts[1]))) {\n                        homeScore = parseInt(parts[0].trim());\n                        awayScore = parseInt(parts[1].trim());\n                        break;\n                    }\n                }\n            }\n        }\n\n        // Extract half-time scores\n        // Method 1: Check home-team and away-team objects for half-time-score\n        if (fixture['home-team'] && fixture['away-team']) {\n            homeScoreHT = fixture['home-team']['half-time-score'] ?? fixture['home-team']['ht_score'] ?? fixture['home-team']['half_time_score'];\n            awayScoreHT = fixture['away-team']['half-time-score'] ?? fixture['away-team']['ht_score'] ?? fixture['away-team']['half_time_score'];\n        }\n\n        // Method 2: Check top-level properties\n        if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n            if (fixture.ht_score && fixture.ht_score.includes('-')) {\n                const htParts = fixture.ht_score.split('-');\n                homeScoreHT = parseInt(htParts[0].trim());\n                awayScoreHT = parseInt(htParts[1].trim());\n            } else if (fixture.half_time_score && fixture.half_time_score.includes('-')) {\n                const htParts = fixture.half_time_score.split('-');\n                homeScoreHT = parseInt(htParts[0].trim());\n                awayScoreHT = parseInt(htParts[1].trim());\n            } else if (fixture.ht_result && fixture.ht_result.includes('-')) {\n                const htParts = fixture.ht_result.split('-');\n                homeScoreHT = parseInt(htParts[0].trim());\n                awayScoreHT = parseInt(htParts[1].trim());\n            }\n        }\n\n        // Method 3: Check for halfTimeScore properties (from netlify function)\n        if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n            if (fixture.halfTimeScore && fixture.halfTimeScore.includes('-')) {\n                const htParts = fixture.halfTimeScore.split('-');\n                homeScoreHT = parseInt(htParts[0].trim());\n                awayScoreHT = parseInt(htParts[1].trim());\n            }\n        }\n\n        // Method 4: Check for halfTime properties (from netlify function)\n        if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n            if (fixture.halfTime && fixture.halfTime.includes('-')) {\n                const htParts = fixture.halfTime.split('-');\n                homeScoreHT = parseInt(htParts[0].trim());\n                awayScoreHT = parseInt(htParts[1].trim());\n            }\n        }\n\n        // Method 5: Check for ht properties (from netlify function)\n        if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n            if (fixture.ht && fixture.ht.includes('-')) {\n                const htParts = fixture.ht.split('-');\n                homeScoreHT = parseInt(htParts[0].trim());\n                awayScoreHT = parseInt(htParts[1].trim());\n            }\n        }\n\n        // Method 6: Check for any property containing 'half' or 'ht' that might have scores\n        if ((homeScoreHT === null || homeScoreHT === undefined) && (awayScoreHT === null || awayScoreHT === undefined)) {\n            const possibleHTProps = ['halfTimeScore', 'halfTime', 'ht', 'ht_score', 'half_time_score', 'ht_result', 'halfTimeResult'];\n            for (const prop of possibleHTProps) {\n                if (fixture[prop] && typeof fixture[prop] === 'string' && fixture[prop].includes('-')) {\n                    const parts = fixture[prop].split('-');\n                    if (parts.length === 2 && !isNaN(parseInt(parts[0])) && !isNaN(parseInt(parts[1]))) {\n                        homeScoreHT = parseInt(parts[0].trim());\n                        awayScoreHT = parseInt(parts[1].trim());\n                        break;\n                    }\n                }\n            }\n        }\n\n        // Convert to numbers and handle invalid values\n        homeScore = homeScore !== null && homeScore !== undefined && homeScore !== '' ? parseInt(homeScore) : null;\n        awayScore = awayScore !== null && awayScore !== undefined && awayScore !== '' ? parseInt(awayScore) : null;\n        homeScoreHT = homeScoreHT !== null && homeScoreHT !== undefined && homeScoreHT !== '' ? parseInt(homeScoreHT) : null;\n        awayScoreHT = awayScoreHT !== null && awayScoreHT !== undefined && awayScoreHT !== '' ? parseInt(awayScoreHT) : null;\n\n        return {\n            homeScore,\n            awayScore,\n            homeScoreHT,\n            awayScoreHT\n        };\n    }\n\n    // Extract team names from API fixture with multiple fallback methods\n    extractTeamNames(fixture) {\n        const homeTeam = fixture['home-team']?.name || \n                        fixture.homeTeam || \n                        fixture.home || \n                        fixture.homeTeamName || \n                        fixture.home_team || \n                        fixture.home_team_name || \n                        fixture.team1 || \n                        fixture.team1Name || \n                        'TBD';\n\n        const awayTeam = fixture['away-team']?.name || \n                        fixture.awayTeam || \n                        fixture.away || \n                        fixture.awayTeamName || \n                        fixture.away_team || \n                        fixture.away_team_name || \n                        fixture.team2 || \n                        fixture.team2Name || \n                        'TBD';\n\n        return { homeTeam, awayTeam };\n    }\n\n    // Extract match information from API fixture\n    extractMatchInfo(fixture) {\n        const matchDate = fixture.date || \n                         fixture.matchDate || \n                         fixture.fixtureDate || \n                         fixture.match_date || \n                         fixture.fixture_date || \n                         fixture.dateTime || \n                         fixture.date_time || \n                         'TBD';\n\n        const competition = fixture.competition?.name || \n                          fixture.competition || \n                          fixture.comp || \n                          fixture.league || \n                          fixture.competitionName || \n                          fixture.leagueName || \n                          'TBD';\n\n        const time = fixture.time || 'TBD';\n        const referee = fixture.referee || 'TBD';\n        const attendance = fixture.attendance || 'TBD';\n        const venue = fixture.venue || 'TBD';\n        const matchId = fixture.id || 'TBD';\n\n        return {\n            matchDate,\n            competition,\n            time,\n            referee,\n            attendance,\n            venue,\n            matchId\n        };\n    }\n\n    // Extract status from API fixture\n    extractStatus(fixture) {\n        let status = fixture.status?.full || \n                    fixture.status?.short || \n                    fixture.status || \n                    'NS';\n\n        // If we have full-time scores, automatically set status to FT\n        if (fixture.homeScore !== null && fixture.awayScore !== null) {\n            status = 'FT';\n        }\n\n        return status;\n    }\n\n    // Filter fixtures by date range\n    filterFixturesByDateRange(fixtures, startDate, endDate) {\n        if (!Array.isArray(fixtures) || fixtures.length === 0) {\n            return [];\n        }\n\n        return fixtures.filter(fixture => {\n            const fixtureDate = fixture.date;\n            if (!fixtureDate) return false;\n\n            // Check if fixture date falls within the selected range\n            const fixtureDateObj = new Date(fixtureDate);\n            const startDateObj = new Date(startDate);\n            const endDateObj = new Date(endDate);\n\n            // Set time to start of day for accurate comparison\n            startDateObj.setHours(0, 0, 0, 0);\n            endDateObj.setHours(23, 59, 59, 999);\n            fixtureDateObj.setHours(0, 0, 0, 0);\n\n            return fixtureDateObj >= startDateObj && fixtureDateObj <= endDateObj;\n        });\n    }\n\n    // Parse event date/time string\n    parseEventDateTime(dateTimeString) {\n        if (!dateTimeString || typeof dateTimeString !== 'string') {\n            return null;\n        }\n\n        // Handle format: \"2025-08-09 22:33:44\"\n        const [datePart, timePart] = dateTimeString.split(' ');\n        \n        if (!datePart || !timePart) {\n            return null;\n        }\n\n        const [year, month, day] = datePart.split('-');\n        const [hour, minute, second] = timePart.split(':');\n\n        if (!year || !month || !day || !hour || !minute || !second) {\n            return null;\n        }\n\n        return new Date(year, month - 1, day, hour, minute, second);\n    }\n\n    // Filter events by time range\n    filterEventsByTimeRange(events, startDate, startTime, endDate, endTime) {\n        if (!events || !Array.isArray(events)) {\n            return [];\n        }\n\n        return events.filter(event => {\n            if (!event['date/time']) {\n                return false;\n            }\n\n            const eventDateTime = this.parseEventDateTime(event['date/time']);\n            if (!eventDateTime) {\n                return false;\n            }\n\n            const startDateTime = new Date(`${startDate} ${startTime}`);\n            const endDateTime = new Date(`${endDate} ${endTime}`);\n\n            return eventDateTime >= startDateTime && eventDateTime <= endDateTime;\n        });\n    }\n\n    // Generate fixtures HTML for display\n    generateFixturesHTML(fixtures, startDate, endDate, maxDisplay = 20) {\n        if (!fixtures || fixtures.length === 0) {\n            return '<p>No fixtures found</p>';\n        }\n\n        let fixturesHtml = `<h4>Fixtures Found for ${startDate} to ${endDate}:</h4><div class=\"fixtures-list\">`;\n\n        fixtures.forEach((fixture, index) => {\n            if (index < maxDisplay) {\n                const { homeTeam, awayTeam } = this.extractTeamNames(fixture);\n                const { matchDate, competition, time, venue, matchId, referee, attendance } = this.extractMatchInfo(fixture);\n                const { homeScore, awayScore } = this.extractScores(fixture);\n                const status = this.extractStatus(fixture);\n\n                fixturesHtml += `\n                    <div class=\"fixture-item\">\n                        <input type=\"checkbox\" id=\"fixture-${index}\" class=\"fixture-checkbox\" data-fixture='${JSON.stringify(fixture)}'>\n                        <label for=\"fixture-${index}\">\n                            <strong>${homeTeam} vs ${awayTeam}</strong><br>\n                            <small>Date: ${matchDate} | Time: ${time} | Competition: ${competition}</small><br>\n                            <small>Venue: ${venue} | Match ID: ${matchId}</small><br>\n                            <small>Referee: ${referee} | Attendance: ${attendance}</small><br>\n                            <small>Score: ${homeScore || 'TBD'} - ${awayScore || 'TBD'} | Status: ${status}</small>\n                        </label>\n                    </div>\n                `;\n            }\n        });\n\n        if (fixtures.length > maxDisplay) {\n            fixturesHtml += `<p><em>... and ${fixtures.length - maxDisplay} more fixtures</em></p>`;\n        }\n\n        fixturesHtml += '</div>';\n        return fixturesHtml;\n    }\n\n    // Cleanup method\n    cleanup() {\n        console.log('🧹 Data Processor cleanup completed');\n    }\n}\n","// Main API Manager\n// Orchestrates all API functionality modules\n\nimport { FootballWebPagesAPI } from './footballWebPages.js';\nimport { VidiprinterAPI } from './vidiprinter.js';\nimport { DataProcessor } from './dataProcessor.js';\n\nexport class ApiManager {\n    constructor(db = null, currentActiveEdition = 1) {\n        this.db = db;\n        this.currentActiveEdition = currentActiveEdition;\n        \n        // Initialize module instances\n        this.footballWebPagesAPI = new FootballWebPagesAPI(db, currentActiveEdition);\n        this.vidiprinterAPI = new VidiprinterAPI(this.footballWebPagesAPI);\n        this.dataProcessor = new DataProcessor();\n        \n        // Legacy properties for backward compatibility\n        this.footballWebPagesConfig = null;\n        this.theSportsDbConfig = null;\n    }\n\n    // Initialize the API manager\n    initializeApiManager() {\n        console.log('🔧 Initializing API Manager...');\n        this.initializeApiConfigurations();\n        this.setupEventListeners();\n    }\n\n    // Initialize API configurations\n    async initializeApiConfigurations() {\n        console.log('🔧 Initializing API configurations...');\n        \n        // Initialize Football Web Pages API configuration\n        this.footballWebPagesAPI.initializeConfiguration();\n        \n        // Clean up TheSportsDB references\n        console.log('TheSportsDB API configuration removed - using Football Web Pages API instead');\n        \n        // Set legacy properties for backward compatibility\n        this.footballWebPagesConfig = this.footballWebPagesAPI.config;\n    }\n\n    // Get configuration safely (legacy method)\n    getConfiguration() {\n        return this.footballWebPagesAPI.getConfiguration();\n    }\n\n    // Check if configuration is available (legacy method)\n    isConfigurationLoaded() {\n        return this.footballWebPagesAPI.isConfigurationLoaded();\n    }\n\n    // Retry loading configuration if needed (legacy method)\n    retryLoadConfigurationIfNeeded() {\n        this.footballWebPagesAPI.retryLoadConfiguration();\n    }\n\n    // Set up event listeners\n    setupEventListeners() {\n        // Initialize Football Web Pages API when DOM is ready\n        document.addEventListener('DOMContentLoaded', () => {\n            this.initializeFootballWebPagesAPI();\n        });\n    }\n\n    // Initialize Football Web Pages API integration\n    initializeFootballWebPagesAPI() {\n        console.log('🔧 Initializing Football Web Pages API integration...');\n        \n        const testApiConnectionBtn = document.querySelector('#test-api-connection');\n        const fetchDateRangeFixturesBtn = document.querySelector('#fetch-date-range-fixtures-btn');\n        const fetchAllFixturesBtn = document.querySelector('#fetch-all-fixtures-btn');\n        const selectAllFixturesBtn = document.querySelector('#select-all-fixtures-btn');\n        const deselectAllFixturesBtn = document.querySelector('#deselect-all-fixtures-btn');\n        const importSelectedFixturesBtn = document.querySelector('#import-selected-fixtures-btn');\n        const fetchHistoricalDataBtn = document.querySelector('#fetch-historical-data-btn');\n        \n        console.log('🔍 Found buttons:', {\n            testApiConnection: !!testApiConnectionBtn,\n            fetchDateRangeFixtures: !!fetchDateRangeFixturesBtn,\n            fetchAllFixtures: !!fetchAllFixturesBtn,\n            selectAllFixtures: !!selectAllFixturesBtn,\n            deselectAllFixtures: !!deselectAllFixturesBtn,\n            importSelectedFixtures: !!importSelectedFixturesBtn,\n            fetchHistoricalData: !!fetchHistoricalDataBtn\n        });\n        \n        // Check API key status on initialization\n        this.footballWebPagesAPI.checkApiKeyStatus();\n        \n        // Check again after a delay to ensure buttons are enabled once config is loaded\n        setTimeout(() => {\n            this.footballWebPagesAPI.checkApiKeyStatus();\n        }, 1000);\n        \n        if (testApiConnectionBtn) {\n            testApiConnectionBtn.addEventListener('click', () => this.footballWebPagesAPI.testApiConnection());\n        }\n        if (fetchDateRangeFixturesBtn) {\n            console.log('✅ Date Range Fetch button found and event listener attached');\n            fetchDateRangeFixturesBtn.addEventListener('click', () => {\n                console.log('📅 Date Range Fetch button clicked!');\n                this.footballWebPagesAPI.fetchDateRangeFixtures();\n            });\n        } else {\n            console.error('❌ Date Range Fetch button not found!');\n        }\n        if (fetchAllFixturesBtn) {\n            fetchAllFixturesBtn.addEventListener('click', () => this.footballWebPagesAPI.fetchAllFixtures());\n        }\n        if (selectAllFixturesBtn) {\n            selectAllFixturesBtn.addEventListener('click', () => this.footballWebPagesAPI.selectAllFixtures());\n        }\n        if (deselectAllFixturesBtn) {\n            deselectAllFixturesBtn.addEventListener('click', () => this.footballWebPagesAPI.deselectAllFixtures());\n        }\n        if (importSelectedFixturesBtn) {\n            importSelectedFixturesBtn.addEventListener('click', () => this.footballWebPagesAPI.importSelectedFixtures());\n        }\n        if (fetchHistoricalDataBtn) {\n            fetchHistoricalDataBtn.addEventListener('click', () => {\n                // Get current date for historical data fetch\n                const now = new Date();\n                const startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7); // Last 7 days\n                const endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n                \n                this.vidiprinterAPI.fetchHistoricalVidiprinterData(\n                    startDate.toISOString().split('T')[0], // YYYY-MM-DD format\n                    '00:00',\n                    endDate.toISOString().split('T')[0],\n                    '23:59'\n                );\n            });\n        }\n    }\n\n    // Delegate methods to appropriate modules\n\n    // Football Web Pages API methods\n    testApiConnection() {\n        return this.footballWebPagesAPI.testApiConnection();\n    }\n\n    checkApiKeyStatus() {\n        return this.footballWebPagesAPI.checkApiKeyStatus();\n    }\n\n    fetchDateRangeFixtures() {\n        return this.footballWebPagesAPI.fetchDateRangeFixtures();\n    }\n\n    fetchAllFixtures() {\n        return this.footballWebPagesAPI.fetchAllFixtures();\n    }\n\n    displayFixtures(fixtures, container) {\n        return this.footballWebPagesAPI.displayFixtures(fixtures, container);\n    }\n\n    selectAllFixtures() {\n        return this.footballWebPagesAPI.selectAllFixtures();\n    }\n\n    deselectAllFixtures() {\n        return this.footballWebPagesAPI.deselectAllFixtures();\n    }\n\n    importSelectedFixtures() {\n        return this.footballWebPagesAPI.importSelectedFixtures();\n    }\n\n    // Vidiprinter API methods\n    fetchHistoricalVidiprinterData(startDate, startTime, endDate, endTime) {\n        return this.vidiprinterAPI.fetchHistoricalVidiprinterData(startDate, startTime, endDate, endTime);\n    }\n\n    filterEventsByTimeRange(events, startDate, startTime, endDate, endTime) {\n        return this.vidiprinterAPI.filterEventsByTimeRange(events, startDate, startTime, endDate, endTime);\n    }\n\n    parseEventDateTime(dateTimeString) {\n        return this.vidiprinterAPI.parseEventDateTime(dateTimeString);\n    }\n\n    fetchHistoricalDataForInterval(startDate, startTime, endDate, endTime) {\n        return this.vidiprinterAPI.fetchHistoricalDataForInterval(startDate, startTime, endDate, endTime);\n    }\n\n    fetchVidiprinterData(competition = 5) {\n        return this.vidiprinterAPI.fetchVidiprinterData(competition);\n    }\n\n    fetchEnhancedVidiprinterData(competition = 5, team = 0, date = null) {\n        return this.vidiprinterAPI.fetchEnhancedVidiprinterData(competition, team, date);\n    }\n\n    // Initialize player vidiprinter functionality\n    initializePlayerVidiprinter() {\n        console.log('🔧 Initializing player vidiprinter...');\n        \n        // This method can be used to set up any player-specific vidiprinter features\n        // For now, it's a placeholder that can be expanded later\n        \n        console.log('✅ Player vidiprinter initialized');\n    }\n\n    // Data Processor methods\n    convertApiFixtureToDatabase(fixture) {\n        return this.dataProcessor.convertApiFixtureToDatabase(fixture);\n    }\n\n    extractScores(fixture) {\n        return this.dataProcessor.extractScores(fixture);\n    }\n\n    extractTeamNames(fixture) {\n        return this.dataProcessor.extractTeamNames(fixture);\n    }\n\n    extractMatchInfo(fixture) {\n        return this.dataProcessor.extractMatchInfo(fixture);\n    }\n\n    extractStatus(fixture) {\n        return this.dataProcessor.extractStatus(fixture);\n    }\n\n    filterFixturesByDateRange(fixtures, startDate, endDate) {\n        return this.dataProcessor.filterFixturesByDateRange(fixtures, startDate, endDate);\n    }\n\n    generateFixturesHTML(fixtures, startDate, endDate, maxDisplay = 20) {\n        return this.dataProcessor.generateFixturesHTML(fixtures, startDate, endDate, maxDisplay);\n    }\n\n    // Cleanup method\n    cleanup() {\n        console.log('🧹 API Manager cleanup started...');\n        this.footballWebPagesAPI.cleanup();\n        this.vidiprinterAPI.cleanup();\n        this.dataProcessor.cleanup();\n        console.log('🧹 API Manager cleanup completed');\n    }\n}\n\n// Export the ApiManager class as default\nexport default ApiManager;\n","// Utilities Module - Common helper functions, date utilities, user utilities, and mock data generators\n// This module consolidates all utility functions that were scattered throughout the original app.js\n\nclass UtilitiesManager {\n    constructor() {\n        this.currentActiveEdition = 1;\n        this.currentActiveGameweek = '1';\n        console.log('🔧 Utilities Manager initialized');\n    }\n\n    // ===== DATE & TIME UTILITIES =====\n    \n    /**\n     * Formats a deadline date with ordinal suffixes and readable format\n     * @param {Date} date - The date to format\n     * @returns {string} Formatted date string\n     */\n    formatDeadlineDate(date) {\n        if (!date) return 'TBD';\n        \n        const hours = date.getHours();\n        const minutes = date.getMinutes().toString().padStart(2, '0');\n        \n        // Convert to 12-hour format\n        const ampm = hours >= 12 ? 'pm' : 'am';\n        const displayHours = hours % 12 || 12;\n        \n        // Get day of week and date\n        const dayOfWeek = date.toLocaleDateString('en-GB', { weekday: 'long' });\n        const day = date.getDate();\n        const month = date.toLocaleDateString('en-GB', { month: 'long' });\n        \n        // Add ordinal suffix to day\n        const ordinalSuffix = this.getOrdinalSuffix(day);\n        \n        return `${displayHours}:${minutes}${ampm} ${dayOfWeek} ${day}${ordinalSuffix} ${month}`;\n    }\n\n    /**\n     * Gets the ordinal suffix for a day number\n     * @param {number} day - The day number\n     * @returns {string} Ordinal suffix (st, nd, rd, th)\n     */\n    getOrdinalSuffix(day) {\n        if (day > 3 && day < 21) return 'th';\n        switch (day % 10) {\n            case 1: return 'st';\n            case 2: return 'nd';\n            case 3: return 'rd';\n            default: return 'th';\n        }\n    }\n\n    /**\n     * Gets the deadline date for a specific gameweek\n     * @param {string} gameweek - The gameweek number\n     * @returns {Promise<Date|null>} Deadline date or null if not found\n     */\n    async getDeadlineDateForGameweek(gameweek) {\n        try {\n            // Handle tiebreak gameweek\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${this.currentActiveEdition}_${gameweekKey}`;\n            \n            // Try new structure first, then fallback to old structure\n            let doc = await window.db.collection('fixtures').doc(editionGameweekKey).get();\n            if (!doc.exists) {\n                // Fallback to old structure for backward compatibility\n                doc = await window.db.collection('fixtures').doc(gameweekKey).get();\n            }\n            \n            if (doc.exists) {\n                const fixtures = doc.data().fixtures;\n                if (fixtures && fixtures.length > 0) {\n                    const earliestFixture = fixtures.reduce((earliest, fixture) => {\n                        const fixtureDate = new Date(fixture.date);\n                        const earliestDate = new Date(earliest.date);\n                        return fixtureDate < earliestDate ? fixture : earliest;\n                    });\n                    return new Date(earliestFixture.date);\n                }\n            }\n            return null;\n        } catch (error) {\n            console.error('Error getting deadline date for gameweek:', error);\n            return null;\n        }\n    }\n\n    // ===== USER & EDITION UTILITIES =====\n    \n    /**\n     * Gets the user's current edition from registration data\n     * @param {Object} userData - User data object\n     * @returns {string|number} Edition identifier\n     */\n    getUserEdition(userData) {\n        if (!userData || !userData.registrations) {\n            return 1; // Default to Edition 1 if no registration data\n        }\n        \n        // If user has a preferred edition set, use that\n        if (userData.preferredEdition) {\n            return userData.preferredEdition;\n        }\n        \n        // Check for Test Weeks registration first\n        if (userData.registrations.editiontest) {\n            return 'test';\n        }\n        \n        // Check for Edition 1 registration\n        if (userData.registrations.edition1) {\n            return 1;\n        }\n        \n        // Check for other editions (2, 3, 4, etc.)\n        for (let i = 2; i <= 10; i++) {\n            if (userData.registrations[`edition${i}`]) {\n                return i;\n            }\n        }\n        \n        return 1; // Default to Edition 1\n    }\n\n    /**\n     * Gets all editions the user is registered for\n     * @param {Object} userData - User data object\n     * @returns {Array} Array of edition identifiers\n     */\n    getUserRegisteredEditions(userData) {\n        if (!userData || !userData.registrations) {\n            return [];\n        }\n        \n        const editions = [];\n        Object.keys(userData.registrations).forEach(editionKey => {\n            if (editionKey.startsWith('edition')) {\n                const edition = editionKey.replace('edition', '');\n                editions.push(edition);\n            }\n        });\n        \n        return editions;\n    }\n\n    /**\n     * Gets the active gameweek from settings\n     * @returns {string} Current active gameweek\n     */\n    getActiveGameweek() {\n        return this.currentActiveGameweek;\n    }\n\n    /**\n     * Sets the active gameweek\n     * @param {string} gameweek - Gameweek to set as active\n     */\n    setActiveGameweek(gameweek) {\n        this.currentActiveGameweek = gameweek;\n    }\n\n    /**\n     * Sets the active edition\n     * @param {number} edition - Edition to set as active\n     */\n    setActiveEdition(edition) {\n        this.currentActiveEdition = edition;\n    }\n\n    // ===== TEAM & STATUS UTILITIES =====\n    \n    /**\n     * Gets simple team status without Firebase calls\n     * @param {string} teamName - Name of the team\n     * @param {Object} userData - User data object\n     * @param {string} currentGameWeek - Current gameweek\n     * @param {string} userId - User ID\n     * @returns {Object} Team status object\n     */\n    getTeamStatusSimple(teamName, userData, currentGameWeek, userId) {\n        if (!userData || !userData.picks) {\n            return { status: 'not_picked', lives: 2 };\n        }\n        \n        const picks = userData.picks;\n        let teamPicked = false;\n        let pickGameweek = null;\n        \n        // Check if team was picked in any gameweek\n        Object.keys(picks).forEach(gameweekKey => {\n            if (picks[gameweekKey] === teamName) {\n                teamPicked = true;\n                pickGameweek = gameweekKey;\n            }\n        });\n        \n        if (!teamPicked) {\n            return { status: 'not_picked', lives: userData.lives || 2 };\n        }\n        \n        // Check if pick is still valid\n        const pick = { team: teamName, gameweek: pickGameweek };\n        const fixtures = this.getFixturesForGameweek(pickGameweek);\n        \n        if (fixtures && fixtures.length > 0) {\n            const result = this.checkPickStillValid(pick, fixtures);\n            if (result.valid) {\n                return { status: 'picked', lives: userData.lives || 2, gameweek: pickGameweek };\n            } else {\n                return { status: 'eliminated', lives: 0, gameweek: pickGameweek };\n            }\n        }\n        \n        return { status: 'picked', lives: userData.lives || 2, gameweek: pickGameweek };\n    }\n\n    /**\n     * Gets full team status with Firebase calls\n     * @param {string} teamName - Name of the team\n     * @param {Object} userData - User data object\n     * @param {string} currentGameWeek - Current gameweek\n     * @param {string} userId - User ID\n     * @returns {Promise<Object>} Team status object\n     */\n    async getTeamStatus(teamName, userData, currentGameWeek, userId) {\n        try {\n            // First try simple status\n            const simpleStatus = this.getTeamStatusSimple(teamName, userData, currentGameWeek, userId);\n            \n            // If we have enough info, return simple status\n            if (simpleStatus.status !== 'picked' || simpleStatus.gameweek === currentGameWeek) {\n                return simpleStatus;\n            }\n            \n            // Otherwise, fetch current fixtures to check validity\n            const fixtures = await this.getFixturesForGameweek(currentGameWeek);\n            if (fixtures && fixtures.length > 0) {\n                const pick = { team: teamName, gameweek: simpleStatus.gameweek };\n                const result = this.checkPickStillValid(pick, fixtures);\n                if (result.valid) {\n                    return { status: 'picked', lives: userData.lives || 2, gameweek: simpleStatus.gameweek };\n                } else {\n                    return { status: 'eliminated', lives: 0, gameweek: simpleStatus.gameweek };\n                }\n            }\n            \n            return simpleStatus;\n        } catch (error) {\n            console.error('Error getting team status:', error);\n            return { status: 'error', lives: userData.lives || 2 };\n        }\n    }\n\n    /**\n     * Converts status codes to readable text\n     * @param {string} status - Status code\n     * @returns {string} Readable status text\n     */\n    getStatusDisplay(status) {\n        const statusMap = {\n            'NS': 'Not Started',\n            'POSTP': 'Postponed',\n            'KO': 'Kicked Off',\n            'HT': 'Half-time',\n            'FT': 'Full-time',\n            'COMP': 'Completed'\n        };\n        return statusMap[status] || 'Not Started';\n    }\n\n    // ===== MOCK DATA UTILITIES =====\n    \n    /**\n     * Generates mock fixture data for testing\n     * @param {string} league - League identifier\n     * @param {string} gameweek - Gameweek number\n     * @returns {Array} Array of mock fixtures\n     */\n    getMockFixtures(league, gameweek) {\n        const teams = [\n            'Altrincham', 'Bromley', 'Chesterfield', 'Dagenham & Redbridge',\n            'Eastleigh', 'FC Halifax Town', 'Gateshead', 'Hartlepool United',\n            'Kidderminster Harriers', 'Maidenhead United', 'Oldham Athletic',\n            'Oxford City', 'Rochdale', 'Solihull Moors', 'Southend United',\n            'Wealdstone', 'Woking', 'Wrexham', 'Yeovil Town', 'York City'\n        ];\n        \n        const fixtures = [];\n        const shuffledTeams = [...teams].sort(() => Math.random() - 0.5);\n        \n        for (let i = 0; i < shuffledTeams.length; i += 2) {\n            if (i + 1 < shuffledTeams.length) {\n                fixtures.push({\n                    homeTeam: shuffledTeams[i],\n                    awayTeam: shuffledTeams[i + 1],\n                    date: new Date(Date.now() + (Math.random() * 7 * 24 * 60 * 60 * 1000)),\n                    venue: 'Home Ground',\n                    status: 'NS'\n                });\n            }\n        }\n        \n        return fixtures;\n    }\n\n    /**\n     * Generates mock score data for existing fixtures\n     * @param {Array} existingFixtures - Array of existing fixtures\n     * @returns {Array} Array of fixtures with mock scores\n     */\n    getMockScores(existingFixtures) {\n        if (!existingFixtures || !Array.isArray(existingFixtures)) {\n            return [];\n        }\n        \n        return existingFixtures.map(fixture => {\n            const homeScore = Math.floor(Math.random() * 4);\n            const awayScore = Math.floor(Math.random() * 4);\n            \n            return {\n                ...fixture,\n                homeScore: homeScore,\n                awayScore: awayScore,\n                status: 'FT'\n            };\n        });\n    }\n\n    /**\n     * Generates mock round data for TheSportsDB API\n     * @returns {Array} Array of mock rounds\n     */\n    getMockRounds() {\n        return [\n            { id: '1', name: 'Round 1' },\n            { id: '2', name: 'Round 2' },\n            { id: '3', name: 'Round 3' },\n            { id: '4', name: 'Round 4' },\n            { id: '5', name: 'Round 5' }\n        ];\n    }\n\n    /**\n     * Generates mock matchday data for Football Web Pages API\n     * @returns {Array} Array of mock matchdays\n     */\n    getMockMatchdays() {\n        return [\n            { id: '1', name: 'Matchday 1' },\n            { id: '2', name: 'Matchday 2' },\n            { id: '3', name: 'Matchday 3' },\n            { id: '4', name: 'Matchday 4' },\n            { id: '5', name: 'Matchday 5' }\n        ];\n    }\n\n    // ===== HELPER FUNCTIONS =====\n    \n    /**\n     * Calculates similarity between two team names\n     * @param {string} name1 - First team name\n     * @param {string} name2 - Second team name\n     * @returns {number} Similarity score (0-1)\n     */\n    calculateTeamNameSimilarity(name1, name2) {\n        if (!name1 || !name2) return 0;\n        \n        const normalize = (name) => name.toLowerCase().replace(/[^a-z0-9]/g, '');\n        const normalized1 = normalize(name1);\n        const normalized2 = normalize(name2);\n        \n        if (normalized1 === normalized2) return 1;\n        \n        // Simple Levenshtein distance calculation\n        const matrix = [];\n        for (let i = 0; i <= normalized1.length; i++) {\n            matrix[i] = [i];\n        }\n        for (let j = 0; j <= normalized2.length; j++) {\n            matrix[0][j] = j;\n        }\n        \n        for (let i = 1; i <= normalized1.length; i++) {\n            for (let j = 1; j <= normalized2.length; j++) {\n                if (normalized1[i - 1] === normalized2[j - 1]) {\n                    matrix[i][j] = matrix[i - 1][j - 1];\n                } else {\n                    matrix[i][j] = Math.min(\n                        matrix[i - 1][j] + 1,\n                        matrix[i][j - 1] + 1,\n                        matrix[i - 1][j - 1] + 1\n                    );\n                }\n            }\n        }\n        \n        const distance = matrix[normalized1.length][normalized2.length];\n        const maxLength = Math.max(normalized1.length, normalized2.length);\n        return 1 - (distance / maxLength);\n    }\n\n    /**\n     * Normalizes team names for comparison\n     * @param {string} teamName - Team name to normalize\n     * @returns {string} Normalized team name\n     */\n    normalizeTeamName(teamName) {\n        if (!teamName) return '';\n        \n        return teamName\n            .toLowerCase()\n            .replace(/[^a-z0-9]/g, '')\n            .replace(/fc|town|united|athletic|rovers|city|county/g, '');\n    }\n\n    /**\n     * Groups fixtures by date\n     * @param {Array} fixtures - Array of fixtures\n     * @returns {Object} Fixtures grouped by date\n     */\n    groupFixturesByDate(fixtures) {\n        if (!fixtures || !Array.isArray(fixtures)) {\n            return {};\n        }\n        \n        const grouped = {};\n        fixtures.forEach(fixture => {\n            const date = new Date(fixture.date);\n            const dateKey = date.toDateString();\n            \n            if (!grouped[dateKey]) {\n                grouped[dateKey] = [];\n            }\n            grouped[dateKey].push(fixture);\n        });\n        \n        return grouped;\n    }\n\n    // ===== REGISTRATION & DISPLAY UTILITIES =====\n    \n    /**\n     * Shows registration closed message\n     * @param {string} message - Message to display\n     */\n    showRegistrationClosed(message = 'Registration is currently closed') {\n        const statusElement = document.getElementById('registration-window-status');\n        if (statusElement) {\n            statusElement.innerHTML = `\n                <div class=\"registration-status\">\n                    <h3>Registration Closed</h3>\n                    <p>${message}</p>\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * Shows registration countdown timer\n     * @param {Date} endDate - End date for countdown\n     */\n    showRegistrationCountdown(endDate) {\n        const countdownElement = document.getElementById('registration-countdown');\n        const timerElement = document.getElementById('countdown-timer');\n        \n        if (!countdownElement || !timerElement) return;\n        \n        countdownElement.style.display = 'block';\n        \n        const updateCountdown = () => {\n            const now = new Date();\n            const timeLeft = endDate - now;\n            \n            if (timeLeft <= 0) {\n                timerElement.textContent = 'Registration Closed';\n                return;\n            }\n            \n            const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n            const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);\n            \n            timerElement.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;\n        };\n        \n        updateCountdown();\n        const interval = setInterval(updateCountdown, 1000);\n        \n        // Store interval for cleanup\n        this.registrationCountdownInterval = interval;\n    }\n\n    /**\n     * Shows next registration countdown timer\n     * @param {Date} startDate - Start date for countdown\n     */\n    showNextRegistrationCountdown(startDate) {\n        const nextCountdownElement = document.getElementById('next-registration-countdown');\n        const nextTimerElement = document.getElementById('next-countdown-timer');\n        \n        if (!nextCountdownElement || !nextTimerElement) return;\n        \n        nextCountdownElement.style.display = 'block';\n        \n        const updateCountdown = () => {\n            const now = new Date();\n            const timeLeft = startDate - now;\n            \n            if (timeLeft <= 0) {\n                nextTimerElement.textContent = 'Registration Open';\n                return;\n            }\n            \n            const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n            const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);\n            \n            nextTimerElement.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;\n        };\n        \n        updateCountdown();\n        const interval = setInterval(updateCountdown, 1000);\n        \n        // Store interval for cleanup\n        this.nextRegistrationCountdownInterval = interval;\n    }\n\n    /**\n     * Hides all registration countdown displays\n     */\n    hideRegistrationCountdowns() {\n        const countdownElement = document.getElementById('registration-countdown');\n        const nextCountdownElement = document.getElementById('next-registration-countdown');\n        \n        if (countdownElement) countdownElement.style.display = 'none';\n        if (nextCountdownElement) nextCountdownElement.style.display = 'none';\n        \n        // Clear intervals\n        if (this.registrationCountdownInterval) {\n            clearInterval(this.registrationCountdownInterval);\n        }\n        if (this.nextRegistrationCountdownInterval) {\n            clearInterval(this.nextRegistrationCountdownInterval);\n        }\n    }\n\n    /**\n     * Shows or hides the register button\n     * @param {boolean} show - Whether to show the button\n     */\n    showRegisterButton(show) {\n        const button = document.getElementById('register-now-button');\n        if (button) {\n            button.style.display = show ? 'inline-block' : 'none';\n        }\n    }\n\n    // ===== MISCELLANEOUS UTILITIES =====\n    \n    /**\n     * Resets As It Stands initialization flags\n     */\n    resetAsItStandsInitialization() {\n        // Reset any initialization flags for the As It Stands tab\n        window.asItStandsInitialized = false;\n        window.asItStandsDataLoaded = false;\n    }\n\n    /**\n     * Diagnoses As It Stands elements\n     */\n    diagnoseAsItStandsElements() {\n        const elements = {\n            'as-it-stands-tab': document.querySelector('[data-tab=\"as-it-stands\"]'),\n            'as-it-stands-content': document.querySelector('#as-it-stands-content'),\n            'gameweek-selector': document.querySelector('#as-it-stands-gameweek-selector'),\n            'standings-container': document.querySelector('#as-it-stands-standings')\n        };\n        \n        console.log('As It Stands Elements Diagnosis:', elements);\n        \n        Object.entries(elements).forEach(([name, element]) => {\n            if (element) {\n                console.log(`✅ ${name}: Found`, element);\n            } else {\n                console.log(`❌ ${name}: Not found`);\n            }\n        });\n    }\n\n    /**\n     * Manual testing function for As It Stands\n     */\n    testAsItStandsManually() {\n        console.log('🧪 Manual testing of As It Stands functionality...');\n        \n        // Test element diagnosis\n        this.diagnoseAsItStandsElements();\n        \n        // Test utility functions\n        console.log('Testing utility functions...');\n        console.log('getOrdinalSuffix(1):', this.getOrdinalSuffix(1));\n        console.log('getOrdinalSuffix(2):', this.getOrdinalSuffix(2));\n        console.log('getOrdinalSuffix(3):', this.getOrdinalSuffix(3));\n        console.log('getOrdinalSuffix(4):', this.getOrdinalSuffix(4));\n        \n        console.log('Manual testing completed');\n    }\n\n    // ===== PICK VALIDATION UTILITIES =====\n    \n    /**\n     * Checks if a pick is still valid\n     * @param {Object} pick - Pick object\n     * @param {Array} fixtures - Array of fixtures\n     * @returns {Object} Validation result\n     */\n    checkPickStillValid(pick, fixtures) {\n        if (!pick || !fixtures || !Array.isArray(fixtures)) {\n            return { valid: false, reason: 'Invalid input' };\n        }\n        \n        const fixture = fixtures.find(f => \n            f.homeTeam === pick.team || f.awayTeam === pick.team\n        );\n        \n        if (!fixture) {\n            return { valid: false, reason: 'Fixture not found' };\n        }\n        \n        if (fixture.status === 'NS' || fixture.status === 'KO' || fixture.status === 'HT') {\n            return { valid: true, reason: 'Game in progress or not started' };\n        }\n        \n        if (fixture.status === 'FT' || fixture.status === 'COMP') {\n            const homeScore = parseInt(fixture.homeScore) || 0;\n            const awayScore = parseInt(fixture.awayScore) || 0;\n            \n            if (fixture.homeTeam === pick.team) {\n                return { \n                    valid: homeScore > awayScore, \n                    reason: homeScore > awayScore ? 'Home team won' : 'Home team lost/drew'\n                };\n            } else if (fixture.awayTeam === pick.team) {\n                return { \n                    valid: awayScore > homeScore, \n                    reason: awayScore > homeScore ? 'Away team won' : 'Away team lost/drew'\n                };\n            }\n        }\n        \n        return { valid: false, reason: 'Unknown status' };\n    }\n\n    /**\n     * Gets fixtures for a specific gameweek\n     * @param {string} gameweek - Gameweek number\n     * @returns {Promise<Array>} Array of fixtures\n     */\n    async getFixturesForGameweek(gameweek) {\n        try {\n            const gameweekKey = gameweek === 'tiebreak' ? 'gwtiebreak' : `gw${gameweek}`;\n            const editionGameweekKey = `edition${this.currentActiveEdition}_${gameweekKey}`;\n            \n            let doc = await window.db.collection('fixtures').doc(editionGameweekKey).get();\n            if (!doc.exists) {\n                doc = await window.db.collection('fixtures').doc(gameweekKey).get();\n            }\n            \n            if (doc.exists) {\n                return doc.data().fixtures || [];\n            }\n            return [];\n        } catch (error) {\n            console.error('Error getting fixtures for gameweek:', error);\n            return [];\n        }\n    }\n\n    // ===== INITIALIZATION & CLEANUP =====\n    \n    /**\n     * Initializes the utilities manager\n     */\n    initializeUtilitiesManager() {\n        console.log('🔧 Initializing Utilities Manager...');\n        \n        // Set up any event listeners or initialization logic here\n        this.setupEventListeners();\n        \n        console.log('✅ Utilities Manager initialized successfully');\n    }\n\n    /**\n     * Sets up event listeners for utility functions\n     */\n    setupEventListeners() {\n        // Add any event listeners needed for utility functions\n        console.log('🔧 Setting up utility event listeners...');\n    }\n\n    /**\n     * Cleans up resources and intervals\n     */\n    cleanup() {\n        console.log('🧹 Cleaning up Utilities Manager...');\n        \n        // Clear any intervals\n        if (this.registrationCountdownInterval) {\n            clearInterval(this.registrationCountdownInterval);\n        }\n        if (this.nextRegistrationCountdownInterval) {\n            clearInterval(this.nextRegistrationCountdownInterval);\n        }\n        \n        console.log('✅ Utilities Manager cleanup completed');\n    }\n}\n\n/**\n * DOM Ready Utilities\n * Replaces setTimeout patterns with proper event handling\n */\nexport class DOMReadyManager {\n    constructor() {\n        this.readyCallbacks = [];\n        this.isReady = false;\n        this.init();\n    }\n\n    init() {\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.handleReady());\n        } else {\n            this.handleReady();\n        }\n    }\n\n    handleReady() {\n        this.isReady = true;\n        this.readyCallbacks.forEach(callback => callback());\n        this.readyCallbacks = [];\n    }\n\n    /**\n     * Execute callback when DOM is ready\n     * @param {Function} callback - Function to execute\n     */\n    ready(callback) {\n        if (this.isReady) {\n            callback();\n        } else {\n            this.readyCallbacks.push(callback);\n        }\n    }\n\n    /**\n     * Wait for an element to be available in the DOM\n     * @param {string} selector - CSS selector for the element\n     * @param {number} timeout - Maximum time to wait in milliseconds\n     * @returns {Promise<Element>} - Promise that resolves with the element\n     */\n    waitForElement(selector, timeout = 5000) {\n        return new Promise((resolve, reject) => {\n            const element = document.querySelector(selector);\n            if (element) {\n                resolve(element);\n                return;\n            }\n\n            const observer = new MutationObserver((mutations) => {\n                const element = document.querySelector(selector);\n                if (element) {\n                    observer.disconnect();\n                    resolve(element);\n                }\n            });\n\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true\n            });\n\n            // Set timeout\n            setTimeout(() => {\n                observer.disconnect();\n                reject(new Error(`Element ${selector} not found within ${timeout}ms`));\n            }, timeout);\n        });\n    }\n\n    /**\n     * Wait for multiple elements to be available\n     * @param {string[]} selectors - Array of CSS selectors\n     * @param {number} timeout - Maximum time to wait in milliseconds\n     * @returns {Promise<Element[]>} - Promise that resolves with the elements\n     */\n    waitForElements(selectors, timeout = 5000) {\n        return Promise.all(selectors.map(selector => this.waitForElement(selector, timeout)));\n    }\n}\n\n// Export the class\nexport default UtilitiesManager;\n","/**\n * Application State Management\n * Centralizes application state to replace global variables\n */\nexport class AppState {\n    constructor() {\n        this.state = {\n            currentActiveEdition: 'test',\n            currentActiveGameweek: '1',\n            user: null,\n            isAuthenticated: false,\n            isLoading: false,\n            error: null,\n            notifications: []\n        };\n        \n        this.listeners = new Map();\n        this.history = [];\n        this.maxHistory = 50;\n    }\n\n    /**\n     * Get current state\n     * @param {string} key - Optional key to get specific state property\n     * @returns {any} - Current state or specific property\n     */\n    get(key = null) {\n        if (key) {\n            return this.state[key];\n        }\n        return { ...this.state };\n    }\n\n    /**\n     * Update state\n     * @param {Object|Function} update - Object with updates or function that receives current state\n     * @param {string} action - Optional action name for debugging\n     */\n    set(update, action = 'state-update') {\n        const previousState = { ...this.state };\n        \n        if (typeof update === 'function') {\n            this.state = { ...this.state, ...update(this.state) };\n        } else {\n            this.state = { ...this.state, ...update };\n        }\n\n        // Add to history\n        this.addToHistory(previousState, action);\n\n        // Notify listeners\n        this.notifyListeners(previousState);\n    }\n\n    /**\n     * Subscribe to state changes\n     * @param {string} key - State key to watch (optional)\n     * @param {Function} callback - Function to call when state changes\n     * @returns {Function} - Unsubscribe function\n     */\n    subscribe(key, callback) {\n        if (typeof key === 'function') {\n            callback = key;\n            key = null;\n        }\n\n        const id = Math.random().toString(36).substr(2, 9);\n        this.listeners.set(id, { key, callback });\n\n        return () => {\n            this.listeners.delete(id);\n        };\n    }\n\n    /**\n     * Notify all listeners of state changes\n     * @param {Object} previousState - Previous state for comparison\n     */\n    notifyListeners(previousState) {\n        this.listeners.forEach(({ key, callback }) => {\n            if (key) {\n                // Only notify if specific key changed\n                if (this.state[key] !== previousState[key]) {\n                    callback(this.state[key], previousState[key]);\n                }\n            } else {\n                // Notify for any change\n                callback(this.state, previousState);\n            }\n        });\n    }\n\n    /**\n     * Add state change to history\n     * @param {Object} previousState - Previous state\n     * @param {string} action - Action that caused the change\n     */\n    addToHistory(previousState, action) {\n        this.history.push({\n            timestamp: Date.now(),\n            action,\n            previousState,\n            currentState: { ...this.state }\n        });\n\n        // Keep history size manageable\n        if (this.history.length > this.maxHistory) {\n            this.history.shift();\n        }\n    }\n\n    /**\n     * Get state history\n     * @returns {Array} - Array of state changes\n     */\n    getHistory() {\n        return [...this.history];\n    }\n\n    /**\n     * Reset state to initial values\n     */\n    reset() {\n        this.set({\n            currentActiveEdition: 1,\n            currentActiveGameweek: '1',\n            user: null,\n            isAuthenticated: false,\n            isLoading: false,\n            error: null,\n            notifications: []\n        }, 'state-reset');\n    }\n\n    /**\n     * Set current active edition\n     * @param {number} edition - Edition number\n     */\n    setActiveEdition(edition) {\n        this.set({ currentActiveEdition: edition }, 'set-active-edition');\n    }\n\n    /**\n     * Set current active gameweek\n     * @param {string} gameweek - Gameweek identifier\n     */\n    setActiveGameweek(gameweek) {\n        this.set({ currentActiveGameweek: gameweek }, 'set-active-gameweek');\n    }\n\n    /**\n     * Set user authentication state\n     * @param {Object} user - User object\n     * @param {boolean} isAuthenticated - Authentication status\n     */\n    setAuthState(user, isAuthenticated) {\n        this.set({ user, isAuthenticated }, 'set-auth-state');\n    }\n\n    /**\n     * Set loading state\n     * @param {boolean} isLoading - Loading status\n     */\n    setLoading(isLoading) {\n        this.set({ isLoading }, 'set-loading');\n    }\n\n    /**\n     * Set error state\n     * @param {string|null} error - Error message or null to clear\n     */\n    setError(error) {\n        this.set({ error }, 'set-error');\n    }\n\n    /**\n     * Add notification\n     * @param {Object} notification - Notification object\n     */\n    addNotification(notification) {\n        const notifications = [...this.state.notifications, {\n            id: Date.now(),\n            timestamp: Date.now(),\n            ...notification\n        }];\n        this.set({ notifications }, 'add-notification');\n    }\n\n    /**\n     * Remove notification\n     * @param {string} id - Notification ID\n     */\n    removeNotification(id) {\n        const notifications = this.state.notifications.filter(n => n.id !== id);\n        this.set({ notifications }, 'remove-notification');\n    }\n\n    /**\n     * Clear all notifications\n     */\n    clearNotifications() {\n        this.set({ notifications: [] }, 'clear-notifications');\n    }\n}\n\n// Create singleton instance\nexport const appState = new AppState();\n\n// Export for backward compatibility\nexport default appState;\n","// Main Application Entry Point\n// This file orchestrates the application and imports modular components\n\nconsole.log('🔍 src/app.js file is being loaded and parsed...');\n\nimport AuthManager from './modules/auth.js';\nimport RegistrationManager from './modules/registration.js';\nimport FixturesManager from './modules/fixtures.js';\nimport ScoresManager from './modules/scores/index.js';\nimport UIManager from './modules/ui.js';\nimport GameLogicManager from './modules/gameLogic.js';\nimport MobileNavigationManager from './modules/mobileNavigation.js';\nimport { AdminManager } from './modules/admin/index.js';\nimport DatabaseManager from './modules/database.js'; // New Database Module import\nimport ApiManager from './modules/api/index.js'; // New modular API Module import\nimport UtilitiesManager, { DOMReadyManager } from './modules/utilities.js'; // New Utilities Module import\nimport { appState } from './modules/state.js'; // New State Management import\n\nconsole.log('🔍 Imports completed, about to define App class...');\n\n// Global application state\nclass App {\n    constructor() {\n        this.db = null;\n        this.auth = null;\n        this.authManager = null;\n        this.registrationManager = null;\n        this.fixturesManager = null;\n        this.scoresManager = null;\n        this.uiManager = null;\n        this.gameLogicManager = null;\n        this.mobileNavigationManager = null;\n        this.adminManagementManager = null;\n        this.databaseManager = null; // New Database Manager\n        this.apiManager = null; // New API Manager\n        this.utilitiesManager = null; // New Utilities Manager\n        this.domReadyManager = null; // New DOM Ready Manager\n        this.initialized = false;\n        \n        // Use state management instead of global variables\n        this.state = appState;\n    }\n\n    // Initialize the app\n    async initialize() {\n        try {\n            console.log('🚀 Initializing LOS App...');\n            \n            // Initialize DOM ready manager\n            this.domReadyManager = new DOMReadyManager();\n            \n            // Wait for Firebase to be available\n            await this.waitForFirebase();\n            \n            // Initialize managers\n            await this.initializeManagers();\n            \n            // Initialize page-specific functionality\n            await this.initializePageSpecificFeatures();\n            \n            // Expose admin functions globally for admin.html\n            this.exposeAdminFunctionsGlobally();\n            \n            console.log('✅ LOS App initialized successfully!');\n            \n        } catch (error) {\n            console.error('❌ Error initializing LOS App:', error);\n            this.state.setError(error.message);\n        }\n    }\n\n    // Wait for Firebase to be available\n    async waitForFirebase() {\n        return new Promise((resolve) => {\n            const checkFirebase = () => {\n                if (window.db && window.auth) {\n                    this.db = window.db;\n                    this.auth = window.auth;\n                    console.log('✅ Firebase references available');\n                    resolve();\n                } else {\n                    console.log('⏳ Waiting for Firebase...');\n                    setTimeout(checkFirebase, 100);\n                }\n            };\n            checkFirebase();\n        });\n    }\n\n    // Initialize all managers\n    async initializeManagers() {\n        // Initialize managers\n        this.authManager = new AuthManager();\n        this.registrationManager = new RegistrationManager(this.db, this.auth);\n        this.fixturesManager = new FixturesManager(this.db);\n        this.apiManager = new ApiManager(this.db, this.state.get('currentActiveEdition')); // Initialize API Manager first\n        this.scoresManager = new ScoresManager(this.db, this.state.get('currentActiveEdition'), this.state.get('currentActiveGameweek'), this.apiManager);\n        this.uiManager = new UIManager(this.db);\n        this.gameLogicManager = new GameLogicManager(this.db);\n        this.mobileNavigationManager = new MobileNavigationManager(this.db);\n        this.adminManagementManager = new AdminManager(this.db, this.fixturesManager, this.scoresManager);\n        this.databaseManager = new DatabaseManager(); // Initialize Database Manager\n        this.utilitiesManager = new UtilitiesManager(); // Initialize Utilities Manager\n        \n        // Initialize auth manager\n        await this.authManager.initialize(this.db, this.auth);\n        \n        // Initialize fixtures manager\n        this.fixturesManager.initializeFixtureManagement();\n        \n        // Initialize API manager first (needed by scores manager)\n        this.apiManager.initializeApiManager();\n        \n        // Initialize scores manager\n        this.scoresManager.initializeScoresManagement();\n        \n        // Initialize UI manager (but don't initialize registration window yet)\n        this.uiManager.initializeUIManagement();\n        \n        // Initialize game logic manager\n        this.gameLogicManager.initializeGameLogicManagement();\n        \n        // Initialize mobile navigation manager\n        this.mobileNavigationManager.initializeMobileNavigationManagement();\n        \n        // Initialize admin management manager\n        this.adminManagementManager.initializeAdminManagement();\n        \n        // Initialize database manager\n        this.databaseManager.initializeDatabaseManager();\n        \n        // Initialize utilities manager\n        this.utilitiesManager.initializeUtilitiesManager();\n        \n        // Set up global references for backward compatibility\n        this.setupGlobalReferences();\n        \n        // Now initialize registration window display after global references are set\n        if (this.uiManager) {\n            this.uiManager.initializeRegistrationWindowDisplay();\n        }\n    }\n\n    // Set up global references for backward compatibility\n    setupGlobalReferences() {\n        // Global managers\n        window.authManager = this.authManager;\n        window.registrationManager = this.registrationManager;\n        window.fixturesManager = this.fixturesManager;\n        window.scoresManager = this.scoresManager;\n        window.uiManager = this.uiManager;\n        window.gameLogicManager = this.gameLogicManager;\n        window.mobileNavigationManager = this.mobileNavigationManager;\n        window.adminManagementManager = this.adminManagementManager;\n        window.databaseManager = this.databaseManager; // Expose Database Manager\n        window.apiManager = this.apiManager; // Expose API Manager\n        window.utilitiesManager = this.utilitiesManager; // Expose Utilities Manager\n        window.adminManagementManager = this.adminManagementManager; // Expose Admin Management Manager\n        \n        // Global app instance\n        window.app = this;\n        \n        // Global variables for backward compatibility\n        window.currentActiveEdition = this.state.get('currentActiveEdition');\n        window.currentActiveGameweek = this.state.get('currentActiveGameweek');\n        \n        // Global functions for backward compatibility\n        this.setupGlobalFunctions();\n        \n        console.log('🔗 Global references set up for backward compatibility');\n    }\n\n    // Set up global functions for backward compatibility\n    setupGlobalFunctions() {\n        // Fixtures-related functions - REMOVED: Now handled by FixturesManager directly\n        // window.initializeFixtureManagement = () => this.fixturesManager.initializeFixtureManagement();\n        // window.addFixtureRow = () => this.fixturesManager.addFixtureRow();\n        // window.removeFixtureRow = (button) => this.fixturesManager.removeFixtureRow(button);\n        // window.saveFixtures = () => this.fixturesManager.saveFixtures();\n        // window.checkFixtures = () => this.fixturesManager.checkFixtures();\n        // window.editFixtures = () => this.fixturesManager.editFixtures();\n        // window.switchToViewMode = () => this.fixturesManager.switchToViewMode();\n        // window.loadFixturesForGameweek = () => this.fixturesManager.loadFixturesForGameweek();\n        // window.reallocateFixtures = () => this.fixturesManager.reallocateFixtures();\n        // window.deleteAllFixtures = () => this.fixturesManager.deleteAllFixtures();\n        window.loadFixturesForDeadline = (gameweek, userData, userId) => this.fixturesManager.loadFixturesForDeadline(gameweek, userData, userId);\n        // window.loadMobileFixturesForDeadline = (gameweek, userData, userId) => this.fixturesManager.loadMobileFixturesForDeadline(gameweek, userData, userId);\n        // window.switchToFixturesTab = () => this.fixturesManager.switchToFixturesTab();\n        // window.renderFixturesDisplay = (fixtures, userData, gameweek, userId) => this.fixturesManager.renderFixturesDisplay(fixtures, userData, gameweek, userId);\n        // window.renderMobileFixturesDisplay = (fixtures, userData, gameweek, userId) => this.fixturesManager.renderMobileFixturesDisplay(fixtures, userData, gameweek, userId);\n        // window.renderAsItStandsStandings = (players, fixtures, gameweek, edition, platform) => this.fixturesManager.renderAsItStandsStandings(players, fixtures, gameweek, edition, platform);\n        // window.loadCurrentGameweekFixtures = () => this.fixturesManager.loadCurrentGameweekFixtures();\n        // window.saveFootballWebPagesSettings = () => this.fixturesManager.saveFootballWebPagesSettings();\n        \n                       // Scores-related functions - REMOVED: Now handled by ScoresManager directly\n               // window.loadScoresForGameweek = () => this.scoresManager.loadScoresForGameweek();\n               // window.saveScores = () => this.scoresManager.saveScores();\n               // window.renderPlayerScores = (fixtures, gameweek) => this.scoresManager.renderPlayerScores(fixtures, gameweek);\n               // window.renderDesktopPlayerScores = (fixtures, gameweek) => this.scoresManager.renderDesktopPlayerScores(fixtures, gameweek);\n               // window.renderMobilePlayerScores = (fixtures, gameweek) => this.scoresManager.renderMobilePlayerScores(fixtures, gameweek);\n               // window.checkPickStillValid = (pick, fixtures) => this.scoresManager.checkPickStillValid(pick, fixtures);\n               // window.calculatePickResult = (pick, fixtures) => this.scoresManager.calculatePickResult(pick, fixtures);\n               // window.processResults = (gameweek, fixtures) => this.scoresManager.processResults(gameweek, fixtures);\n               // window.startAutoScoreUpdates = (gameweek) => this.scoresManager.startAutoScoreUpdates(gameweek);\n               // window.stopAutoScoreUpdates = () => this.scoresManager.stopAutoScoreUpdates();\n               // window.startRealTimeScoreUpdates = (gameweek) => this.scoresManager.startRealTimeScoreUpdates(gameweek);\n               // window.stopRealTimeScoreUpdates = () => this.scoresManager.stopRealTimeScoreUpdates();\n               // window.importScoresFromFootballWebPages = (gameweek) => this.scoresManager.importScoresFromFootballWebPages(gameweek);\n               // window.importScoresFromFile = (file, gameweek) => this.scoresManager.importScoresFromFile(file, gameweek);\n               // window.testFootballWebPagesAPI = () => this.scoresManager.testFootballWebPagesAPI();\n        window.loadPlayerScores = () => this.scoresManager.loadPlayerScores();\n        window.loadScoresForGameweek = () => this.scoresManager.loadScoresForGameweek();\n               \n                       // UI-related functions - REMOVED: Now handled by UIManager event listeners\n        // window.showModal = (content) => this.uiManager.showModal(content);\n        // window.closeUserDetailsModal = () => this.uiManager.closeUserDetailsModal();\n        // window.initializeDesktopTabs = () => this.uiManager.initializeDesktopTabs();\n        window.renderDashboard = (user) => this.uiManager.renderDashboard(user);\n        // window.initializeTestimonialModal = () => this.uiManager.initializeTestimonialModal();\n        // window.initializeRegistrationWindowDisplay = () => this.uiManager.initializeRegistrationWindowDisplay();\n        // window.updateRegistrationWindowDisplay = () => this.uiManager.updateRegistrationWindowDisplay();\n        // window.showRegistrationCountdown = (endDate) => this.uiManager.showRegistrationCountdown(endDate);\n        // window.showNextRegistrationCountdown = (startDate) => this.uiManager.showNextRegistrationCountdown(startDate);\n        // window.hideRegistrationCountdowns = () => this.uiManager.hideRegistrationCountdowns();\n        // window.showRegisterButton = (show) => this.uiManager.showRegisterButton(show);\n        // window.initializeVidiprinter = () => this.uiManager.initializeVidiprinter();\n        // window.startVidiprinter = () => this.uiManager.startVidiprinter();\n        // window.stopVidiprinter = () => this.uiManager.stopVidiprinter();\n        // window.clearVidiprinterFeed = () => this.uiManager.clearVidiprinterFeed();\n        // window.toggleAutoScroll = () => this.uiManager.toggleAutoScroll();\n        \n        // Game Logic-related functions - REMOVED: Now handled by GameLogicManager directly\n        // window.generatePickHistory = (picks) => this.gameLogicManager.generatePickHistory(picks);\n        window.renderPickHistory = (picks, container, userId, userData) => this.gameLogicManager.renderPickHistory(picks, container, userId, userData);\n        window.initializeGameweekNavigation = (currentGameWeek, userData, userId) => this.gameLogicManager.initializeGameweekNavigation(currentGameWeek, userData, userId);\n        window.initializeMobileGameweekNavigation = (currentGameWeek, userData, userId) => this.mobileNavigationManager.initializeMobileGameweekNavigation(currentGameWeek, userData, userId);\n        window.navigateToGameweek = (gameweek, userData, userId) => this.gameLogicManager.navigateToGameweek(gameweek, userData, userId);\n        window.navigateGameweek = (currentGameWeek, direction, userData, userId) => this.gameLogicManager.navigateGameweek(currentGameWeek, direction, userData, userId);\n        window.checkAndAssignAutoPicks = (userData, currentGameWeek, userId) => this.gameLogicManager.checkAndAssignAutoPicks(userData, currentGameWeek, userId);\n        // window.updatePickStatusHeader = (currentGameWeek, userData, userId) => this.gameLogicManager.updatePickStatusHeader(currentGameWeek, userData, userId);\n        // window.updateMobilePickStatusHeader = (currentGameWeek, userData, userId) => this.mobileNavigationManager.updateMobilePickStatusHeader(currentGameWeek, userData, userId);\n        window.startDeadlineChecker = () => this.gameLogicManager.startDeadlineChecker();\n        // window.initializeEnhancedVidiprinter = () => this.gameLogicManager.initializeEnhancedVidiprinter();\n        window.updateNavigationButtons = (currentGameWeek, prevButton, nextButton) => this.gameLogicManager.updateNavigationButtons(currentGameWeek, prevButton, nextButton);\n        window.updateActiveTab = (currentGameWeek, gameweekTabs) => this.gameLogicManager.updateActiveTab(currentGameWeek, gameweekTabs);\n        window.updateTabStates = (gameweekTabs) => this.gameLogicManager.updateTabStates(gameweekTabs);\n        window.removePick = (userId, gameweekKey) => this.gameLogicManager.removePick(userId, gameweekKey);\n        window.makePick = (userId, gameweek) => this.gameLogicManager.makePick(userId, gameweek);\n        window.selectTeamAsTempPick = (teamName, gameweek, userId) => this.gameLogicManager.selectTeamAsTempPick(teamName, gameweek, userId);\n        window.refreshDisplayAfterPickUpdate = (gameweek, userId) => this.gameLogicManager.refreshDisplayAfterPickUpdate(gameweek, userId);\n        window.saveTempPick = (gameweek, userId) => this.gameLogicManager.saveTempPick(gameweek, userId);\n        window.releaseFuturePick = (teamName, gameweek, userId) => this.gameLogicManager.releaseFuturePick(teamName, gameweek, userId);\n        window.selectTeamAsPick = (teamName, gameweek, userId) => this.gameLogicManager.selectTeamAsPick(teamName, gameweek, userId);\n        window.assignAutoPick = (userData, gameweek, userId) => this.gameLogicManager.assignAutoPick(userData, gameweek, userId);\n        window.getDeadlineDateForGameweek = (gameweek) => this.gameLogicManager.getDeadlineDateForGameweek(gameweek);\n        window.formatDeadlineDate = (date) => this.gameLogicManager.formatDeadlineDate(date);\n        window.getOrdinalSuffix = (day) => this.gameLogicManager.getOrdinalSuffix(day);\n        window.checkDeadlineForGameweek = (gameweek, edition) => this.gameLogicManager.checkDeadlineForGameweek(gameweek, edition);\n        window.batchCheckDeadlines = (gameweeks, edition) => this.gameLogicManager.batchCheckDeadlines(gameweeks, edition);\n        window.getTeamStatusSimple = (teamName, userData, currentGameWeek, userId) => this.gameLogicManager.getTeamStatusSimple(teamName, userData, currentGameWeek, userId);\n        window.getTeamStatus = (teamName, userData, currentGameWeek, userId) => this.gameLogicManager.getTeamStatus(teamName, userData, currentGameWeek, userId);\n        window.getUserEdition = (userData) => this.gameLogicManager.getUserEdition(userData);\n        window.getUserRegisteredEditions = (userData) => this.gameLogicManager.getUserRegisteredEditions(userData);\n        window.getActiveGameweek = () => this.gameLogicManager.getActiveGameweek();\n        \n        // Mobile Navigation-related functions - REMOVED: Now handled by MobileNavigationManager directly\n        window.initializeMobileTabs = () => this.mobileNavigationManager.initializeMobileTabs();\n        window.loadMobileFixturesForDeadline = (gameweek, userData, userId) => this.fixturesManager.loadMobileFixturesForDeadline(gameweek, userData, userId);\n        window.renderMobileFixturesDisplay = (fixtures, userData, currentGameWeek, userId) => this.mobileNavigationManager.renderMobileFixturesDisplay(fixtures, userData, currentGameWeek, userId);\n        window.updateMobilePickStatusHeader = (gameweek, userData, userId) => this.mobileNavigationManager.updateMobilePickStatusHeader(gameweek, userData, userId);\n        window.initializeMobileGameweekNavigation = (currentGameWeek, userData, userId) => this.mobileNavigationManager.initializeMobileGameweekNavigation(currentGameWeek, userData, userId);\n        window.updateMobileNavigationButtons = (currentGameWeek, prevButton, nextButton) => this.mobileNavigationManager.updateMobileNavigationButtons(currentGameWeek, prevButton, nextButton);\n        window.updateMobileActiveTab = (currentGameWeek, gameweekTabs) => this.mobileNavigationManager.updateMobileActiveTab(currentGameWeek, gameweekTabs);\n        window.updateMobileTabStates = (gameweekTabs) => this.mobileNavigationManager.updateMobileTabStates(gameweekTabs);\n        window.navigateMobileGameweek = (currentGameWeek, direction, userData, userId) => this.mobileNavigationManager.navigateMobileGameweek(currentGameWeek, direction, userData, userId);\n        window.navigateToMobileGameweek = (gameweek, userData, userId) => this.mobileNavigationManager.navigateToMobileGameweek(gameweek, userData, userId);\n        window.renderMobilePlayerScores = (fixtures, gameweek) => this.mobileNavigationManager.renderMobilePlayerScores(fixtures, gameweek);\n        window.toggleTestimonials = () => this.mobileNavigationManager.toggleTestimonials();\n        window.switchToFixturesTab = () => this.mobileNavigationManager.switchToFixturesTab();\n        \n                 // Admin Management-related functions - REMOVED: Now handled by AdminManagementManager directly\n         // window.buildAdminDashboard = (settings) => this.adminManagementManager.buildAdminDashboard(settings);\n         // window.showPlayerManagement = (type) => this.adminManagementManager.showPlayerManagement(type);\n         // window.closePlayerManagement = () => this.adminManagementManager.closePlayerManagement();\n         // window.closePlayerEdit = () => this.adminManagementManager.closePlayerEdit();\n         // window.loadPlayersForManagement = () => this.adminManagementManager.loadPlayersForManagement();\n         // window.displayPlayers = (players) => this.adminManagementManager.displayPlayers(players);\n         // window.searchPlayers = () => this.adminManagementManager.searchPlayers();\n         // window.filterPlayers = () => this.adminManagementManager.filterPlayers();\n         // window.editPlayer = (playerId) => this.adminManagementManager.editPlayer(playerId);\n         // window.savePlayerEdit = (event) => this.adminManagementManager.savePlayerEdit(event);\n         // window.archivePlayer = (playerId) => this.adminManagementManager.archivePlayer(playerId);\n         // window.unarchivePlayer = (playerId) => this.adminManagementManager.unarchivePlayer(playerId);\n         // window.addToTestWeeks = (playerId) => this.adminManagementManager.addToTestWeeks(playerId);\n         // window.deletePlayer = (playerId) => this.adminManagementManager.deletePlayer(playerId);\n         // window.resetAllPlayerLives = () => this.adminManagementManager.resetAllPlayerLives();\n         window.resetTestLives = () => this.adminManagementManager.resetTestLives();\n         window.saveApiSuspensionSettings = () => this.adminManagementManager.saveApiSuspensionSettings();\n         // window.generateTestScores = () => this.adminManagementManager.generateTestScores();\n         // window.initializeEnhancedVidiprinter = () => this.adminManagementManager.initializeEnhancedVidiprinter();\n         // window.startEnhancedVidiprinter = () => this.adminManagementManager.startEnhancedVidiprinter();\n         // window.stopEnhancedVidiprinter = () => this.adminManagementManager.stopEnhancedVidiprinter();\n         // window.clearEnhancedVidiprinterFeed = () => this.adminManagementManager.clearEnhancedVidiprinterFeed();\n         // window.saveCompetitionSettings = () => this.adminManagementManager.saveCompetitionSettings();\n        \n        // Database-related functions - REMOVED: Now handled by DatabaseManager directly\n        // window.initializeDatabase = () => this.databaseManager.initializeDatabase();\n        // window.checkAndInitializeDatabase = () => this.databaseManager.checkAndInitializeDatabase();\n        // window.getUserDocument = (userId) => this.databaseManager.getUserDocument(userId);\n        // window.updateUserDocument = (userId, updateData) => this.databaseManager.updateUserDocument(userId, updateData);\n        // window.saveEditionPreference = (edition, userId) => this.databaseManager.saveEditionPreference(edition, userId);\n        // window.saveUserDefaultEdition = (userId) => this.databaseManager.saveUserDefaultEdition(userId);\n        // window.getAllUsers = () => this.databaseManager.getAllUsers();\n        // window.getUsersByEdition = (edition) => this.databaseManager.getUsersByEdition(edition);\n        // window.getUsersOrderedByName = (limit) => this.databaseManager.getUsersOrderedByName(limit);\n        // window.getSettingsDocument = (docId) => this.databaseManager.getSettingsDocument(docId);\n        // window.setSettingsDocument = (docId, settings) => this.databaseManager.setSettingsDocument(docId, settings);\n        // window.getRegistrationSettings = (edition) => this.databaseManager.getRegistrationSettings(edition);\n        // window.setRegistrationSettings = (edition, settings) => this.databaseManager.setRegistrationSettings(edition, settings);\n        // window.getFixturesDocument = (gameweekKey) => this.databaseManager.getFixturesDocument(gameweekKey);\n        // window.updateFixturesDocument = (gameweekKey, fixturesData) => this.databaseManager.updateFixturesDocument(gameweekKey, fixturesData);\n        // window.deleteFixturesDocument = (gameweekKey) => this.databaseManager.deleteFixturesDocument(gameweekKey);\n        // window.updateUserPick = (userId, gameweekKey, pickData) => this.databaseManager.updateUserPick(userId, gameweekKey, pickData);\n        // window.removeUserPick = (userId, gameweekKey) => this.databaseManager.removeUserPick(userId, gameweekKey);\n        // window.getUserPicks = (userId) => this.databaseManager.getUserPicks(userId);\n        // window.updateUserRegistration = (userId, edition, registrationData) => this.databaseManager.updateUserRegistration(userId, edition, registrationData);\n        // window.removeUserRegistration = (userId, edition) => this.databaseManager.removeUserRegistration(userId, edition);\n        // window.checkAdminStatus = (userId) => this.databaseManager.checkAdminStatus(userId);\n        // window.updateUserStatus = (userId, status, additionalData) => this.databaseManager.updateUserStatus(userId, status, additionalData);\n        // window.resetAllPlayerLives = () => this.databaseManager.resetAllPlayerLives();\n        // window.batchUpdateUsers = (updates) => this.databaseManager.batchUpdateUsers(updates);\n        // window.batchDeleteUsers = (userIds) => this.databaseManager.batchDeleteUsers(userIds);\n        // window.startRealTimeScoreUpdates = (gameweek, callback) => this.databaseManager.startRealTimeScoreUpdates(gameweek, callback);\n        // window.stopRealTimeScoreUpdates = () => this.databaseManager.stopRealTimeScoreUpdates();\n        // window.startEnhancedVidiprinter = (callback) => this.databaseManager.startEnhancedVidiprinter(callback);\n        // window.stopEnhancedVidiprinter = () => this.databaseManager.stopEnhancedVidiprinter();\n        // window.startDeadlineChecker = (callback) => this.databaseManager.startDeadlineChecker(callback);\n        // window.stopDeadlineChecker = () => this.databaseManager.stopDeadlineChecker();\n        // window.startAdminSessionMonitoring = (userId, timeoutCallback, warningCallback) => this.databaseManager.startAdminSessionMonitoring(userId, timeoutCallback, warningCallback);\n        // window.stopAdminSessionMonitoring = () => this.databaseManager.stopAdminSessionMonitoring();\n        // window.startAdminTokenRefresh = (user, refreshCallback) => this.databaseManager.startAdminTokenRefresh(user, refreshCallback);\n        // window.stopAdminTokenRefresh = () => this.databaseManager.stopAdminTokenRefresh();\n        // window.getDatabaseReference = () => this.databaseManager.getDatabaseReference();\n        // window.isDatabaseInitialized = () => this.databaseManager.isDatabaseInitialized();\n        \n        // API-related functions - REMOVED: Now handled by ApiManager directly\n        // window.initializeFootballWebPagesAPI = () => this.apiManager.initializeFootballWebPagesAPI();\n        // window.testApiConnection = () => this.apiManager.testApiConnection();\n        // window.checkApiKeyStatus = () => this.apiManager.checkApiKeyStatus();\n        // window.fetchAvailableMatchdays = (league, season) => this.apiManager.fetchAvailableMatchdays(league, season);\n        // window.fetchSingleFixtures = (league, season, matchday) => this.apiManager.fetchSingleFixtures(league, season, matchday);\n        // window.fetchSingleScores = (league, season, matchday) => this.apiManager.fetchSingleScores(league, season, matchday);\n        // window.fetchDateRangeFixtures = (league, season, startDate, endDate) => this.apiManager.fetchDateRangeFixtures(league, season, startDate, endDate);\n        // window.fetchAllFixtures = (league, season) => this.apiManager.fetchAllFixtures(league, season);\n        // window.fetchFixturesFromFootballWebPages = (league, season, matchday, startDate, endDate) => this.apiManager.fetchFixturesFromFootballWebPages(league, season, matchday, startDate, endDate);\n        // window.fetchScoresFromFootballWebPages = (league, season, matchday, existingFixtures) => this.apiManager.fetchScoresFromFootballWebPages(league, season, matchday, existingFixtures);\n        // Note: TheSportsDB API functions removed - using Football Web Pages API instead\n        // window.fetchEnhancedVidiprinterData = (competition, team, date) => this.apiManager.fetchEnhancedVidiprinterData(competition, team, date);\n        // window.fetchVidiprinterData = (competition) => this.apiManager.fetchVidiprinterData(competition);\n        // window.fetchScoresViaNetlify = (league, season, matchday, fixtures, startDate, endDate) => this.apiManager.fetchScoresViaNetlify(league, season, matchday, fixtures, startDate, endDate);\n        // window.selectAllFixtures = () => this.apiManager.selectAllFixtures();\n        // window.deselectAllFixtures = () => this.apiManager.deselectAllFixtures();\n        // window.importSelectedFixtures = () => this.apiManager.importSelectedFixtures();\n        // window.importFixturesToCurrentGameweek = (fixtures) => this.apiManager.importFixturesToCurrentGameweek(fixtures);\n        \n        // Utilities-related functions - REMOVED: Now handled by UtilitiesManager directly\n        // window.formatDeadlineDate = (date) => this.utilitiesManager.formatDeadlineDate(date);\n        // window.getOrdinalSuffix = (day) => this.utilitiesManager.getOrdinalSuffix(day);\n        // window.getDeadlineDateForGameweek = (gameweek) => this.utilitiesManager.getDeadlineDateForGameweek(gameweek);\n        // window.getUserEdition = (userData) => this.utilitiesManager.getUserEdition(userData);\n        // window.getUserRegisteredEditions = (userData) => this.utilitiesManager.getUserRegisteredEditions(userData);\n        // window.getActiveGameweek = () => this.utilitiesManager.getActiveGameweek();\n        // window.setActiveGameweek = (gameweek) => this.utilitiesManager.setActiveGameweek(gameweek);\n        // window.setActiveEdition = (edition) => this.utilitiesManager.setActiveEdition(edition);\n        // window.getTeamStatusSimple = (teamName, userData, currentGameWeek, userId) => this.utilitiesManager.getTeamStatusSimple(teamName, userData, currentGameWeek, userId);\n        // window.getTeamStatus = (teamName, userData, currentGameWeek, userId) => this.utilitiesManager.getTeamStatus(teamName, userData, currentGameWeek, userId);\n        // window.getStatusDisplay = (status) => this.utilitiesManager.getStatusDisplay(status);\n        // window.getMockFixtures = (league, gameweek) => this.utilitiesManager.getMockFixtures(league, gameweek);\n        // window.getMockScores = (existingFixtures) => this.utilitiesManager.getMockScores(existingFixtures);\n        // window.getMockRounds = () => this.utilitiesManager.getMockRounds();\n        // window.getMockMatchdays = () => this.utilitiesManager.getMockMatchdays();\n        // window.calculateTeamNameSimilarity = (name1, name2) => this.utilitiesManager.calculateTeamNameSimilarity(name1, name2);\n        // window.normalizeTeamName = (teamName) => this.utilitiesManager.normalizeTeamName(teamName);\n        // window.groupFixturesByDate = (fixtures) => this.utilitiesManager.groupFixturesByDate(fixtures);\n        // window.showRegistrationClosed = (message) => this.utilitiesManager.showRegistrationClosed(message);\n        // window.showRegistrationCountdown = (endDate) => this.utilitiesManager.showRegistrationCountdown(endDate);\n        // window.showNextRegistrationCountdown = (startDate) => this.utilitiesManager.showNextRegistrationCountdown(startDate);\n        // window.hideRegistrationCountdowns = () => this.utilitiesManager.hideRegistrationCountdowns();\n        // window.showRegisterButton = (show) => this.utilitiesManager.showRegisterButton(show);\n        // window.resetAsItStandsInitialization = () => this.utilitiesManager.resetAsItStandsInitialization();\n        // window.diagnoseAsItStandsElements = () => this.utilitiesManager.diagnoseAsItStandsElements();\n        // window.testAsItStandsManually = () => this.utilitiesManager.testAsItStandsManually();\n        // window.checkPickStillValid = (pick, fixtures) => this.utilitiesManager.checkPickStillValid(pick, fixtures);\n        \n        // Auth-related functions - REMOVED: Now handled by AuthManager directly\n        // window.initializeAuthListener = () => this.authManager.initializeAuthListener();\n        // window.startAdminTokenRefresh = (user) => this.authManager.startAdminTokenRefresh(user);\n        // window.stopAdminTokenRefresh = () => this.authManager.stopAdminTokenRefresh();\n        // window.checkAdminStatusFromStorage = () => this.authManager.checkAdminStatusFromStorage();\n        // window.initializeAdminPage = () => this.authManager.initializeAdminPage();\n        // window.showAdminLoginForm = () => this.authManager.showAdminLoginForm();\n        // window.loadAdminPanelSettings = () => this.authManager.loadAdminPanelSettings();\n        // window.showSettingsError = (message) => this.authManager.showSettingsError(message);\n        // window.startAdminSessionMonitoring = () => this.authManager.startAdminSessionMonitoring();\n        // window.stopAdminSessionMonitoring = () => this.authManager.stopAdminSessionMonitoring();\n        // window.showSessionTimeoutWarning = () => this.authManager.showSessionTimeoutWarning();\n        // window.extendAdminSession = () => this.authManager.extendAdminSession();\n        // window.handleAdminSessionTimeout = () => this.authManager.handleAdminSessionTimeout();\n        // window.initializeAdminPageVisibilityHandling = () => this.authManager.initializeAdminPageVisibilityHandling();\n        // window.initializeAdminLoginHandlers = () => this.authManager.initializeAdminLoginHandlers();\n        // window.handleAdminLogin = (e) => this.authManager.handleAdminLogin(e);\n        // window.handleAdminLogout = () => this.authManager.handleAdminLogout();\n        \n        // Registration-related functions - REMOVED: Now handled by RegistrationManager directly\n        // window.updateRegistrationPageEdition = () => this.registrationManager.updateRegistrationPageEdition();\n        // window.updateEditionDisplay = () => this.registrationManager.updateEditionDisplay();\n        // window.getUserEdition = (userData) => this.registrationManager.getUserEdition(userData);\n        // window.getUserRegisteredEditions = (userData) => this.registrationManager.getUserRegisteredEditions(userData);\n        // window.saveEditionPreference = (edition, userId) => this.registrationManager.saveEditionPreference(edition, userId);\n        // window.updateUserDefaultEdition = (userId, edition) => this.registrationManager.updateUserDefaultEdition(userId, edition);\n        // window.saveUserDefaultEdition = (userId) => this.registrationManager.saveUserDefaultEdition(userId);\n        // window.loadCurrentEditionForRegistration = () => this.registrationManager.loadCurrentEditionForRegistration();\n        // window.checkRegistrationWindow = (edition) => this.registrationManager.checkRegistrationWindow(edition);\n        // window.showRegistrationClosed = (message) => this.registrationManager.showRegistrationClosed(message);\n        // window.initializeRegistrationManagement = () => this.registrationManager.initializeRegistrationManagement();\n        // window.loadRegistrationSettings = () => this.registrationManager.loadRegistrationSettings();\n        window.loadEditionRegistrationSettings = () => this.registrationManager.loadEditionRegistrationSettings();\n        // window.loadAllEditionsOverview = () => this.registrationManager.loadAllEditionsOverview();\n        // window.saveRegistrationSettings = () => this.registrationManager.saveRegistrationSettings();\n        // window.refreshRegistrationStats = () => this.registrationManager.refreshRegistrationStats();\n        // window.updateRegistrationList = () => this.registrationManager.updateRegistrationList();\n        // window.viewUserDetails = (userId) => this.registrationManager.viewUserDetails(userId);\n        // window.generateRegistrationHistory = (registrations) => this.registrationManager.generateRegistrationHistory(registrations);\n        // window.showModal = (content) => this.registrationManager.showModal(content);\n        // window.closeUserDetailsModal = () => this.registrationManager.closeUserDetailsModal();\n        \n        // Fixture management functions - REMOVED: Now handled by FixturesManager event listeners\n        // window.saveFixtures = () => this.fixturesManager.saveFixtures();\n        // window.checkFixtures = () => this.fixturesManager.checkFixtures();\n        // window.editFixtures = () => this.fixturesManager.editFixtures();\n        // window.switchToViewMode = () => this.fixturesManager.switchToViewMode();\n        // window.loadFixturesForGameweek = () => this.fixturesManager.loadFixturesForGameweek();\n        // window.addFixtureRow = () => this.fixturesManager.addFixtureRow();\n        // window.reallocateFixtures = () => this.fixturesManager.reallocateFixtures();\n        // window.deleteAllFixtures = () => this.fixturesManager.deleteAllFixtures();\n        \n        console.log('🔧 Global functions set up for backward compatibility');\n    }\n\n    // Expose admin functions globally for admin.html\n    exposeAdminFunctionsGlobally() {\n        // Expose admin functions to global scope for admin.html\n        window.adminManagementManager = this.adminManagementManager;\n        window.authManager = this.authManager;\n        window.registrationManager = this.registrationManager;\n        window.fixturesManager = this.fixturesManager;\n        window.scoresManager = this.scoresManager;\n        window.uiManager = this.uiManager;\n        window.gameLogicManager = this.gameLogicManager;\n        window.mobileNavigationManager = this.mobileNavigationManager;\n        window.databaseManager = this.databaseManager;\n        window.apiManager = this.apiManager;\n        window.utilitiesManager = this.utilitiesManager;\n        \n        // Expose specific admin functions - REMOVED: Now handled by AuthManager directly\n        // window.initializeAdminLoginHandlers = () => this.authManager.initializeAdminLoginHandlers();\n        // window.handleAdminLogin = (e) => this.authManager.handleAdminLogin(e);\n        // window.handleAdminLogout = () => this.authManager.handleAdminLogout();\n        // window.extendAdminSession = () => this.authManager.extendAdminSession();\n        \n        console.log('🔧 Exposing admin functions globally...');\n        console.log('Available global functions:', {\n            adminManagementManager: typeof window.adminManagementManager,\n            authManager: typeof window.authManager,\n            registrationManager: typeof window.registrationManager,\n            fixturesManager: typeof window.fixturesManager,\n            scoresManager: typeof window.scoresManager,\n            uiManager: typeof window.uiManager,\n            gameLogicManager: typeof window.gameLogicManager,\n            mobileNavigationManager: typeof window.mobileNavigationManager,\n            databaseManager: typeof window.databaseManager,\n            apiManager: typeof window.apiManager,\n            utilitiesManager: typeof window.utilitiesManager,\n            initializeAdminLoginHandlers: typeof window.initializeAdminLoginHandlers,\n            app: typeof window.app\n        });\n    }\n\n    // Initialize page-specific features\n    async initializePageSpecificFeatures() {\n        // Check current page and initialize appropriate features\n        const currentPage = this.getCurrentPage();\n        \n        switch (currentPage) {\n            case 'admin':\n                console.log('🔧 Initializing admin page features...');\n                // Admin-specific initialization\n                if (this.adminManagementManager) {\n                    console.log('🔧 Initializing admin management...');\n                    this.adminManagementManager.initializeAdminPage();\n                }\n                // Initialize registration window display for admin page\n                if (this.uiManager) {\n                    console.log('🔧 Initializing admin page registration window display...');\n                    setTimeout(() => {\n                        this.uiManager.initializeRegistrationWindowDisplay();\n                    }, 500);\n                }\n                break;\n            case 'dashboard':\n                console.log('🔧 Initializing dashboard features...');\n                // Wait for auth manager to be properly initialized\n                if (!this.authManager) {\n                    console.log('⏳ Auth manager not ready yet, waiting...');\n                    setTimeout(() => this.initializePageSpecificFeatures(), 100);\n                    return;\n                }\n                \n                // Wait for Firebase auth to be ready\n                if (!this.authManager.auth) {\n                    console.log('⏳ Firebase auth not ready yet, waiting...');\n                    setTimeout(() => this.initializePageSpecificFeatures(), 100);\n                    return;\n                }\n                \n                // Wait for auth state to be properly initialized with a longer timeout\n                const maxAuthWaitTime = 5000; // 5 seconds max wait\n                const startTime = Date.now();\n                \n                const waitForAuth = () => {\n                    const elapsed = Date.now() - startTime;\n                    \n                    // Check if we've waited too long\n                    if (elapsed > maxAuthWaitTime) {\n                        console.log('⚠️ Auth wait timeout reached, checking current state...');\n                        // Force check current auth state\n                        if (this.authManager.auth.currentUser) {\n                            console.log('✅ Found authenticated user after timeout:', this.authManager.auth.currentUser.email);\n                            this.initializeDashboardForUser(this.authManager.auth.currentUser);\n                        } else {\n                            console.log('❌ No authenticated user found after timeout, redirecting to login...');\n                            window.location.href = '/pages/login.html';\n                        }\n                        return;\n                    }\n                    \n                    // Check if user is authenticated\n                    if (this.authManager.isUserAuthenticated()) {\n                        console.log('✅ User authenticated, initializing dashboard...');\n                        const authenticatedUser = this.authManager.getAuthenticatedUser();\n                        if (authenticatedUser) {\n                            this.initializeDashboardForUser(authenticatedUser);\n                        } else {\n                            console.log('⚠️ isUserAuthenticated returned true but getAuthenticatedUser returned null, waiting...');\n                            setTimeout(waitForAuth, 100);\n                        }\n                    } else {\n                        console.log('⏳ Waiting for authentication... (elapsed: ' + elapsed + 'ms)');\n                        setTimeout(waitForAuth, 100);\n                    }\n                };\n                \n                waitForAuth();\n                break;\n            case 'register':\n                console.log('🔧 Initializing registration page features...');\n                // Registration-specific initialization\n                if (this.registrationManager) {\n                    this.registrationManager.initializeRegistrationManagement();\n                }\n                break;\n            case 'login':\n                console.log('🔧 Initializing login page features...');\n                // Login-specific initialization\n                if (this.authManager) {\n                    this.authManager.initializeLoginPage();\n                }\n                // Initialize registration management for login page first\n                if (this.registrationManager) {\n                    console.log('🔧 Initializing login page registration management...');\n                    this.registrationManager.initializeRegistrationManagement();\n                }\n                // Initialize registration window display for login page after a short delay to ensure managers are ready\n                if (this.uiManager) {\n                    console.log('🔧 Initializing login page registration window display...');\n                    setTimeout(() => {\n                        this.uiManager.initializeRegistrationWindowDisplay();\n                    }, 500);\n                }\n                break;\n            default:\n                console.log('🔧 Initializing general page features...');\n                // General initialization - this is the main page (index.html)\n                if (this.registrationManager) {\n                    console.log('🔧 Initializing main page registration features...');\n                    this.registrationManager.initializeMainPage();\n                }\n                break;\n        }\n    }\n\n    // Get current page identifier\n    getCurrentPage() {\n        const path = window.location.pathname;\n        const url = window.location.href;\n        \n        // Check for login in both pathname and full URL (for Netlify routing)\n        if (path.includes('admin') || url.includes('admin')) return 'admin';\n        if (path.includes('dashboard') || url.includes('dashboard')) return 'dashboard';\n        if (path.includes('register') || url.includes('register')) return 'register';\n        if (path.includes('login') || url.includes('login')) return 'login';\n        return 'general';\n    }\n\n    // Initialize dashboard for a specific user\n    async initializeDashboardForUser(user) {\n        console.log('🔧 Initializing dashboard for user:', user.email);\n        if (this.uiManager && typeof this.uiManager.renderDashboard === 'function') {\n            await this.uiManager.renderDashboard(user);\n        }\n    }\n\n    // Cleanup method\n    cleanup() {\n        if (this.fixturesManager) {\n            this.fixturesManager.cleanup();\n        }\n        if (this.scoresManager) {\n            this.scoresManager.cleanup();\n        }\n        if (this.uiManager) {\n            this.uiManager.cleanup();\n        }\n        if (this.gameLogicManager) {\n            this.gameLogicManager.cleanup();\n        }\n        if (this.mobileNavigationManager) {\n            this.mobileNavigationManager.cleanup();\n        }\n        if (this.adminManagementManager) {\n            this.adminManagementManager.cleanup();\n        }\n        if (this.databaseManager) {\n            this.databaseManager.cleanup();\n        }\n        if (this.apiManager) {\n            this.apiManager.cleanup();\n        }\n        if (this.utilitiesManager) {\n            this.utilitiesManager.cleanup();\n        }\n        console.log('🧹 App cleanup completed');\n    }\n}\n\nconsole.log('🔍 App class defined, about to set up DOMContentLoaded listener...');\n\n// Create and initialize the app when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n    window.app = new App();\n    await window.app.initialize();\n});\n\n// Export for use in other modules\nexport default App;\n\n// Also expose App class globally for admin.html\nwindow.App = App;\n"],"names":["constructor","this","db","auth","currentUser","adminStatus","adminUserId","tokenRefreshInterval","sessionCheckInterval","sessionWarningInterval","isLoggingIn","redirectingToDashboard","initialize","setupAuthListener","setupAdminPageHandling","initializeLoginPage","console","log","initializeLoginFormHandlers","window","location","pathname","includes","endsWith","checkExistingAuthState","loginForm","document","getElementById","addEventListener","e","handleLoginSubmit","setTimeout","href","preventDefault","email","value","trim","password","submitButton","querySelector","errorElement","showLoginError","disabled","textContent","user","signInWithEmailAndPassword","style","display","error","errorMessage","getLoginErrorMessage","message","code","warn","onAuthStateChanged","handleAuthStateChange","syncAuthState","handleUserSignIn","catch","handleUserSignOut","onIndexPage","onDashboardPage","onAdminPage","onLoginPage","initializeUserLogout","successMessage","createElement","cssText","innerHTML","body","appendChild","replace","assign","dashboardLink","click","removeChild","redirectError","resetAsItStandsInitialization","renderDashboard","handleAdminPageAccess","clearAdminStatus","stopAdminTokenRefresh","stopAdminSessionMonitoring","showAdminLoginForm","uid","loadingElement","adminDoc","collection","doc","get","exists","data","isAdmin","grantAdminAccess","denyAdminAccess","showAdminError","sessionStorage","setItem","adminPanel","initializeAdminLoginHandlers","startAdminTokenRefresh","startAdminSessionMonitoring","loadAdminPanelSettings","adminLoginForm","adminLogoutBtn","removeEventListener","handleAdminLogin","bind","handleAdminLogout","target","originalText","signOut","handleAdminLoginError","errorMessageText","event","stopPropagation","logoutBtn","showLogoutSuccessMessage","handleLogoutError","handleUserLogout","setInterval","async","getIdToken","logoutError","clearInterval","lastActivity","Date","now","updateActivity","forEach","handleAdminSessionTimeout","showSessionTimeoutWarning","getItem","warningDiv","parentElement","remove","extendAdminSession","dispatchEvent","Event","querySelectorAll","warning","confirmDiv","timeoutDiv","reload","removeItem","checkAdminStatusFromStorage","settingsDoc","settingsData","settings","currentActiveEdition","active_edition","currentActiveGameweek","active_gameweek","buildAdminDashboard","createDefaultSettings","showSettingsError","defaultSettings","lastUpdated","toISOString","set","createError","errorDiv","insertBefore","firstChild","initializeAdminPage","initializeAdminPageVisibilityHandling","showAdminLoadingState","hiddenTime","maxHiddenTime","hidden","timeHidden","Math","round","isUserAuthenticated","firebaseUser","authManagerUser","isAuthenticated","getAuthenticatedUser","currentEditionName","registrationManagementInitialized","initializeRegistrationManagement","saveRegistrationSettingsBtn","refreshStatsBtn","saveRegistrationSettings","refreshRegistrationStats","initializeRegistrationPage","loadRegistrationSettings","initializeMainPage","checkRegistrationWindow","initializeMainPageFeatures","readyState","initializeAgeVerification","initializeFormHandlers","initializeEditionSelection","initializeFormToggles","loadCurrentEditionForRegistration","ageYesBtn","ageNoBtn","ageVerifiedInput","classList","add","registerForm","reRegisterForm","handleRegistrationSubmit","handleReRegistrationSubmit","editionSelection","updateEditionDisplay","showReRegister","showNewRegister","formData","firstName","surname","ageVerified","mobile","confirmPassword","paymentMethod","emailConsent","checked","whatsappConsent","termsAccepted","edition","validationResult","validateRegistrationForm","isValid","createUserWithEmailAndPassword","saveUserRegistrationData","showRegistrationSuccess","clearRegistrationForm","showRegistrationError","getRegistrationErrorMessage","validateReRegistrationForm","updateUserRegistrationData","showReRegistrationSuccess","clearReRegistrationForm","showReRegistrationError","length","successDiv","className","parentNode","nextSibling","form","reset","userId","editionKey","editionName","userData","status","lives","preferredEdition","registrations","registrationDate","createdAt","updateData","update","loadEditionRegistrationSettings","loadAllEditionsOverview","editionForSettings","editionNumber","enabledCheckbox","startDateInput","endDateInput","nextStartDateInput","editionSettingsTitle","enabled","startDate","toDate","formatDateForInput","endDate","nextStartDate","editions","statusCard","statusText","dateRange","statusClass","toLocaleDateString","statusElement","editionText","usersSnapshot","totalUsers","currentEditionRegistrations","previousEditionsRegistrations","activePlayers","currentEdition","archivedUsers","activeUsers","previousEditions","Object","keys","filter","parseInt","totalElement","currentElement","archivedElement","updateRegistrationList","orderBy","limit","tbody","displayedCount","row","name","currentEditionReg","id","viewUserDetails","userDoc","alert","modalContent","displayName","undefined","generateRegistrationHistory","generatePickHistory","picks","showModal","html","sort","reg","date","key","label","gw","pick","badge","getTeamBadge","badgeHtml","content","existingModal","modalOverlay","registrationManager","closeUserDetailsModal","modal","updateUserDefaultEdition","tempUserEdition","saveUserDefaultEdition","editionToCheck","el","showRegistrationClosed","closedDiv","updateRegistrationPageEdition","registrationInfo","selectedEdition","displayText","getUserEdition","editiontest","edition1","i","getUserRegisteredEditions","startsWith","push","saveEditionPreference","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","teamName","setCurrentActiveEdition","fixtureManagementInitialized","currentGameweekFixtures","lastProcessedEvents","Set","enhancedVidiprinterData","autoUpdateInterval","realTimeUpdateInterval","initializeFixtureManagement","setupEventListeners","initializeFixtureManagementTools","addInitialFixtureRow","loadExistingFixtures","initializeFootballWebPagesAPI","initializeCompetitionSettings","startDeadlineChecker","addFixtureBtn","saveFixturesBtn","checkFixturesBtn","saveScoresBtn","gameweekSelect","scoreGameweekSelect","importFootballWebPagesScoresBtn","scoresFileInput","refreshScoresBtn","startAutoUpdateBtn","stopAutoUpdateBtn","saveApiSettingsBtn","addFixtureRow","saveFixtures","checkFixtures","saveScores","loadFixturesForGameweek","loadScoresForGameweek","gameweek","importScoresFromFootballWebPages","file","files","importScoresFromFile","startAutoScoreUpdates","statusDiv","stopAutoScoreUpdates","saveFootballWebPagesSettings","editFixturesBtn","editFixtures","viewFixturesBtn","switchToViewMode","reallocateFixturesBtn","deleteAllFixturesBtn","reallocateFixtures","deleteAllFixtures","loadFootballWebPagesSettings","initializeCompetitionSettingsWhenReady","loadCompetitionSettings","startDeadlineCheckerWhenReady","fixturesContainer","fixtureRow","removeFixtureRow","button","fixtureRows","fixtures","homeTeam","awayTeam","dateTimeInput","venue","dateTime","split","kickOffTime","toTimeString","gameweekKey","editionGameweekKey","fixturesTableContainer","teamCounts","fixture","duplicates","entries","team","count","map","join","validateFixturesAgainstAPI","sourceGameweek","targetGameweek","confirm","sourceGameweekKey","sourceEditionGameweekKey","sourceDoc","sourceFixtures","targetGameweekKey","targetEditionGameweekKey","delete","color","displayFixtures","currentDateString","fixtureDates","f","today","recentFixtures","fixtureDate","diffTime","abs","ceil","diffDays","some","validateRecentFixturesAgainstAPI","showFixtureValidationSummary","firstFixture","apiDate","footballWebPagesConfig","RAPIDAPI_KEY","apiUrl","response","fetch","method","headers","RAPIDAPI_HOST","ok","apiData","json","validateFixturesWithAPIData","apiFixtures","fixturesData","matches","Array","isArray","matchingAPIFixture","find","apiFixture","apiFixtureDate","apiDateObj","fixtureDateObj","toDateString","validationResults","validationStatus","validationDetails","totalFixtures","recentCount","currentDate","statusHtml","timeDescription","then","displayFixturesTable","displayFixturesForEditing","addFixtureRowWithData","tableHTML","dateDisplay","timeDisplay","dateObj","isNaN","getTime","weekday","year","month","day","timeParts","time","dateTimeObj","toLocaleTimeString","hour","minute","hour12","finalTimeDisplay","datetimeValue","timeValue","displayScores","scoresContainer","index","addScoreRow","scoreRow","homeScore","awayScore","scoreRows","teamNamesElement","dateElement","teamNames","tagName","stack","scoreRowsCount","loadCurrentGameweekFixtures","currentGameweek","getActiveGameweek","fixturesDoc","loadFixturesForDeadline","fixturesDisplayContainer","fixturesDisplay","renderFixturesDisplay","currentGameWeek","deadlineDate","deadlineStatus","pickStatusDisplay","earliestFixture","reduce","earliest","deadlineDateObj","hours","minutes","formattedDeadline","timeZone","allFixturesCompleted","every","allFixturesFinished","userPick","fixturesHTML","formattedDate","loadMobileFixturesForDeadline","renderMobileFixturesDisplay","switchToFixturesTab","mobileFixturesTab","mobileFixturesPane","desktopFixturesTab","desktopFixturesPane","league","season","performAutoScoreUpdate","startRealTimeScoreUpdates","performRealTimeUpdate","stopRealTimeScoreUpdates","processResults","checkPickStillValid","calculatePickResult","renderPlayerScores","renderDesktopPlayerScores","renderMobilePlayerScores","renderAsItStandsStandings","players","platform","cleanup","LiveScoring","isLoadingScores","initializeLiveScoring","startAutoUpdatesBtn","stopAutoUpdatesBtn","Promise","resolve","container","reject","loadScoresContent","updatedFixtures","homeScoreHT","awayScoreHT","matchTime","isCompleted","completed","hasHalfTimeScores","hasFullTimeScores","hasCurrentScores","showCurrentScore","showFullTimeScore","currentScoreHtml","halfTimeHtml","fullTimeHtml","getStatusDisplay","StatisticsEngine","processedGameweeks","has","completedFixtures","querySnapshot","livesLost","winner","currentLives","newLives","max","defaultEdition","registeredEditions","loadPlayerScores","desktopScoresDisplay","sortedFixtures","a","b","scoresHTML","homeBadge","awayBadge","homeBadgeHtml","awayBadgeHtml","scoreDisplay","mobileScoresDisplay","showNoScoresMessage","noScoresMessage","clear","HistoryManager","apiManager","onResultsProcessed","currentHomeScore","currentAwayScore","homeScoreElement","awayScoreElement","homeScoreHTElement","awayScoreHTElement","completedElement","oldDoc","emptyFixtures","oldError","text","scores","JSON","parse","apiResponse","Error","updatedCount","apiHomeTeam","home","apiAwayTeam","away","toLowerCase","score","goals","result","homeGoals","score1","home_result","awayGoals","score2","away_result","ft_score","ftParts","scoreParts","resultParts","goals1","home_goals","goals2","away_goals","possibleScoreProps","prop","parts","ht_score","htParts","half_time_score","ht_result","halfTimeScore","halfTime","ht","possibleHTProps","full","short","scoresImportedFrom","testFootballWebPagesAPI","scoresManagementInitialized","liveScoring","statisticsEngine","historyManager","initializeScoresManagement","initializeScoresDisplay","uiManagementInitialized","vidiprinterInterval","vidiprinterData","isVidiprinterRunning","autoScrollEnabled","processedEvents","initializeUIManagement","initializeTestimonialModal","initializeVidiprinter","initializeMobileTabs","initializeDesktopTabs","testimonialToggle","toggleTestimonials","tabButtons","tabPanes","targetTab","getAttribute","btn","pane","targetPane","handleTabContentLoad","app","utilitiesManager","diagnoseAsItStandsElements","asItStandsInitialized_desktop","asItStandsInitialized_mobile","adminManagementManager","teamOperations","initializeAsItStandsTab","scoresManager","loadMethod","initializePlayerVidiprinter","userEdition","allGameweeks","gameLogicManager","batchCheckDeadlines","welcomeMessage","mobileWelcomeMessage","livesRemaining","mobileLivesRemaining","desktopLivesRemaining","picksHistoryContainer","mobilePicksHistoryContainer","desktopPicksHistoryContainer","logoutButtonContainer","gameweekNavigation","mobileGameweekNavigation","userRegisteredEditions","setupEditionSelection","updateEditionDisplays","updateLivesDisplay","renderPickHistory","initializeGameweekNavigation","initializeMobileGameweekNavigation","checkAndAssignAutoPicks","desktopContainer","mobileContainer","desktopSelector","mobileSelector","optionText","optionValue","desktopOption","selected","mobileOption","desktopSaveBtn","mobileSaveBtn","onclick","cardDisplay","modalImg","closeBtn","img","src","alt","testimonials","toggleIcon","toggleText","initializeRegistrationWindowDisplay","registrationUpdateTimer","updateRegistrationWindowDisplay","isUpdatingRegistrationWindow","showDefaultRegistrationWindow","showRegistrationCountdown","showRegisterButton","showNextRegistrationCountdown","countdownDiv","nextCountdownDiv","timerSpan","cleanupRegistrationTimers","countdownTimer","updateCountdown","timeLeft","hideRegistrationCountdowns","days","floor","countdownText","nextTimerSpan","show","registerButton","startBtn","stopBtn","clearBtn","autoScrollBtn","compSelect","refreshRateSelect","startVidiprinter","stopVidiprinter","clearVidiprinterFeed","toggleAutoScroll","testBtn","testVidiprinterConnection","isVidiprinterReady","addVidiprinterEntry","showVidiprinterStatus","fetchVidiprinterData","manualVidiprinterUpdate","performVidiprinterUpdate","isApiSuspended","processVidiprinterData","vidiprinterEvents","newEventsCount","type","eventId","createEventId","eventData","feed","entry","timestamp","apiDateTime","dateTimeParts","datePart","timePart","dateParts","second","entryClass","emoji","isEnhancedFeed","scrollTop","scrollHeight","children","opacity","transform","transition","regularFeed","enhancedFeed","lastUpdate","lastUpdateTime","globalFunctionAvailable","hasGlobalFunction","hasFeedElement","globalFunction","feedElement","isRunning","gameLogicInitialized","deadlineCheckerInterval","initializeGameLogicManagement","pickHistoryHtml","currentGameweekDisplay","prevButton","nextButton","gameweekTabs","tiebreakTab","tiebreakEnabled","tiebreak_enabled","navigateToGameweek","updateNavigationButtons","updateActiveTab","navigateGameweek","tab","dataset","updateTabStates","gameweekNum","checkDeadlineForGameweek","isDeadlinePassed","direction","newNum","newGameweek","toString","freshUserDoc","freshUserData","replaceWith","cloneNode","mobileGameweekButtons","setActiveGameweek","mobilePrevButton","mobileNextButton","mobileCurrentGameweekDisplay","removePick","FieldValue","firebase","makePick","selectTeamAsTempPick","values","pickedGameweek","pickedGameweekNum","oldGameweekKey","refreshDisplayAfterPickUpdate","updatedUserDoc","updatedUserData","activeTab","currentViewedGameweek","updatePickStatusHeader","updateMobilePickStatusHeader","saveTempPick","tempPickKey","tempPick","releaseFuturePick","selectTeamAsPick","assignAutoPick","existingPicks","pickedTeams","availableTeams","TEAMS_CONFIG","allTeams","autoPick","getDeadlineDateForGameweek","timeout","clearTimeout","formatDeadlineDate","timeDiff","daysDiff","hoursDiff","getOrdinalSuffix","gameweeks","results","promises","all","getTeamStatusSimple","clickable","reason","getTeamStatus","userGameweeks","setActiveEdition","mobileNavigationInitialized","initializeMobileNavigationManagement","timeUntilDeadline","currentPick","deadlinePassed","homeTeamStatus","awayTeamStatus","homeTeamClasses","awayTeamClasses","homeTeamClickable","awayTeamClickable","homeTeamTooltip","awayTeamTooltip","homeTeamClickAttr","awayTeamClickAttr","awayTeamTitleAttr","pickStatusHeader","backgroundColor","borderColor","navigateToMobileGameweek","updateMobileNavigationButtons","updateMobileActiveTab","navigateMobileGameweek","updateMobileTabStates","contains","mobileTabButtons","mobileTabPanes","docKey","UserManagement","allPlayers","currentPlayerManagementType","showPlayerManagement","playerManagementModal","playerEditModal","loadPlayersForManagement","closePlayerManagement","closePlayerEdit","checkOrphanedAccounts","firestoreUsers","firestoreUserIds","showFirebaseAuthDeletionInstructions","allUsersQuery","getCurrentActiveEdition","playerData","includePlayer","localeCompare","displayPlayers","editionSelector","playerListContainer","playerListHtml","player","normalizedStatus","isTestWeeks","isCurrentEdition","editionDisplay","setupPlayerActionEventListeners","setupSearchAndFilter","item","editPlayer","detail","archivePlayer","unarchivePlayer","deletePlayer","searchInput","filterSelect","searchPlayers","filterPlayers","searchTerm","filteredPlayers","filterValue","testWeeks","playerId","playerDoc","showPlayerEditForm","firstNameInput","surnameInput","emailInput","livesInput","statusSelect","notesTextarea","adminNotes","savePlayerEdit","archivedAt","unarchivedAt","addToTestWeeks","resetAllPlayerLives","batch","where","ref","commit","size","generateTestScores","TeamOperations","updateCurrentActiveEdition","updateCurrentActiveGameweek","setupAsItStandsFunctionality","asItStandsBtn","loadStandings","exportStandingsBtn","exportStandings","manualAdjustmentBtn","setupManualAdjustments","standingsHistoryBtn","setupStandingsHistory","deviceType","contentContainer","createAsItStandsElements","gameweekSelector","select","standingsContainer","standingsSummary","playersSnapshot","standings","calculateStandings","updateStandingsSummary","renderStandingsTable","playerStanding","totalPoints","eliminated","picksDoc","picksData","pickedTeam","summaryContainer","totalPlayers","p","eliminatedPlayers","tableContainer","tableHtml","position","positionClass","resultClass","table","csv","tableToCSV","blob","Blob","url","URL","createObjectURL","download","revokeObjectURL","from","cell","innerText","adjustmentContainer","updateAdjustmentPlayerDropdown","applyManualAdjustment","playerSelect","option","loadPlayerCurrentLives","oldLives","adjustedBy","adjustedAt","historyContainer","loadStandingsHistory","logsSnapshot","logs","renderStandingsHistory","historyHtml","exportBtn","exportStandingsHistory","logsToCSV","field","adjustPlayerLives","min","Scheduling","setupQuickEditionSelector","editionSelectorInitialized","setupElements","quickSaveEditionBtn","loadAvailableEditions","newEdition","resetActiveWeekForNewEdition","saveQuickEditionChange","refreshRegistrationStatistics","onmousedown","onmouseup","newButton","replaceChild","freshButton","appearance","webkitAppearance","mozAppearance","cursor","pointerEvents","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","paddingRight","updateQuickEditionSelector","setupActiveGameweekSelector","alternativeSelectors","selector","loadAvailableGameweeks","handleGameweekChange","updateActiveGameweekSelector","options","selectedGameweek","setDefaultGameweekSelection","saveGameweekChange","last_updated","selectorId","bubbles","active","needsUpdate","required","editionValue","ensureSelectorInteractive","refreshDisplaysAfterEditionChange","updateActiveEditionDisplay","refreshOtherDisplays","quickEditionSelector","element","competitionSettingsInitialized","loadCurrentCompetitionSettings","setupCompetitionSettingsUI","updateCompetitionSettingsDisplay","getDefaultCompetitionSettings","registration_open","registration_start_date","registration_end_date","current_gameweek","total_gameweeks","lives_per_player","tiebreakCheckbox","registrationCheckbox","currentGameweekInput","totalGameweeksInput","livesPerPlayerInput","saveCompetitionSettings","setupSettingsFieldHandlers","handleTiebreakChange","handleRegistrationChange","handleDateChange","activeGameweekSelector","updateTiebreakUI","open","updateRegistrationUI","refreshDisplaysAfterSettingsChange","updateGameweekDisplay","updateOtherDisplays","gameweekDisplay","setDefaultSelection","checkCount","checkInterval","computedStyle","getComputedStyle","isDisabled","visibility","textAlign","borderRadius","border","padding","originalSelector","Audit","auditLogs","monitoringActive","initializeAudit","setupAuditMonitoring","setupAuditLogViewing","startActionMonitoring","setupPeriodicAuditChecks","monitorDOMChanges","monitorFirebaseOperations","runAuditChecks","checkForSuspiciousActivity","checkForUnauthorizedAccess","generateAuditReport","recentActions","getRecentAdminActions","logSuspiciousActivity","unusualTimeActions","checkUnusualTimePatterns","failedLogins","getFailedLoginAttempts","logSecurityEvent","unusualAccess","checkUnusualAccessLocations","report","period","totalActions","suspiciousActivities","securityEvents","recommendations","actions","getAdminActions","suspicious","getSuspiciousActivities","security","getSecurityEvents","generateRecommendations","saveAuditReport","generatedBy","cutoff","actionsSnapshot","loginsSnapshot","logins","action","actionHour","activitiesSnapshot","activities","eventsSnapshot","events","details","severity","logAdminAction","logEntry","ipAddress","getClientIP","userAgent","navigator","slice","setupAuditLogDisplay","setupAuditLogExport","refreshBtn","refreshAuditLogs","setupAuditLogFilters","loadAuditLogs","actionFilter","filterAuditLogs","dateFilter","userFilter","exportAuditLogs","displayAuditLogs","logContainer","logsHtml","formattedTime","actionType","query","getDateCutoff","range","stopMonitoring","AdminManager","fixturesManager","userManagement","scheduling","audit","adminManagementInitialized","adminDashboardInitialized","adminTabsInitialized","eventListenersInitialized","playerManagementEventListenersInitialized","initializeAdminManagement","ensureSaveSettingsButtonReady","initializeAdminApiIntegration","initializePlayerPicksV2","editionSelect","loadPlayerPicksV2","exportPlayerPicksV2","tableBody","loadingDiv","picksQuery","picksSnapshot","updatePlayerPicksV2Stats","renderPlayerPicksV2Table","totalCount","playersCount","teamsCount","docs","uniquePlayers","uniqueTeams","teamPicked","empty","rows","pickData","userFirstName","userSurname","saveSettingsBtn","removeAttribute","textColor","attributes","attr","setupSettingsEventListeners","setupApiSuspensionEventListeners","setupAdminTabs","setupPlayerManagementEventListeners","setupSaveSettingsButtonMonitoring","loadApiSuspensionSettings","saveApiSuspensionSettings","competitionForm","enableSaveSettingsButton","totalRegistrationsCard","currentEditionCard","archivedPlayersCard","newTotalCard","newCurrentCard","newArchivedCard","checkOrphanedAccountsBtn","firebaseAuthHelpBtn","closePlayerManagementBtn","searchPlayersBtn","closePlayerEditBtn","cancelPlayerEditBtn","reloadPageBtn","updateApiSuspensionDisplay","footballWebPages","theSportsDb","suspendedUntil","footballWebPagesCheckbox","theSportsDbCheckbox","reasonInput","suspendedUntilInput","apiName","checkSuspensionExpiry","expiryDate","adminDashboard","buildDashboardContent","loadRegistrationData","initializeRegistrationSettingsForAdmin","loadRegistrationStatistics","newBtn","newRefreshBtn","totalActive","currentEditionCount","archivedCount","userName","isActive","totalRegistrationsElement","currentEditionElement","setupTabSwitching","setupTabContent","tabs","switchTab","targetContent","targetTabElement","loadTabContent","tabName","setupFixtureManagementEventListeners","setupRegistrationManagement","setupImportButtonEventListeners","selectAllBtn","footballWebPagesAPI","selectAllFixtures","deselectAllBtn","deselectAllFixtures","importSelectedBtn","importSelectedFixtures","initializeEnhancedVidiprinter","startEnhancedVidiprinter","stopEnhancedVidiprinter","clearEnhancedVidiprinterFeed","resetTestLives","resetCount","skippedCount","isTestEditionPlayer","databaseInitialized","adminSessionMonitoring","adminTokenRefresh","realTimeScoreUpdates","enhancedVidiprinter","deadlineChecker","initializeDatabaseManager","initializeDatabase","checkAndInitializeDatabase","getUserDocument","updateUserDocument","getAllUsers","getUsersByEdition","users","getUsersOrderedByName","getSettingsDocument","docId","setSettingsDocument","getRegistrationSettings","setRegistrationSettings","getFixturesDocument","updateFixturesDocument","deleteFixturesDocument","updateUserPick","removeUserPick","getUserPicks","updateUserRegistration","registrationData","removeUserRegistration","checkAdminStatus","updateUserStatus","additionalData","archivedDate","unarchivedDate","batchUpdateUsers","updates","userRef","batchDeleteUsers","userIds","callback","onSnapshot","snapshot","stopDeadlineChecker","timeoutCallback","warningCallback","sessionTimeout","warningTime","timeSinceActivity","refreshCallback","getDatabaseReference","isDatabaseInitialized","FootballWebPagesAPI","config","initializeConfiguration","loadConfiguration","FOOTBALL_WEBPAGES_CONFIG","ENV_CONFIG","BASE_URL","retryLoadConfiguration","attempts","attemptLoad","isConfigurationLoaded","getConfiguration","testApiConnection","checkApiKeyStatus","testApiBtn","fetchDateRangeBtn","fetchAllBtn","substring","updateImportButtonStates","fetchDateRangeFixtures","dateFormats","reverse","concat","successfulFormat","dateFormat","fetchError","errorText","filteredFixtures","startDateObj","endDateObj","setHours","fixturesHtml","homeTeamName","home_team","home_team_name","team1","team1Name","awayTeamName","away_team","away_team_name","team2","team2Name","matchDate","match_date","fixture_date","date_time","competition","comp","competitionName","leagueName","referee","attendance","matchId","home_score","away_score","stringify","importControls","fetchAllFixtures","offsetParent","fixtureElement","computedDisplay","computedVisibility","computedOpacity","checkboxes","checkbox","enable","importSelectedFixturesBtn","selectAllFixturesBtn","deselectAllFixturesBtn","selectedFixtures","gameWeek","fixtureData","fixturesToSave","match","importedFrom","VidiprinterAPI","fetchHistoricalVidiprinterData","startTime","endTime","datesToTry","allEvents","triedDates","vidiprinter","filteredEvents","filterEventsByTimeRange","eventDateTime","parseEventDateTime","startDateTime","endDateTime","dateTimeString","parsedDate","fetchHistoricalDataForInterval","currentTime","recentDates","fetchEnhancedVidiprinterData","targetDate","DataProcessor","convertApiFixtureToDatabase","extractScores","extractTeamNames","extractMatchInfo","extractStatus","filterFixturesByDateRange","generateFixturesHTML","maxDisplay","vidiprinterAPI","dataProcessor","theSportsDbConfig","initializeApiManager","initializeApiConfigurations","retryLoadConfigurationIfNeeded","testApiConnectionBtn","fetchDateRangeFixturesBtn","fetchAllFixturesBtn","fetchHistoricalDataBtn","fetchHistoricalData","DOMReadyManager","readyCallbacks","isReady","init","handleReady","ready","waitForElement","observer","MutationObserver","mutations","disconnect","observe","childList","subtree","waitForElements","selectors","ampm","displayHours","dayOfWeek","pickGameweek","getFixturesForGameweek","valid","simpleStatus","getMockFixtures","shuffledTeams","random","getMockScores","existingFixtures","getMockRounds","getMockMatchdays","calculateTeamNameSimilarity","name1","name2","normalize","normalized1","normalized2","matrix","j","normalizeTeamName","groupFixturesByDate","grouped","dateKey","countdownElement","timerElement","seconds","interval","registrationCountdownInterval","nextCountdownElement","nextTimerElement","nextRegistrationCountdownInterval","asItStandsInitialized","asItStandsDataLoaded","elements","testAsItStandsManually","initializeUtilitiesManager","appState","state","isLoading","notifications","listeners","Map","history","maxHistory","previousState","addToHistory","notifyListeners","subscribe","substr","currentState","shift","getHistory","setAuthState","setLoading","setError","addNotification","notification","removeNotification","n","clearNotifications","App","authManager","uiManager","mobileNavigationManager","databaseManager","domReadyManager","initialized","waitForFirebase","initializeManagers","initializePageSpecificFeatures","exposeAdminFunctionsGlobally","checkFirebase","setupGlobalReferences","setupGlobalFunctions","getCurrentPage","maxAuthWaitTime","waitForAuth","elapsed","initializeDashboardForUser","authenticatedUser","path"],"sourceRoot":""}