(()=>{"use strict";const e=class{constructor(){this.db=null,this.auth=null,this.currentUser=null,this.adminStatus=!1,this.adminUserId=null,this.tokenRefreshInterval=null,this.sessionCheckInterval=null,this.sessionWarningInterval=null,this.isLoggingIn=!1,this.redirectingToDashboard=!1}async initialize(e,t){this.db=e,this.auth=t,this.setupAuthListener(),this.setupAdminPageHandling()}initializeLoginPage(){console.log("🔧 Initializing login page functionality..."),this.initializeLoginFormHandlers(),window.location.pathname.includes("login.html")||window.location.pathname.includes("/pages/login")||window.location.pathname.endsWith("/login")?console.log("🔍 Already on login page, skipping auth state check"):this.checkExistingAuthState(),console.log("✅ Login page initialization completed")}initializeLoginFormHandlers(){const e=document.getElementById("login-form");e&&e.addEventListener("submit",e=>this.handleLoginSubmit(e))}checkExistingAuthState(){if(!(window.location.pathname.includes("login.html")||window.location.pathname.includes("/pages/login")||window.location.pathname.endsWith("/login")))return this.auth?void(this.auth.currentUser?(console.log("🔍 User already logged in, redirecting to dashboard..."),setTimeout(()=>{window.location.href="/pages/dashboard.html"},1e3)):console.log("🔍 No existing authentication found")):(console.log("⏳ Firebase auth not ready yet, waiting..."),void setTimeout(()=>this.checkExistingAuthState(),100));console.log("🔍 Already on login page, skipping auth state check")}async handleLoginSubmit(e){if(e.preventDefault(),console.log("🔧 Handling login form submission..."),this.isLoggingIn)return void console.log("⏳ Login already in progress...");this.isLoggingIn=!0;const t=document.getElementById("login-email").value.trim(),i=document.getElementById("login-password").value,n=document.querySelector('#login-form button[type="submit"]'),o=document.getElementById("login-error-message");if(!t||!i)return this.showLoginError("Please enter both email and password",o),void(this.isLoggingIn=!1);try{n&&(n.disabled=!0,n.textContent="Signing in...");const e=(await this.auth.signInWithEmailAndPassword(t,i)).user;console.log("✅ User signed in successfully:",e.email),o&&(o.style.display="none"),console.log("✅ Login successful, auth state change will handle redirect"),this.isLoggingIn=!1}catch(e){console.error("❌ Login error:",e),n&&(n.disabled=!1,n.textContent="Sign In");const t=this.getLoginErrorMessage(e);this.showLoginError(t,o),this.isLoggingIn=!1}}showLoginError(e,t){t&&(t.textContent=e,t.style.display="block",setTimeout(()=>{t.style.display="none"},5e3))}getLoginErrorMessage(e){return"auth/user-not-found"===e.code?"No account found with this email address.":"auth/wrong-password"===e.code?"Incorrect password. Please try again.":"auth/invalid-email"===e.code?"Please enter a valid email address.":"auth/too-many-requests"===e.code?"Too many failed attempts. Please try again later.":"auth/user-disabled"===e.code?"This account has been disabled. Please contact support.":"An error occurred during sign in. Please try again."}setupAuthListener(){if(!this.auth)return console.warn("Firebase auth not available yet, retrying in 100ms"),void setTimeout(()=>this.setupAuthListener(),100);console.log("🔧 Setting up Firebase auth state listener..."),this.auth.onAuthStateChanged(e=>{console.log("🔄 Auth state changed - User:",e?e.email:"null"),console.log("🔄 Current redirect flags - redirectingToDashboard:",this.redirectingToDashboard,"isLoggingIn:",this.isLoggingIn),this.currentUser=e,this.handleAuthStateChange(e)}),console.log("✅ Firebase auth state listener set up successfully")}syncAuthState(){this.auth&&this.auth.currentUser?(this.currentUser=this.auth.currentUser,console.log("🔄 Auth state synchronized - currentUser:",this.currentUser.email)):(this.currentUser=null,console.log("🔄 Auth state synchronized - no current user"))}async handleAuthStateChange(e){try{if(this.redirectingToDashboard)return void console.log("⏳ Already redirecting to dashboard, skipping auth state change handling");console.log("🔄 Auth state change detected:",e?`User: ${e.email}`:"No user"),console.log("🔄 Current page:",window.location.pathname),console.log("🔄 Current redirect flags - redirectingToDashboard:",this.redirectingToDashboard,"isLoggingIn:",this.isLoggingIn),e?(this.redirectingToDashboard=!0,console.log("🔄 Processing sign in for user:",e.email),this.handleUserSignIn(e).catch(e=>{console.error("Error in handleUserSignIn:",e),this.redirectingToDashboard=!1})):(console.log("🔄 Processing sign out"),this.handleUserSignOut())}catch(e){console.error("Error in auth state change handler:",e),this.redirectingToDashboard=!1}}async handleUserSignIn(e){console.log("🔧 Handling user sign in for:",e.email),console.log("🔧 Current page:",window.location.pathname),this.currentUser=e,!this.db&&window.db&&(this.db=window.db);const t=window.location.pathname.endsWith("index.html")||"/"===window.location.pathname,i=window.location.pathname.endsWith("dashboard.html"),n=window.location.pathname.endsWith("admin.html"),o=window.location.pathname.includes("login.html")||window.location.pathname.includes("/pages/login")||window.location.pathname.endsWith("/login");if(console.log("🔍 Path detection - current pathname:",window.location.pathname),console.log("🔍 Path detection - onIndexPage:",t),console.log("🔍 Path detection - onDashboardPage:",i),console.log("🔍 Path detection - onAdminPage:",n),console.log("🔍 Path detection - onLoginPage:",o),this.initializeUserLogout(),o){console.log("🔧 User signed in from login page, redirecting to dashboard immediately..."),this.redirectingToDashboard=!0,console.log("🔧 Set redirectingToDashboard flag to true");const e=document.createElement("div");e.style.cssText="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 2rem; color: #155724; z-index: 9999; text-align: center;",e.innerHTML='<i class="fas fa-check-circle" style="font-size: 2rem; margin-bottom: 1rem;"></i><br><strong>Login Successful!</strong><br>Redirecting to dashboard...',document.body.appendChild(e);try{console.log("🔄 Attempting redirect method 1: window.location.href"),console.log("🔄 Current location before redirect:",window.location.href),console.log("🔄 Current pathname before redirect:",window.location.pathname),window.location.href="/pages/dashboard.html",console.log("🔄 Redirect command executed"),setTimeout(()=>{window.location.pathname.includes("login")&&(console.log("🔄 Attempting redirect method 2: window.location.replace"),console.log("🔄 Current pathname before replace:",window.location.pathname),window.location.replace("/pages/dashboard.html"),console.log("🔄 Replace command executed"))},100),setTimeout(()=>{window.location.pathname.includes("login")&&(console.log("🔄 Attempting redirect method 3: window.location.assign"),console.log("🔄 Current pathname before assign:",window.location.pathname),window.location.assign("/pages/dashboard.html"),console.log("🔄 Assign command executed"))},500),setTimeout(()=>{if(window.location.pathname.includes("login")){console.log("⚠️ All redirect methods failed, forcing page change"),console.log("🔄 Current pathname before programmatic navigation:",window.location.pathname);const e=document.createElement("a");e.href="/pages/dashboard.html",e.style.display="none",document.body.appendChild(e),e.click(),document.body.removeChild(e),console.log("🔄 Programmatic navigation executed")}},2e3)}catch(e){console.error("❌ Redirect error:",e),window.location.href="/pages/dashboard.html"}return}if(i)return console.log("🔧 User signed in on dashboard page, initializing dashboard..."),window.resetAsItStandsInitialization&&window.resetAsItStandsInitialization(),window.renderDashboard&&await window.renderDashboard(e),this.redirectingToDashboard=!1,void(this.isLoggingIn=!1);n&&(await this.handleAdminPageAccess(e),this.redirectingToDashboard=!1,this.isLoggingIn=!1),t&&(console.log("🔧 User signed in on index page, redirecting to dashboard..."),this.redirectingToDashboard=!0,window.location.href="/pages/dashboard.html"),this.isLoggingIn=!1}handleUserSignOut(){console.log("User signed out"),this.redirectingToDashboard=!1,this.isLoggingIn=!1,this.clearAdminStatus(),this.stopAdminTokenRefresh(),this.stopAdminSessionMonitoring(),window.location.pathname.endsWith("admin.html")&&this.showAdminLoginForm()}async handleAdminPageAccess(e){console.log("On admin page, checking admin status for user:",e.uid);const t=document.querySelector("#admin-loading");t&&(t.style.display="none");const i=document.querySelector("#admin-login-form");i&&(i.style.display="none");try{const t=await this.db.collection("users").doc(e.uid).get();t.exists&&!0===t.data().isAdmin?await this.grantAdminAccess(e):this.denyAdminAccess()}catch(e){console.error("Error checking admin status:",e),this.showAdminError("Error verifying admin status. Please try again.")}}async grantAdminAccess(e){console.log("Admin access granted."),this.adminStatus=!0,this.adminUserId=e.uid,sessionStorage.setItem("adminStatus","true"),sessionStorage.setItem("adminUserId",e.uid);const t=document.querySelector("#admin-login-form");t&&(t.style.display="none");const i=document.querySelector("#admin-panel");i&&(i.style.display="flex"),this.initializeAdminLoginHandlers(),this.startAdminTokenRefresh(e),this.startAdminSessionMonitoring(),await this.loadAdminPanelSettings()}denyAdminAccess(){console.log("Admin access denied for user:",this.currentUser?.email),this.clearAdminStatus(),this.showAdminError("Access denied. You do not have admin privileges."),setTimeout(()=>{window.location.href="/index.html"},3e3)}showAdminError(e){const t=document.querySelector("#admin-error");t&&(t.style.display="block",t.innerHTML=`<p>${e}</p>`)}showAdminLoginForm(){const e=document.querySelector("#admin-loading"),t=document.querySelector("#admin-login-form"),i=document.querySelector("#admin-panel"),n=document.querySelector("#admin-error");e&&(e.style.display="none"),t&&(t.style.display="block"),i&&(i.style.display="none"),n&&(n.style.display="none"),this.initializeAdminLoginHandlers()}initializeAdminLoginHandlers(){const e=document.querySelector("#admin-login-form-element"),t=document.querySelector("#admin-logout-btn");e&&(e.removeEventListener("submit",this.handleAdminLogin.bind(this)),e.addEventListener("submit",this.handleAdminLogin.bind(this))),t&&(t.removeEventListener("click",this.handleAdminLogout.bind(this)),t.addEventListener("click",this.handleAdminLogout.bind(this)))}async handleAdminLogin(e){e.preventDefault(),console.log("Admin login form submitted");const t=document.querySelector("#admin-login-email").value,i=document.querySelector("#admin-login-password").value,n=document.querySelector("#admin-error-message");n.textContent="";try{const o=e.target.querySelector('button[type="submit"]'),s=o.textContent;o.disabled=!0,o.textContent="Logging in...";const a=(await this.auth.signInWithEmailAndPassword(t,i)).user,r=await this.db.collection("users").doc(a.uid).get();if(!r.exists||!0!==r.data().isAdmin)return await this.auth.signOut(),n.textContent="Access denied. You do not have admin privileges.",o.disabled=!1,void(o.textContent=s);console.log("Admin login successful")}catch(e){console.error("Admin login error:",e),this.handleAdminLoginError(e,n,submitButton,originalText)}}handleAdminLoginError(e,t,i,n){let o="Login failed: ";"auth/user-not-found"===e.code?o+="User not found. Please check your email address.":"auth/wrong-password"===e.code?o+="Incorrect password. Please try again.":"auth/invalid-email"===e.code?o+="Invalid email address format.":"auth/too-many-requests"===e.code?o+="Too many failed attempts. Please try again later.":o+=e.message,t.textContent=o,i&&(i.disabled=!1,i.textContent=n)}async handleAdminLogout(){event.preventDefault(),event.stopPropagation(),console.log("Admin logout initiated"),this.stopAdminTokenRefresh(),this.stopAdminSessionMonitoring(),this.clearAdminStatus();const e=event.target,t=e.innerHTML;e.disabled=!0,e.innerHTML='<i class="fas fa-spinner fa-spin"></i> Logging out...';try{await this.auth.signOut(),console.log("Admin logged out successfully, redirecting to home page"),this.showLogoutSuccessMessage(),setTimeout(()=>{window.location.href="/index.html"},1500)}catch(i){console.error("Logout error:",i),this.handleLogoutError(i,e,t)}}showLogoutSuccessMessage(){const e=document.createElement("div");e.style.cssText="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 2rem; color: #155724; z-index: 9999; text-align: center;",e.innerHTML='<i class="fas fa-check-circle" style="font-size: 2rem; margin-bottom: 1rem;"></i><br><strong>Logged out successfully!</strong><br>Redirecting to home page...',document.body.appendChild(e)}handleLogoutError(e,t,i){t.disabled=!1,t.innerHTML=i;const n=document.createElement("div");n.style.cssText="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 2rem; color: #721c24; z-index: 9999; text-align: center;",n.innerHTML=`<i class="fas fa-exclamation-triangle" style="font-size: 2rem; margin-bottom: 1rem;"></i><br><strong>Logout failed!</strong><br>${e.message}<br><br><button onclick="this.parentElement.remove()" style="padding: 0.5rem 1rem; background-color: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">Close</button>`,document.body.appendChild(n)}initializeUserLogout(){const e=document.querySelector("#logout-button");e&&(e.removeEventListener("click",this.handleUserLogout.bind(this)),e.addEventListener("click",this.handleUserLogout.bind(this)),console.log("✅ User logout button initialized"))}async handleUserLogout(){console.log("User logout initiated");const e=document.querySelector("#logout-button"),t=e?e.textContent:"Logout";e&&(e.disabled=!0,e.textContent="Logging out...");try{await this.auth.signOut(),console.log("User logged out successfully, redirecting to home page"),this.showLogoutSuccessMessage(),setTimeout(()=>{window.location.href="/index.html"},1500)}catch(i){console.error("User logout error:",i),e&&(e.disabled=!1,e.textContent=t),this.handleLogoutError(i,e,t)}}startAdminTokenRefresh(e){this.stopAdminTokenRefresh(),this.tokenRefreshInterval=setInterval(async()=>{try{if(e&&(await e.getIdToken(!0),console.log("Admin token refreshed successfully"),this.adminStatus)){const t=await this.db.collection("users").doc(e.uid).get();t.exists&&!0===t.data().isAdmin||(console.log("Admin status revoked, logging out"),this.clearAdminStatus(),await this.auth.signOut(),window.location.href="/index.html")}}catch(e){console.error("Error refreshing admin token:",e);try{await this.auth.signOut(),window.location.href="/index.html"}catch(e){console.error("Error during logout after token refresh failure:",e)}}},3e6),console.log("Admin token refresh started")}stopAdminTokenRefresh(){this.tokenRefreshInterval&&(clearInterval(this.tokenRefreshInterval),this.tokenRefreshInterval=null,console.log("Admin token refresh stopped"))}startAdminSessionMonitoring(){let e=Date.now();const t=()=>{e=Date.now()};["mousedown","mousemove","keypress","scroll","touchstart","click"].forEach(e=>{document.addEventListener(e,t,!0)}),this.sessionCheckInterval=setInterval(()=>{Date.now()-e>18e5&&(console.log("Admin session timed out due to inactivity"),this.handleAdminSessionTimeout())},6e4),this.sessionWarningInterval=setInterval(()=>{Date.now()-e>15e5&&this.showSessionTimeoutWarning()},6e4),console.log("Admin session monitoring started")}stopAdminSessionMonitoring(){this.sessionCheckInterval&&(clearInterval(this.sessionCheckInterval),this.sessionCheckInterval=null),this.sessionWarningInterval&&(clearInterval(this.sessionWarningInterval),this.sessionWarningInterval=null),console.log("Admin session monitoring stopped")}showSessionTimeoutWarning(){if(sessionStorage.getItem("sessionWarningShown"))return;sessionStorage.setItem("sessionWarningShown","true");const e=document.createElement("div");e.style.cssText="position: fixed; top: 20px; right: 20px; background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 1rem; color: #856404; z-index: 9999; max-width: 300px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);",e.innerHTML='\n            <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">\n                <i class="fas fa-exclamation-triangle" style="margin-right: 0.5rem; color: #f39c12;"></i>\n                <strong>Session Timeout Warning</strong>\n            </div>\n            <p style="margin: 0.5rem 0; font-size: 0.9rem;">Your admin session will expire in 5 minutes due to inactivity.</p>\n            <button onclick="window.authManager.extendAdminSession()" style="padding: 0.5rem 1rem; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 0.5rem;">\n                Extend Session\n            </button>\n            <button onclick="this.parentElement.remove()" style="padding: 0.5rem 1rem; background-color: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">\n                Dismiss\n            </button>\n        ',document.body.appendChild(e),setTimeout(()=>{e.parentElement&&e.remove()},1e4)}extendAdminSession(){document.dispatchEvent(new Event("mousemove")),document.querySelectorAll('div[style*="position: fixed"]').forEach(e=>{e.innerHTML.includes("Session Timeout Warning")&&e.remove()});const e=document.createElement("div");e.style.cssText="position: fixed; top: 20px; right: 20px; background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 1rem; color: #155724; z-index: 9999; max-width: 300px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);",e.innerHTML='\n            <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">\n                <i class="fas fa-check-circle" style="margin-right: 0.5rem; color: #28a745;"></i>\n                <strong>Session Extended</strong>\n            </div>\n            <p style="margin: 0.5rem 0; font-size: 0.9rem;">Your admin session has been extended.</p>\n        ',document.body.appendChild(e),setTimeout(()=>{e.parentElement&&e.remove()},3e3)}handleAdminSessionTimeout(){console.log("Handling admin session timeout"),this.stopAdminSessionMonitoring(),this.stopAdminTokenRefresh(),this.clearAdminStatus();const e=document.createElement("div");e.style.cssText="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 2rem; color: #721c24; z-index: 9999; text-align: center; max-width: 400px;",e.innerHTML='\n            <i class="fas fa-clock" style="font-size: 3rem; margin-bottom: 1rem; color: #dc3545;"></i>\n            <h3>Session Expired</h3>\n            <p>Your admin session has expired due to inactivity. You will be redirected to the login page.</p>\n            <button onclick="location.reload()" style="margin-top: 1rem; padding: 0.75rem 1.5rem; background-color: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">\n                <i class="fas fa-redo"></i> Return to Login\n            </button>\n        ',document.body.appendChild(e),setTimeout(()=>{window.location.reload()},5e3)}clearAdminStatus(){this.adminStatus=!1,this.adminUserId=null,sessionStorage.removeItem("adminStatus"),sessionStorage.removeItem("adminUserId"),sessionStorage.removeItem("sessionWarningShown")}checkAdminStatusFromStorage(){const e=sessionStorage.getItem("adminStatus"),t=sessionStorage.getItem("adminUserId");if("true"===e&&t){if(this.auth&&this.auth.currentUser&&this.auth.currentUser.uid===t)return!0;this.clearAdminStatus()}return!1}async loadAdminPanelSettings(){try{const e=await this.db.collection("settings").doc("currentCompetition").get();if(e.exists){const t=e.data();console.log("Settings loaded successfully:",t),window.settings=t,window.currentActiveEdition=t.active_edition||1,window.currentActiveGameweek=t.active_gameweek||"1","function"==typeof window.buildAdminDashboard?window.buildAdminDashboard(t):console.warn("buildAdminDashboard function not available")}else console.warn("Settings document not found, creating default settings"),await this.createDefaultSettings()}catch(e){console.error("Error loading admin panel settings:",e),this.showSettingsError("Failed to load competition settings")}}async createDefaultSettings(){const e={active_edition:1,active_gameweek:"1",lastUpdated:(new Date).toISOString()};try{await this.db.collection("settings").doc("currentCompetition").set(e),console.log("Default settings created"),window.settings=e,window.currentActiveEdition=e.active_edition,window.currentActiveGameweek=e.active_gameweek,"function"==typeof window.buildAdminDashboard&&window.buildAdminDashboard(e)}catch(e){console.error("Error creating default settings:",e),this.showSettingsError("Failed to create default settings")}}showSettingsError(e){const t=document.createElement("div");t.style.cssText="background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 1rem; margin: 1rem 0; color: #721c24;",t.innerHTML=`<strong>Settings Error:</strong> ${e}<br><button onclick="this.parentElement.remove()" style="margin-top: 0.5rem; padding: 0.5rem 1rem; background-color: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">Dismiss</button>`;const i=document.querySelector("#admin-panel");i&&i.insertBefore(t,i.firstChild)}setupAdminPageHandling(){window.location.pathname.endsWith("admin.html")&&(this.initializeAdminPage(),this.initializeAdminPageVisibilityHandling())}async initializeAdminPage(){if(console.log("Initializing admin page..."),!this.db&&window.db&&(this.db=window.db),!this.db)return console.error("Database not available, retrying in 100ms"),void setTimeout(()=>this.initializeAdminPage(),100);if(this.showAdminLoadingState(),this.auth&&this.auth.currentUser){console.log("User already authenticated, checking admin status...");const e=this.auth.currentUser;try{const t=await this.db.collection("users").doc(e.uid).get();t.exists&&!0===t.data().isAdmin?await this.grantAdminAccess(e):this.showAdminLoginForm()}catch(e){console.error("Error checking admin status:",e),this.showAdminLoginForm()}}else console.log("No user authenticated, showing login form"),this.showAdminLoginForm()}showAdminLoadingState(){const e=document.querySelector("#admin-loading"),t=document.querySelector("#admin-login-form"),i=document.querySelector("#admin-panel"),n=document.querySelector("#admin-error");e&&(e.style.display="block"),t&&(t.style.display="none"),i&&(i.style.display="none"),n&&(n.style.display="none")}initializeAdminPageVisibilityHandling(){let e=0;const t=9e5;document.addEventListener("visibilitychange",()=>{if(document.hidden)e=Date.now(),console.log("Admin page hidden, starting hidden time tracking");else if(e>0){const i=Date.now()-e;console.log("Admin page visible again, was hidden for",Math.round(i/1e3),"seconds"),i>t?(console.log("Page was hidden too long, logging out admin"),this.handleAdminSessionTimeout()):e=0}}),window.addEventListener("blur",()=>{document.hidden&&(e=Date.now())}),window.addEventListener("focus",()=>{e>0&&(Date.now()-e>t?this.handleAdminSessionTimeout():e=0)})}isUserAuthenticated(){const e=this.auth?this.auth.currentUser:null,t=this.currentUser,i=!(!e&&!t);return console.log("🔍 Authentication check - firebaseUser:",e?e.email:"null"),console.log("🔍 Authentication check - authManagerUser:",t?t.email:"null"),console.log("🔍 Authentication check - isAuthenticated:",i),console.log("🔍 Authentication check - auth object available:",!!this.auth),e&&!t?(console.log("🔄 Syncing auth state - Firebase has user but currentUser is null"),this.currentUser=e,!0):!e&&t?(console.log("🔄 Syncing auth state - currentUser has user but Firebase doesn't"),this.currentUser=null,!1):i}getAuthenticatedUser(){return this.auth&&this.auth.currentUser?this.auth.currentUser:this.currentUser}},t=class{constructor(e,t){this.db=e,this.auth=t,this.currentActiveEdition=1,this.currentEditionName="Edition 1",this.registrationManagementInitialized=!1}initializeRegistrationManagement(){if(this.registrationManagementInitialized)return void console.log("Registration management already initialized, skipping...");console.log("Initializing registration management..."),this.registrationManagementInitialized=!0;const e=document.querySelector("#save-registration-settings"),t=document.querySelector("#refresh-registration-stats");e&&e.addEventListener("click",this.saveRegistrationSettings.bind(this)),t&&t.addEventListener("click",this.refreshRegistrationStats.bind(this)),this.initializeRegistrationPage(),this.loadRegistrationSettings(),this.refreshRegistrationStats()}initializeMainPage(){console.log("🔧 Initializing main page functionality..."),console.log("🔧 Checking registration window status..."),this.checkRegistrationWindow(),console.log("🔧 Initializing main page features..."),this.initializeMainPageFeatures(),console.log("✅ Main page initialization completed")}initializeMainPageFeatures(){console.log("🔧 Setting up main page event listeners..."),console.log("✅ Main page features initialized")}initializeRegistrationPage(){console.log("🔧 Initializing registration page functionality..."),console.log("🔍 Current page URL:",window.location.href),console.log("🔍 Document ready state:",document.readyState),console.log("🔧 Step 1: Initializing age verification..."),this.initializeAgeVerification(),console.log("🔧 Step 2: Initializing form handlers..."),this.initializeFormHandlers(),console.log("🔧 Step 3: Initializing edition selection..."),this.initializeEditionSelection(),console.log("🔧 Step 4: Initializing form toggles..."),this.initializeFormToggles(),console.log("🔧 Step 5: Loading current edition..."),this.loadCurrentEditionForRegistration(),console.log("🔧 Step 6: Checking registration window..."),this.checkRegistrationWindow(),console.log("✅ Registration page initialization completed")}initializeAgeVerification(){console.log("🔍 Initializing age verification buttons...");const e=document.getElementById("age-yes-btn"),t=document.getElementById("age-no-btn"),i=document.getElementById("register-age-verified");console.log("🔍 Age verification elements found:",{ageYesBtn:!!e,ageNoBtn:!!t,ageVerifiedInput:!!i}),e&&t&&i?(console.log("✅ All age verification elements found, adding event listeners..."),e.addEventListener("click",()=>{console.log("✅ Age Yes button clicked"),e.classList.remove("selected"),t.classList.remove("selected"),e.classList.add("selected"),i.value="yes",console.log("Age verification: Yes selected")}),t.addEventListener("click",()=>{console.log("✅ Age No button clicked"),e.classList.remove("selected"),t.classList.remove("selected"),t.classList.add("selected"),i.value="no",console.log("Age verification: No selected")}),console.log("✅ Age verification event listeners added successfully")):console.error("❌ Some age verification elements not found:",{ageYesBtn:!!e,ageNoBtn:!!t,ageVerifiedInput:!!i})}initializeFormHandlers(){const e=document.getElementById("register-form"),t=document.getElementById("re-register-form");e&&e.addEventListener("submit",e=>this.handleRegistrationSubmit(e)),t&&t.addEventListener("submit",e=>this.handleReRegistrationSubmit(e))}initializeEditionSelection(){const e=document.getElementById("edition-selection");e&&e.addEventListener("change",()=>{this.updateEditionDisplay()})}initializeFormToggles(){const e=document.getElementById("show-re-register"),t=document.getElementById("show-new-register"),i=document.getElementById("register-form"),n=document.getElementById("re-register-form");e&&t&&i&&n&&(e.addEventListener("click",o=>{o.preventDefault(),i.style.display="none",n.style.display="block",e.style.display="none",t.style.display="inline"}),t.addEventListener("click",o=>{o.preventDefault(),n.style.display="none",i.style.display="block",t.style.display="none",e.style.display="inline"}))}async handleRegistrationSubmit(e){e.preventDefault(),console.log("Handling registration form submission...");const t={firstName:document.getElementById("register-firstname").value.trim(),surname:document.getElementById("register-surname").value.trim(),ageVerified:document.getElementById("register-age-verified").value,email:document.getElementById("register-email").value.trim(),mobile:document.getElementById("register-mobile").value.trim(),password:document.getElementById("register-password").value,confirmPassword:document.getElementById("register-confirm-password").value,paymentMethod:document.getElementById("register-payment").value,emailConsent:document.getElementById("register-email-consent").checked,whatsappConsent:document.getElementById("register-whatsapp-consent").checked,termsAccepted:document.getElementById("register-terms").checked,edition:document.getElementById("edition-selection").value},i=this.validateRegistrationForm(t);if(i.isValid)try{const e=(await this.auth.createUserWithEmailAndPassword(t.email,t.password)).user;console.log("User account created:",e.uid),await this.saveUserRegistrationData(e.uid,t),this.showRegistrationSuccess("Registration successful! You can now log in."),this.clearRegistrationForm(),setTimeout(()=>{window.location.href="/login.html"},2e3)}catch(e){console.error("Registration error:",e),this.showRegistrationError(this.getRegistrationErrorMessage(e))}else this.showRegistrationError(i.message)}async handleReRegistrationSubmit(e){e.preventDefault(),console.log("Handling re-registration form submission...");const t={email:document.getElementById("re-register-email").value.trim(),password:document.getElementById("re-register-password").value,paymentMethod:document.getElementById("re-register-payment").value,emailConsent:document.getElementById("re-register-email-consent").checked,whatsappConsent:document.getElementById("re-register-whatsapp-consent").checked,termsAccepted:document.getElementById("re-register-terms").checked,edition:document.getElementById("edition-selection").value},i=this.validateReRegistrationForm(t);if(i.isValid)try{const e=(await this.auth.signInWithEmailAndPassword(t.email,t.password)).user;console.log("User signed in for re-registration:",e.uid),await this.updateUserRegistrationData(e.uid,t),this.showReRegistrationSuccess("Re-registration successful! Welcome back."),this.clearReRegistrationForm(),setTimeout(()=>{window.location.href="/dashboard.html"},2e3)}catch(e){console.error("Re-registration error:",e),this.showReRegistrationError(this.getRegistrationErrorMessage(e))}else this.showReRegistrationError(i.message)}validateRegistrationForm(e){return e.firstName?e.surname?e.ageVerified?"no"===e.ageVerified?{isValid:!1,message:"You must be 16 or older to register"}:e.email?e.mobile?e.password?e.password.length<6?{isValid:!1,message:"Password must be at least 6 characters"}:e.password!==e.confirmPassword?{isValid:!1,message:"Passwords do not match"}:e.paymentMethod?e.emailConsent?e.termsAccepted?e.edition?{isValid:!0}:{isValid:!1,message:"Please select an edition"}:{isValid:!1,message:"You must accept the terms and conditions"}:{isValid:!1,message:"Email consent is required"}:{isValid:!1,message:"Please select a payment method"}:{isValid:!1,message:"Password is required"}:{isValid:!1,message:"Mobile number is required"}:{isValid:!1,message:"Email address is required"}:{isValid:!1,message:"Please verify your age"}:{isValid:!1,message:"Surname is required"}:{isValid:!1,message:"First name is required"}}validateReRegistrationForm(e){return e.email?e.password?e.paymentMethod?e.emailConsent?e.termsAccepted?e.edition?{isValid:!0}:{isValid:!1,message:"Please select an edition"}:{isValid:!1,message:"You must accept the terms and conditions"}:{isValid:!1,message:"Email consent is required"}:{isValid:!1,message:"Please select a payment method"}:{isValid:!1,message:"Password is required"}:{isValid:!1,message:"Email address is required"}}showRegistrationError(e){const t=document.getElementById("error-message");t&&(t.textContent=e,t.style.display="block",setTimeout(()=>{t.style.display="none"},5e3))}showRegistrationSuccess(e){const t=document.createElement("div");t.className="success-message",t.textContent=e,t.style.cssText="\n            background: #d4edda;\n            color: #155724;\n            padding: 1rem;\n            border-radius: 5px;\n            margin: 1rem 0;\n            text-align: center;\n            font-weight: bold;\n        ";const i=document.getElementById("register-form");i&&(i.parentNode.insertBefore(t,i.nextSibling),setTimeout(()=>{t.remove()},5e3))}showReRegistrationError(e){const t=document.getElementById("re-register-error-message");t&&(t.textContent=e,t.style.display="block",setTimeout(()=>{t.style.display="none"},5e3))}showReRegistrationSuccess(e){const t=document.createElement("div");t.className="success-message",t.textContent=e,t.style.cssText="\n            background: #d4edda;\n            color: #155724;\n            padding: 1rem;\n            border-radius: 5px;\n            margin: 1rem 0;\n            text-align: center;\n            font-weight: bold;\n        ";const i=document.getElementById("re-register-form");i&&(i.parentNode.insertBefore(t,i.nextSibling),setTimeout(()=>{t.remove()},5e3))}clearRegistrationForm(){const e=document.getElementById("register-form");if(e){e.reset();const t=document.getElementById("age-yes-btn"),i=document.getElementById("age-no-btn"),n=document.getElementById("register-age-verified");t&&t.classList.remove("selected"),i&&i.classList.remove("selected"),n&&(n.value="")}}clearReRegistrationForm(){const e=document.getElementById("re-register-form");e&&e.reset()}getRegistrationErrorMessage(e){return"auth/email-already-in-use"===e.code?"An account with this email already exists. Please use the re-registration form instead.":"auth/weak-password"===e.code?"Password is too weak. Please choose a stronger password.":"auth/invalid-email"===e.code?"Please enter a valid email address.":"auth/user-not-found"===e.code?"No account found with this email. Please use the main registration form instead.":"auth/wrong-password"===e.code?"Incorrect password. Please try again.":"An error occurred during registration. Please try again."}async saveUserRegistrationData(e,t){const i=`edition${t.edition}`,n="test"===t.edition?"Test Weeks":`Edition ${t.edition}`,o={uid:e,firstName:t.firstName,surname:t.surname,email:t.email,mobile:t.mobile,paymentMethod:t.paymentMethod,emailConsent:t.emailConsent,whatsappConsent:t.whatsappConsent,termsAccepted:t.termsAccepted,status:"active",lives:3,preferredEdition:t.edition,registrations:{[i]:{edition:t.edition,editionName:n,registrationDate:new Date,paymentMethod:t.paymentMethod,emailConsent:t.emailConsent,whatsappConsent:t.whatsappConsent,termsAccepted:t.termsAccepted}},createdAt:new Date,lastUpdated:new Date};await this.db.collection("users").doc(e).set(o),console.log("User registration data saved to Firestore")}async updateUserRegistrationData(e,t){const i=`edition${t.edition}`,n="test"===t.edition?"Test Weeks":`Edition ${t.edition}`,o={paymentMethod:t.paymentMethod,emailConsent:t.emailConsent,whatsappConsent:t.whatsappConsent,termsAccepted:t.termsAccepted,preferredEdition:t.edition,lastUpdated:new Date,[`registrations.${i}`]:{edition:t.edition,editionName:n,registrationDate:new Date,paymentMethod:t.paymentMethod,emailConsent:t.emailConsent,whatsappConsent:t.whatsappConsent,termsAccepted:t.termsAccepted}};await this.db.collection("users").doc(e).update(o),console.log("User re-registration data updated in Firestore")}async loadRegistrationSettings(){try{await this.loadEditionRegistrationSettings(),await this.loadAllEditionsOverview()}catch(e){console.error("Error loading registration settings:",e)}}async loadEditionRegistrationSettings(){try{const e=document.querySelector("#edition-for-settings"),t=e?e.value:"1",i=await this.db.collection("settings").doc(`registration_edition_${t}`).get(),n=document.querySelector("#registration-enabled"),o=document.querySelector("#registration-start-date"),s=document.querySelector("#registration-end-date"),a=document.querySelector("#next-registration-start-date"),r=document.querySelector("#edition-settings-title");if(r&&(r.textContent="test"===t?"Test Weeks Registration Settings":`Edition ${t} Registration Settings`),i.exists){const e=i.data();if(n&&(n.checked=e.enabled||!1),o&&e.startDate){const t=new Date(e.startDate.toDate());o.value=this.formatDateForInput(t)}else o&&(o.value="");if(s&&e.endDate){const t=new Date(e.endDate.toDate());s.value=this.formatDateForInput(t)}else s&&(s.value="");if(a&&e.nextStartDate){const t=new Date(e.nextStartDate.toDate());a.value=this.formatDateForInput(t)}else a&&(a.value="")}else n&&(n.checked=!1),o&&(o.value=""),s&&(s.value=""),a&&(a.value="")}catch(e){console.error("Error loading edition registration settings:",e)}}async loadAllEditionsOverview(){try{console.log("🔧 Loading all editions overview...");const e=[1,2,3,4,"test"];for(const t of e){const e=document.querySelector(`#edition-${t}-status`);if(!e){console.log(`⚠️ Status card not found for edition ${t}`);continue}console.log(`🔍 Loading settings for edition ${t}...`);const i=await this.db.collection("settings").doc(`registration_edition_${t}`).get();if(i.exists){const n=i.data(),o=new Date;let s="Not configured",a="No dates set",r="";if(n.enabled&&n.startDate&&n.endDate){const e=new Date(n.startDate.toDate()),t=new Date(n.endDate.toDate());a=`${e.toLocaleDateString("en-GB")} - ${t.toLocaleDateString("en-GB")}`,o>=e&&o<=t?(s="Registration Open",r="active"):o<e?(s="Upcoming",r="upcoming"):(s="Registration Closed",r="closed")}e.className=`edition-status-card ${r}`,e.querySelector(".status-text").textContent=s,e.querySelector(".date-range").textContent=a,console.log(`✅ Updated edition ${t} status: ${s} (${a})`)}else e.className="edition-status-card",e.querySelector(".status-text").textContent="Not configured",e.querySelector(".date-range").textContent="No dates set",console.log(`⚠️ Edition ${t} has no settings - showing as Not configured`)}}catch(e){console.error("Error loading all editions overview:",e)}}async saveRegistrationSettings(){const e=document.querySelector("#edition-for-settings"),t=document.querySelector("#registration-enabled"),i=document.querySelector("#registration-start-date"),n=document.querySelector("#registration-end-date"),o=document.querySelector("#next-registration-start-date"),s=document.querySelector("#registration-settings-status"),a=e?e.value:1;try{const e={enabled:!!t&&t.checked,edition:a,lastUpdated:new Date};if(i&&i.value&&(e.startDate=new Date(i.value)),n&&n.value&&(e.endDate=new Date(n.value)),o&&o.value&&(e.nextStartDate=new Date(o.value)),await this.db.collection("settings").doc(`registration_edition_${a}`).set(e),s){const e="test"===a?"Test Weeks":`Edition ${a}`;s.textContent=`${e} registration settings saved successfully!`,s.className="status-message success",setTimeout(()=>{s.textContent="",s.className="status-message"},3e3)}await this.loadAllEditionsOverview(),console.log(`Edition ${a} registration settings saved:`,e)}catch(e){console.error("Error saving registration settings:",e),s&&(s.textContent="Error saving settings: "+e.message,s.className="status-message error")}}async refreshRegistrationStats(){console.log("refreshRegistrationStats called");try{const e=await this.db.collection("users").get();let t=0,i=0,n=0,o=0;const s=window.currentActiveEdition||this.currentActiveEdition;console.log("refreshRegistrationStats - currentEdition:",s,"window.currentActiveEdition:",window.currentActiveEdition,"this.currentActiveEdition:",this.currentActiveEdition);let a=0,r=0;e.forEach(e=>{const l=e.data();if(t++,"archived"===l.status?a++:r++,l.registrations){const e=`edition${s}`;if(console.log(`Checking user ${l.firstName} ${l.surname} for edition key: ${e}, has registration: ${!!l.registrations[e]}, status: ${l.status}`),l.registrations[e]&&"archived"!==l.status&&(i++,console.log(`✅ Counted user ${l.firstName} ${l.surname} for edition ${s}`)),"archived"!==l.status){const e=Object.keys(l.registrations).filter(e=>parseInt(e.replace("edition",""))<s);n+=e.length}}l.lives>0&&o++}),console.log("Registration stats breakdown:",{totalUsers:t,activeUsers:r,archivedUsers:a,currentEditionRegistrations:i,previousEditionsRegistrations:n,activePlayers:o});const l=document.querySelector("#total-registrations"),c=document.querySelector("#current-edition-registrations"),d=document.querySelector("#archived-players-count");l&&(l.textContent=r),c&&(c.textContent=i),d&&(d.textContent=a),await this.updateRegistrationList()}catch(e){console.error("Error refreshing registration stats:",e)}}async updateRegistrationList(){try{const e=window.currentActiveEdition||this.currentActiveEdition;console.log("updateRegistrationList - filtering for edition:",e),console.log("updateRegistrationList - window.currentActiveEdition:",window.currentActiveEdition),console.log("updateRegistrationList - this.currentActiveEdition:",this.currentActiveEdition);const t=await this.db.collection("users").orderBy("firstName").limit(50).get(),i=document.querySelector("#registration-list-body");if(!i)return;i.innerHTML="";let n=0;const o=`edition${e}`;t.forEach(t=>{const s=t.data();if(console.log(`Checking user: ${s.firstName} ${s.surname}`),console.log(`  - Has registrations: ${!!s.registrations}`),console.log(`  - Looking for edition key: ${o}`),console.log("  - Available editions:",s.registrations?Object.keys(s.registrations):"none"),console.log(`  - Has ${o}: ${!(!s.registrations||!s.registrations[o])}`),console.log(`  - Status: ${s.status}`),!s.registrations||!s.registrations[o]||"archived"===s.status)return void console.log(`  ❌ Skipping user ${s.firstName} ${s.surname} - not registered for ${o}`);console.log(`  ✅ Including user ${s.firstName} ${s.surname} for ${o}`);const a=document.createElement("tr");n++;const r=`${s.firstName||""} ${s.surname||""}`.trim(),l=s.email||"",c=s.paymentMethod||"Not specified",d=s.registrations[o],u="test"===e?"Test Weeks":`Edition ${e}`,g=d.registrationDate?d.registrationDate.toDate().toLocaleDateString("en-GB"):"N/A";a.innerHTML=`\n                    <td>${r}</td>\n                    <td>${l}</td>\n                    <td>${u}</td>\n                    <td>${g}</td>\n                    <td>${c}</td>\n                    <td>\n                        <button class="secondary-button" onclick="window.registrationManager.viewUserDetails('${t.id}')">View</button>\n                    </td>\n                `,i.appendChild(a)}),console.log(`updateRegistrationList - displayed ${n} users for edition ${e}`)}catch(e){console.error("Error updating registration list:",e)}}async viewUserDetails(e){try{const t=await this.db.collection("users").doc(e).get();if(!t.exists)return void alert("User not found");const i=t.data(),n=`\n                <div class="user-details-modal">\n                    <div class="modal-header">\n                        <h3>User Details</h3>\n                        <button class="close-modal" onclick="window.registrationManager.closeUserDetailsModal()">&times;</button>\n                    </div>\n                    <div class="modal-body">\n                        <div class="user-info">\n                            <h4>Personal Information</h4>\n                            <p><strong>Name:</strong> ${i.firstName||""} ${i.surname||""}</p>\n                            <p><strong>Email:</strong> ${i.email||"N/A"}</p>\n                            <p><strong>Display Name:</strong> ${i.displayName||"N/A"}</p>\n                            <p><strong>Payment Method:</strong> ${i.paymentMethod||"Not specified"}</p>\n                            <p><strong>Lives Remaining:</strong> ${void 0!==i.lives?i.lives:"N/A"}</p>\n                        </div>\n                        \n                        <div class="registration-history">\n                            <h4>Registration History</h4>\n                            ${this.generateRegistrationHistory(i.registrations||{})}\n                        </div>\n                        \n                        <div class="pick-history">\n                            <h4>Pick History</h4>\n                            ${this.generatePickHistory(i.picks||{})}\n                        </div>\n                        \n                        <div class="edition-settings">\n                            <h4>Edition Settings</h4>\n                            <div class="edition-controls">\n                                <label for="default-edition-${e}">Default Edition:</label>\n                                <select id="default-edition-${e}" onchange="window.registrationManager.updateUserDefaultEdition('${e}', this.value)">\n                                    <option value="">No Default Set</option>\n                                    <option value="1" ${1===i.preferredEdition?"selected":""}>Edition 1</option>\n                                    <option value="test" ${"test"===i.preferredEdition?"selected":""}>Test Weeks</option>\n                                </select>\n                                <button class="secondary-button" onclick="window.registrationManager.saveUserDefaultEdition('${e}')">Save Default</button>\n                            </div>\n                            <p class="edition-help">This sets which edition the user sees by default when they log in.</p>\n                        </div>\n                    </div>\n                </div>\n            `;this.showModal(n)}catch(e){console.error("Error fetching user details:",e),alert("Error loading user details")}}generateRegistrationHistory(e){if(0===Object.keys(e).length)return"<p>No registrations found</p>";let t='<div class="registration-list">';return Object.keys(e).sort().forEach(i=>{const n=e[i],o=i.replace("edition","Edition "),s=n.registrationDate?n.registrationDate.toDate().toLocaleDateString("en-GB"):"N/A";t+=`\n                <div class="registration-item">\n                    <strong>${o}:</strong> ${s}\n                </div>\n            `}),t+="</div>",t}generatePickHistory(e){if(0===Object.keys(e).length)return"<p>No picks made yet</p>";let t='<div class="pick-list">';return[{key:"gw1",label:"Game Week 1"},{key:"gw2",label:"Game Week 2"},{key:"gw3",label:"Game Week 3"},{key:"gw4",label:"Game Week 4"},{key:"gw5",label:"Game Week 5"},{key:"gw6",label:"Game Week 6"},{key:"gw7",label:"Game Week 7"},{key:"gw8",label:"Game Week 8"},{key:"gw9",label:"Game Week 9"},{key:"gw10",label:"Game Week 10"},{key:"gwtiebreak",label:"Tiebreak Round"}].forEach(i=>{const n=e[i.key],o=n?this.getTeamBadge(n):null,s=o?`<img src="${o}" alt="${n}" style="width: 14px; height: 14px; margin-right: 4px; vertical-align: middle;">`:"";t+=`\n                <div class="pick-item">\n                    <strong>${i.label}:</strong> ${n?s+n:"No pick made"}\n                </div>\n            `}),t+="</div>",t}showModal(e){const t=document.querySelector(".modal-overlay");t&&t.remove();const i=document.createElement("div");i.className="modal-overlay",i.innerHTML=e,document.body.appendChild(i),i.addEventListener("click",function(e){e.target===i&&window.registrationManager.closeUserDetailsModal()})}closeUserDetailsModal(){const e=document.querySelector(".modal-overlay");e&&e.remove()}updateUserDefaultEdition(e,t){window.tempUserEdition=t}async saveUserDefaultEdition(e){try{const t=window.tempUserEdition||"";await this.db.collection("users").doc(e).update({preferredEdition:t||null}),alert("Default edition updated to: "+("test"===t?"Test Weeks":"1"===t?"Edition 1":"No default")),this.viewUserDetails(e)}catch(e){console.error("Error saving user default edition:",e),alert("Error saving default edition. Please try again.")}}async checkRegistrationWindow(e=null){try{const t=e||this.currentActiveEdition,i=await this.db.collection("settings").doc(`registration_edition_${t}`).get();if(i.exists){const e=i.data();if(document.querySelectorAll("#current-edition-display, #submit-edition-display, #re-submit-edition-display, #sidebar-edition-display").forEach(e=>{e&&(e.textContent=this.currentActiveEdition)}),!e.enabled){const e="test"===t?"Test Weeks":`Edition ${t}`;return this.showRegistrationClosed(`${e} registration is currently closed`),!1}const n=new Date,o=e.startDate?new Date(e.startDate.toDate()):null,s=e.endDate?new Date(e.endDate.toDate()):null;if(o&&n<o){const e="test"===t?"Test Weeks":`Edition ${t}`;return this.showRegistrationClosed(`${e} registration opens on `+o.toLocaleDateString("en-GB")),!1}if(s&&n>s){const e="test"===t?"Test Weeks":`Edition ${t}`;return this.showRegistrationClosed(`${e} registration closed on `+s.toLocaleDateString("en-GB")),!1}return!0}return!0}catch(e){return console.error("Error checking registration window:",e),!0}}showRegistrationClosed(e="Registration is currently closed"){const t=document.querySelector("#registration-closed"),i=document.querySelector("#register-form"),n=document.querySelector("#re-register-form");t&&(t.querySelector("p").textContent=e,t.style.display="block"),i&&(i.style.display="none"),n&&(n.style.display="none")}updateRegistrationPageEdition(){document.querySelectorAll("#current-edition-display, #submit-edition-display, #re-submit-edition-display, #sidebar-edition-display").forEach(e=>{e&&("test"===this.currentActiveEdition?e.textContent="Test Weeks":e.textContent=`Edition ${this.currentActiveEdition}`)});const e=document.getElementById("registration-info");e&&("test"===this.currentActiveEdition?e.innerHTML="\n                    <h4>Registration Information</h4>\n                    <p><strong>Status:</strong> By invitation only</p>\n                ":e.innerHTML="\n                    <h4>Registration Information</h4>\n                    <p><strong>Entry Fee:</strong> £10 per edition</p>\n                    <p><strong>Prize Pool:</strong> 50% of total entry fees</p>\n                    <p><strong>Format:</strong> 10 game weeks</p>\n                ")}updateEditionDisplay(){const e=document.getElementById("edition-selection");if(!e)return;const t=e.value;let i="Edition 1";"test"===t?i="Test Weeks":"1"===t&&(i="Edition 1"),document.querySelectorAll("#current-edition-display, #submit-edition-display, #re-submit-edition-display, #sidebar-edition-display").forEach(e=>{e&&(e.textContent=i)});const n=document.getElementById("registration-info");n&&(n.innerHTML="test"===t?"\n                    <h4>Registration Information</h4>\n                    <p><strong>Status:</strong> By invitation only</p>\n                ":"\n                    <h4>Registration Information</h4>\n                    <p><strong>Entry Fee:</strong> £10 per edition</p>\n                    <p><strong>Prize Pool:</strong> 50% of total entry fees</p>\n                    <p><strong>Format:</strong> 10 game weeks</p>\n                ")}getUserEdition(e){if(!e||!e.registrations)return 1;if(e.preferredEdition)return e.preferredEdition;if(e.registrations.editiontest)return"test";if(e.registrations.edition1)return 1;for(let t=2;t<=10;t++)if(e.registrations[`edition${t}`])return t;return 1}getUserRegisteredEditions(e){if(!e||!e.registrations)return[];const t=[];return Object.keys(e.registrations).forEach(e=>{if(e.startsWith("edition")){const i=e.replace("edition","");t.push(i)}}),t}async saveEditionPreference(e,t){try{await this.db.collection("users").doc(t).update({preferredEdition:e}),alert(`Edition preference saved! You are now participating in ${"test"===e?"Test Weeks":`Edition ${e}`}.`),window.location.reload()}catch(e){console.error("Error saving edition preference:",e),alert("Error saving edition preference. Please try again.")}}async loadCurrentEditionForRegistration(){try{const e=await this.db.collection("settings").doc("currentCompetition").get();if(e.exists){const t=e.data();this.currentActiveEdition=t.active_edition||1,this.updateRegistrationPageEdition()}}catch(e){console.error("Error loading current edition for registration:",e)}}formatDateForInput(e){return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}-${String(e.getDate()).padStart(2,"0")}T${String(e.getHours()).padStart(2,"0")}:${String(e.getMinutes()).padStart(2,"0")}`}getTeamBadge(e){return null}setCurrentActiveEdition(e){this.currentActiveEdition=e,this.currentEditionName="test"===e?"Test Weeks":`Edition ${e}`,window.currentActiveEdition!==e&&(window.currentActiveEdition=e)}},i=class{constructor(e){this.db=e,this.fixtureManagementInitialized=!1,this.currentGameweekFixtures=[],this.lastProcessedEvents=new Set,this.enhancedVidiprinterData=[],this.autoUpdateInterval=null,this.realTimeUpdateInterval=null}initializeFixtureManagement(){this.fixtureManagementInitialized?console.log("Fixture management already initialized, skipping..."):document.querySelector("#gameweek-select")||document.querySelector("#score-gameweek-select")||document.querySelector("#desktop-as-it-stands-gameweek")||document.querySelector(".gameweek-tab")||document.querySelector("#mobile-gameweek-navigation")?(console.log("Initializing fixture management..."),this.fixtureManagementInitialized=!0,this.setupEventListeners(),this.initializeFixtureManagementTools(),this.addInitialFixtureRow(),this.loadExistingFixtures(),this.initializeFootballWebPagesAPI(),this.initializeCompetitionSettings(),this.startDeadlineChecker()):console.log("Fixture management elements not found on this page, skipping...")}setupEventListeners(){const e=document.querySelector("#add-fixture-btn"),t=document.querySelector("#save-fixtures-btn"),i=document.querySelector("#check-fixtures-btn"),n=document.querySelector("#save-scores-btn"),o=document.querySelector("#gameweek-select"),s=document.querySelector("#score-gameweek-select"),a=document.querySelector("#import-football-webpages-scores-btn"),r=document.querySelector("#scores-file-input"),l=document.querySelector("#refresh-scores-btn"),c=document.querySelector("#start-auto-update-btn"),d=document.querySelector("#stop-auto-update-btn"),u=document.querySelector("#save-api-settings-btn");e&&e.addEventListener("click",()=>this.addFixtureRow()),t&&t.addEventListener("click",()=>this.saveFixtures()),i&&i.addEventListener("click",()=>this.checkFixtures()),n&&n.addEventListener("click",()=>this.saveScores()),o&&o.addEventListener("change",()=>this.loadFixturesForGameweek()),s&&s.addEventListener("change",()=>this.loadScoresForGameweek()),a&&a.addEventListener("click",()=>{const e=s.value;this.importScoresFromFootballWebPages(e)}),l&&l.addEventListener("click",()=>{this.loadScoresForGameweek()}),r&&r.addEventListener("change",e=>{const t=e.target.files[0];if(t){const i=s.value;this.importScoresFromFile(t,i),e.target.value=""}}),c&&c.addEventListener("click",()=>{const e=s.value;this.startAutoScoreUpdates(e);const t=document.getElementById("auto-update-status");t&&(t.innerHTML='<p class="success">✅ Auto score updates started. Checking every minute for half-time (45+ min) and full-time (105+ min) scores.</p>')}),d&&d.addEventListener("click",()=>{this.stopAutoScoreUpdates();const e=document.getElementById("auto-update-status");e&&(e.innerHTML='<p class="info">⏹️ Auto score updates stopped.</p>')}),u&&u.addEventListener("click",()=>this.saveFootballWebPagesSettings());const g=document.querySelector("#edit-fixtures-btn");g&&g.addEventListener("click",()=>this.editFixtures());const m=document.querySelector("#view-fixtures-btn");m&&m.addEventListener("click",()=>this.switchToViewMode())}initializeFixtureManagementTools(){const e=document.querySelector("#reallocate-fixtures-btn"),t=document.querySelector("#delete-all-fixtures-btn");e&&e.addEventListener("click",()=>this.reallocateFixtures()),t&&t.addEventListener("click",()=>this.deleteAllFixtures()),console.log("Fixture management tools initialized")}addInitialFixtureRow(){this.addFixtureRow()}loadExistingFixtures(){document.querySelector("#gameweek-select")&&this.loadFixturesForGameweek(),document.querySelector("#score-gameweek-select")&&this.loadScoresForGameweek()}initializeFootballWebPagesAPI(){this.loadFootballWebPagesSettings(),console.log("Football Web Pages API initialized")}initializeCompetitionSettings(){const e=()=>{this.db?this.loadCompetitionSettings():setTimeout(e,100)};e()}startDeadlineChecker(){const e=()=>{this.db?console.log("Deadline checker started"):setTimeout(e,100)};e()}addFixtureRow(){const e=document.querySelector("#fixtures-container");if(!e)return;const t=document.createElement("div");t.className="fixture-row",t.innerHTML='\n            <div class="fixture-inputs">\n                <input type="text" class="home-team" placeholder="Home Team">\n                <input type="text" class="away-team" placeholder="Away Team">\n                <input type="datetime-local" class="fixture-date">\n                <input type="text" class="venue" placeholder="Venue">\n                <button type="button" class="remove-fixture-btn" onclick="this.parentElement.parentElement.remove()">Remove</button>\n            </div>\n        ',e.appendChild(t)}removeFixtureRow(e){e.parentElement.parentElement.remove()}async saveFixtures(){try{const e=document.querySelector("#gameweek-select").value,t=document.querySelectorAll(".fixture-row"),i=[];if(t.forEach(e=>{const t=e.querySelector(".home-team").value.trim(),n=e.querySelector(".away-team").value.trim(),o=e.querySelector(".fixture-date").value,s=e.querySelector(".venue").value.trim();if(t&&n&&o){const e=new Date(o),a=e.toISOString().split("T")[0],r=e.toTimeString().split(" ")[0];i.push({homeTeam:t,awayTeam:n,date:a,kickOffTime:r,dateTime:o,venue:s||"TBD",status:"NS"})}}),0===i.length)return void alert("Please add at least one fixture");const n="tiebreak"===e?"gwtiebreak":`gw${e}`,o=`edition${window.currentActiveEdition}_${n}`;await this.db.collection("fixtures").doc(o).set({fixtures:i,gameweek:e,edition:window.currentActiveEdition,lastUpdated:new Date}),alert(`Saved ${i.length} fixtures for gameweek ${e}`);const s=document.querySelector("#fixtures-table-container");s&&(s.style.display="block"),this.loadFixturesForGameweek()}catch(e){console.error("Error saving fixtures:",e),alert("Error saving fixtures: "+e.message)}}async checkFixtures(){try{const e=document.querySelector("#gameweek-select").value,t="tiebreak"===e?"gwtiebreak":`gw${e}`,i=`edition${window.currentActiveEdition}_${t}`,n=await this.db.collection("fixtures").doc(i).get();if(!n.exists)return void alert("No fixtures found for this gameweek");const o=n.data().fixtures||[];if(0===o.length)return void alert("No fixtures found for this gameweek");const s={};o.forEach(e=>{s[e.homeTeam]=(s[e.homeTeam]||0)+1,s[e.awayTeam]=(s[e.awayTeam]||0)+1});const a=Object.entries(s).filter(([e,t])=>t>1);a.length>0?alert(`Warning: Teams appearing multiple times: ${a.map(([e,t])=>`${e} (${t}x)`).join(", ")}`):alert("All fixtures look good! No duplicate teams found."),await this.validateFixturesAgainstAPI(o,e)}catch(e){console.error("Error checking fixtures:",e),alert("Error checking fixtures: "+e.message)}}async reallocateFixtures(){try{const e=document.querySelector("#source-gameweek").value,t=document.querySelector("#target-gameweek").value;if(e===t)return void alert("Source and target game weeks must be different");if(!confirm(`Are you sure you want to move all fixtures from Game Week ${e} to Game Week ${t}? This will overwrite any existing fixtures in the target game week.`))return;const i="tiebreak"===e?"gwtiebreak":`gw${e}`,n=`edition${window.currentActiveEdition}_${i}`,o=await this.db.collection("fixtures").doc(n).get();if(!o.exists)return void alert(`No fixtures found for Game Week ${e}`);const s=o.data().fixtures||[];if(0===s.length)return void alert(`No fixtures found for Game Week ${e}`);const a="tiebreak"===t?"gwtiebreak":`gw${t}`,r=`edition${window.currentActiveEdition}_${a}`;await this.db.collection("fixtures").doc(r).set({fixtures:s,gameweek:t,edition:window.currentActiveEdition,lastUpdated:new Date}),await this.db.collection("fixtures").doc(n).delete(),alert(`Successfully moved ${s.length} fixtures from Game Week ${e} to Game Week ${t}`),this.loadFixturesForGameweek();const l=document.querySelector("#reallocate-status");l&&(l.textContent=`✅ Successfully moved ${s.length} fixtures from Game Week ${e} to Game Week ${t}`,l.style.color="#28a745",setTimeout(()=>{l.textContent=""},5e3))}catch(e){console.error("Error reallocating fixtures:",e),alert("Error reallocating fixtures: "+e.message);const t=document.querySelector("#reallocate-status");t&&(t.textContent=`❌ Error: ${e.message}`,t.style.color="#dc3545")}}async deleteAllFixtures(){try{const e=document.querySelector("#delete-gameweek").value;if(!confirm(`Are you sure you want to delete ALL fixtures from Game Week ${e}? This action cannot be undone.`))return;const t="tiebreak"===e?"gwtiebreak":`gw${e}`,i=`edition${window.currentActiveEdition}_${t}`;await this.db.collection("fixtures").doc(i).delete(),alert(`Successfully deleted all fixtures from Game Week ${e}`),this.displayFixtures([]);const n=document.querySelector("#delete-status");n&&(n.textContent=`✅ Successfully deleted all fixtures from Game Week ${e}`,n.style.color="#28a745",setTimeout(()=>{n.textContent=""},5e3))}catch(e){console.error("Error deleting fixtures:",e),alert("Error deleting fixtures: "+e.message);const t=document.querySelector("#delete-status");t&&(t.textContent=`❌ Error: ${e.message}`,t.style.color="#dc3545")}}async validateFixturesAgainstAPI(e,t){try{console.log("🔍 Validating fixtures against API for current date alignment...");const i=(new Date).toISOString().split("T")[0];console.log(`📅 Current date: ${i}`),console.log(`🎯 Checking ${e.length} fixtures for Game Week ${t}`);const n=[...new Set(e.map(e=>e.date))];console.log(`📅 Fixture dates found: ${n.join(", ")}`);const o=new Date(i),s=e.filter(e=>{if(!e.date)return!1;const t=new Date(e.date),i=Math.abs(o-t);return Math.ceil(i/864e5)<=7});s.length>0?(console.log(`🎯 Found ${s.length} recent fixtures within 7 days:`),s.forEach(e=>{const t=new Date(e.date),i=Math.abs(o-t),n=Math.ceil(i/864e5);console.log(`  - ${e.homeTeam} vs ${e.awayTeam} on ${e.date} (${n} days ${0===n?"from now":n>0?"ago":"from now"})`)}),s.some(e=>{const t=new Date(e.date),i=Math.abs(o-t);return Math.ceil(i/864e5)<=3})?(console.log("🔍 Recent fixtures found - validating against API..."),await this.validateRecentFixturesAgainstAPI(s)):console.log("📅 Fixtures are recent but not close enough to warrant API validation")):console.log("📅 No recent fixtures found - all fixtures are more than 7 days away"),this.showFixtureValidationSummary(e,s)}catch(e){console.error("❌ Error validating fixtures against API:",e)}}async validateRecentFixturesAgainstAPI(e){try{console.log("🔍 Fetching API data to validate recent fixtures...");const t=e[0],i=new Date(t.date).toISOString().split("T")[0];if(!window.footballWebPagesConfig||!window.footballWebPagesConfig.RAPIDAPI_KEY)return void console.log("⚠️ No API configuration found - skipping API validation");const n=`https://football-web-pages1.p.rapidapi.com/fixtures-results.json?from=${i}&to=${i}&comp=5&season=2025-2026`;console.log(`🔍 Fetching API data for ${i}: ${n}`);const o=await fetch(n,{method:"GET",headers:{"X-RapidAPI-Key":window.footballWebPagesConfig.RAPIDAPI_KEY,"X-RapidAPI-Host":window.footballWebPagesConfig.RAPIDAPI_HOST}});if(o.ok){const t=await o.json();console.log("✅ API data fetched successfully:",t),this.validateFixturesWithAPIData(e,t)}else console.log(`⚠️ API request failed: ${o.status} ${o.statusText}`)}catch(e){console.error("❌ Error fetching API data for validation:",e)}}validateFixturesWithAPIData(e,t){try{console.log("🔍 Validating fixtures against API data...");let i=[];if(t["fixtures-results"]){const e=t["fixtures-results"];e.matches&&Array.isArray(e.matches)&&(i=e.matches)}console.log(`📅 Found ${i.length} fixtures in API response`),e.forEach(e=>{new Date(e.date).toISOString().split("T")[0];const t=i.find(t=>{const i=t.date;if(!i)return!1;const n=new Date(i),o=new Date(e.date);return n.toDateString()===o.toDateString()});t?(console.log(`✅ Fixture validated: ${e.homeTeam} vs ${e.awayTeam} on ${e.date}`),console.log(`  - API data: ${t["home-team"]?.name||"N/A"} vs ${t["away-team"]?.name||"N/A"}`)):console.log(`⚠️ Fixture not found in API: ${e.homeTeam} vs ${e.awayTeam} on ${e.date}`)})}catch(e){console.error("❌ Error validating fixtures with API data:",e)}}showFixtureValidationSummary(e,t){const i=document.querySelector("#fixture-validation-results"),n=document.querySelector("#validation-status"),o=document.querySelector("#validation-details");if(!i||!n||!o)return void console.log("Validation results elements not found");const s=e.length,a=t.length,r=(new Date).toISOString().split("T")[0];let l="<h4>🔍 Fixture Validation Complete</h4>";l+=`<p><strong>Total Fixtures:</strong> ${s}</p>`,l+=`<p><strong>Recent Fixtures (within 7 days):</strong> ${a}</p>`,l+=`<p><strong>Current Date:</strong> ${r}</p>`,a>0&&(l+="<p><strong>Recent Fixtures:</strong></p>",l+="<ul>",t.forEach(e=>{const t=new Date(e.date),i=new Date,n=Math.abs(i-t),o=Math.ceil(n/864e5);let s;s=0===o?"Today":1===o?"Yesterday":o>0?`${o} days ago`:`${Math.abs(o)} days from now`,l+=`<li>${e.homeTeam} vs ${e.awayTeam} on ${e.date} (${s})</li>`}),l+="</ul>"),n.innerHTML=l,n.className="validation-status success",o.innerHTML="\n            <h5>Validation Details:</h5>\n            <ul>\n                <li>✅ Basic fixture validation completed</li>\n                <li>🔍 API validation attempted for recent fixtures</li>\n                <li>📅 Date alignment checked against current date</li>\n                <li>🎯 Recent fixtures highlighted for attention</li>\n            </ul>\n        ",i.style.display="block"}loadFixturesForGameweek(){const e=document.querySelector("#gameweek-select");if(!e)return void console.log("Gameweek select not found, skipping fixture load");const t=e.value,i="tiebreak"===t?"gwtiebreak":`gw${t}`,n=`edition${window.currentActiveEdition}_${i}`;this.db.collection("fixtures").doc(n).get().then(e=>{if(e.exists){const t=e.data().fixtures||[];this.displayFixtures(t)}else this.displayFixtures([])}).catch(e=>{console.error("Error loading fixtures:",e),this.displayFixtures([])})}displayFixtures(e){const t=document.querySelector("#fixtures-container");if(t){if(t.innerHTML="",0===e.length){this.addFixtureRow();const e=document.querySelector("#fixtures-table-container");return void(e&&(e.innerHTML="<p>No fixtures found for this gameweek</p>"))}this.displayFixturesTable(e)}}displayFixturesForEditing(e){const t=document.querySelector("#fixtures-container");t&&(t.innerHTML="",0!==e.length?e.forEach(e=>{this.addFixtureRowWithData(e)}):this.addFixtureRow())}async editFixtures(){try{const e=document.querySelector("#gameweek-select").value;if(!e)return void alert("Please select a gameweek first");const t=document.querySelector("#fixtures-table-container");t&&(t.style.display="none");const i="tiebreak"===e?"gwtiebreak":`gw${e}`,n=`edition${window.currentActiveEdition}_${i}`,o=await this.db.collection("fixtures").doc(n).get();if(o.exists){const e=o.data().fixtures||[];this.displayFixturesForEditing(e)}else this.displayFixturesForEditing([])}catch(e){console.error("Error loading fixtures for editing:",e),alert("Error loading fixtures for editing: "+e.message)}}switchToViewMode(){const e=document.querySelector("#fixtures-table-container");e&&(e.style.display="block"),this.loadFixturesForGameweek()}displayFixturesTable(e){const t=document.querySelector("#fixtures-table-container");if(!t)return;if(0===e.length)return void(t.innerHTML="<p>No fixtures found for this gameweek</p>");let i='\n            <h4>Current Fixtures</h4>\n            <table class="league-table">\n                <thead>\n                    <tr>\n                        <th>Home Team</th>\n                        <th>Away Team</th>\n                        <th>Date</th>\n                        <th>Kick-Off Time</th>\n                        <th>Venue</th>\n                        <th>Status</th>\n                    </tr>\n                </thead>\n                <tbody>\n        ';e.forEach(e=>{let t="TBD",n="TBD";if(e.date)try{const i=new Date(e.date);isNaN(i.getTime())||(t=i.toLocaleDateString("en-GB",{weekday:"short",year:"numeric",month:"short",day:"numeric"}))}catch(t){console.warn("Invalid date format:",e.date)}if(e.kickOffTime&&"TBD"!==e.kickOffTime)try{const t=e.kickOffTime.split(":");if(t.length>=2){n=`${t[0]}:${t[1]}`,console.log(`Time display from kickOffTime: ${n} (from ${e.kickOffTime})`)}}catch(t){console.warn("Invalid time format:",e.kickOffTime)}else if(e.time&&"TBD"!==e.time)try{const t=e.time.split(":");if(t.length>=2){n=`${t[0]}:${t[1]}`,console.log(`Time display from time field: ${n} (from ${e.time})`)}}catch(t){console.warn("Invalid time format:",e.time)}else if(e.dateTime)try{const t=new Date(e.dateTime);isNaN(t.getTime())||(n=t.toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",hour12:!1}),console.log(`Time display from dateTime: ${n} (from ${e.dateTime})`))}catch(t){console.warn("Invalid datetime format:",e.dateTime)}console.log(`Fixture ${e.homeTeam} vs ${e.awayTeam}:`,{date:e.date,kickOffTime:e.kickOffTime,time:e.time,dateTime:e.dateTime,finalTimeDisplay:n}),i+=`\n                <tr>\n                    <td>${e.homeTeam||"TBD"}</td>\n                    <td>${e.awayTeam||"TBD"}</td>\n                    <td>${t}</td>\n                    <td>${n}</td>\n                    <td>${e.venue||"TBD"}</td>\n                    <td>${e.status||"NS"}</td>\n                </tr>\n            `}),i+="\n                </tbody>\n            </table>\n        ",t.innerHTML=i}addFixtureRowWithData(e){const t=document.querySelector("#fixtures-container");if(!t)return;let i="";if(e.date&&(e.kickOffTime||e.time))try{const t=e.kickOffTime&&"TBD"!==e.kickOffTime?e.kickOffTime:e.time,n=new Date(`${e.date}T${t}`);if(!isNaN(n.getTime())){const o=n.getFullYear(),s=String(n.getMonth()+1).padStart(2,"0"),a=String(n.getDate()).padStart(2,"0");i=`${o}-${s}-${a}T${String(n.getHours()).padStart(2,"0")}:${String(n.getMinutes()).padStart(2,"0")}`,console.log(`Reconstructed datetime for editing: ${i} from date: ${e.date}, time: ${t}`)}}catch(t){console.warn("Error reconstructing datetime:",t),i=e.dateTime||""}else e.dateTime&&(i=e.dateTime);const n=document.createElement("div");n.className="fixture-row",n.innerHTML=`\n            <div class="fixture-inputs">\n                <input type="text" class="home-team" value="${e.homeTeam||""}" placeholder="Home Team">\n                <input type="text" class="away-team" value="${e.awayTeam||""}" placeholder="Away Team">\n                <input type="datetime-local" class="fixture-date" value="${i}">\n                <input type="text" class="venue" value="${e.venue||""}" placeholder="Venue">\n                <button type="button" class="remove-fixture-btn" onclick="this.parentElement.parentElement.remove()">Remove</button>\n            </div>\n        `,t.appendChild(n)}loadScoresForGameweek(){const e=document.querySelector("#score-gameweek-select");if(!e)return void console.log("Score gameweek select not found, skipping scores load");const t=e.value,i="tiebreak"===t?"gwtiebreak":`gw${t}`,n=`edition${window.currentActiveEdition}_${i}`;this.db.collection("fixtures").doc(n).get().then(e=>{if(e.exists){const t=e.data().fixtures||[];this.displayScores(t)}else this.displayScores([])}).catch(e=>{console.error("Error loading scores:",e),this.displayScores([])})}displayScores(e){const t=document.querySelector("#scores-container");t&&(t.innerHTML="",0!==e.length?e.forEach((e,t)=>{this.addScoreRow(e,t)}):t.innerHTML="<p>No fixtures found for this gameweek</p>")}addScoreRow(e,t){const i=document.querySelector("#scores-container");if(!i)return;const n=document.createElement("div");n.className="score-row",n.innerHTML=`\n            <div class="score-inputs">\n                <span class="team-names">${e.homeTeam} vs ${e.awayTeam}</span>\n                <input type="number" class="home-score" value="${e.homeScore||""}" placeholder="0" min="0">\n                <span>-</span>\n                <input type="number" class="away-score" value="${e.awayScore||""}" placeholder="0" min="0">\n                <select class="fixture-status">\n                    <option value="NS" ${"NS"===e.status?"selected":""}>Not Started</option>\n                    <option value="1H" ${"1H"===e.status?"selected":""}>First Half</option>\n                    <option value="HT" ${"HT"===e.status?"selected":""}>Half Time</option>\n                    <option value="2H" ${"2H"===e.status?"selected":""}>Second Half</option>\n                    <option value="FT" ${"FT"===e.status?"selected":""}>Full Time</option>\n                    <option value="AET" ${"AET"===e.status?"selected":""}>Extra Time</option>\n                    <option value="PEN" ${"PEN"===e.status?"selected":""}>Penalties</option>\n                </select>\n                <span class="fixture-date">${e.date?new Date(e.date).toLocaleDateString("en-GB"):"TBD"}</span>\n            </div>\n        `,i.appendChild(n)}async saveScores(){try{if(!window.currentActiveEdition)return void alert("No active edition selected. Please select an edition first.");const e=document.querySelector("#score-gameweek-select").value;if(!e)return void alert("No gameweek selected. Please select a gameweek first.");const t="tiebreak"===e?"gwtiebreak":`gw${e}`,i=`edition${window.currentActiveEdition}_${t}`;if(!document.querySelector("#scores-container"))return void alert("Scores container not found. Please ensure you are on the correct page.");const n=document.querySelectorAll(".score-row");if(0===n.length)return void alert("No score rows found. Please load fixtures first.");const o=[];if(n.forEach(e=>{const t=e.querySelector(".team-names"),i=e.querySelector(".fixture-date");if(!t||!i)return void console.warn("Missing required elements in score row:",e);const n=t.textContent;if(!n)return void console.warn("Team names element has no text content:",t);const[s,a]=n.split(" vs ");if(!s||!a)return void console.warn("Invalid team names format:",n);const r=parseInt(e.querySelector(".home-score").value)||0,l=parseInt(e.querySelector(".away-score").value)||0,c=e.querySelector(".fixture-status").value;let d;d="INPUT"===i.tagName?i.value:i.textContent,o.push({homeTeam:s.trim(),awayTeam:a.trim(),homeScore:r,awayScore:l,status:c,date:d&&"TBD"!==d?new Date(d).toISOString():null})}),0===o.length)return void alert("No scores to save");await this.db.collection("fixtures").doc(i).set({fixtures:o,gameweek:e,edition:window.currentActiveEdition,lastUpdated:new Date}),alert(`Saved scores for ${o.length} fixtures in gameweek ${e}`)}catch(e){console.error("Error saving scores:",e),console.error("Error details:",{message:e.message,stack:e.stack,scoreRowsCount:document.querySelectorAll(".score-row").length,scoresContainer:!!document.querySelector("#scores-container")}),alert("Error saving scores: "+e.message)}}async loadCurrentGameweekFixtures(){try{const e=this.getActiveGameweek();if(!e)return void console.log("No active game week found");const t=await this.db.collection("fixtures").doc(`gameweek_${e}`).get();t.exists&&(this.currentGameweekFixtures=t.data().fixtures||[],console.log(`Loaded ${this.currentGameweekFixtures.length} fixtures for game week ${e}`))}catch(e){console.error("Error loading current game week fixtures:",e)}}getActiveGameweek(){return"1"}async loadFixturesForDeadline(e,t=null,i=null){const n=document.querySelector("#fixtures-display-container");if(!n)return;const o=document.querySelector("#fixtures-display");if(o)try{const s="tiebreak"===e?"gwtiebreak":`gw${e}`,a=`edition${window.currentActiveEdition}_${s}`;console.log("Loading fixtures for deadline:",a);const r=await this.db.collection("fixtures").doc(a).get();if(r.exists){const s=r.data().fixtures;s&&s.length>0?(console.log("Found fixtures:",s.length),this.renderFixturesDisplay(s,t,e,i),n.style.display="block"):(console.log("No fixtures found for gameweek"),o.innerHTML="<p>No fixtures available for this gameweek.</p>",n.style.display="block")}else console.log("No fixtures document found for:",a),o.innerHTML="<p>No fixtures available for this gameweek.</p>",n.style.display="block"}catch(e){console.error("Error loading fixtures for deadline:",e),o.innerHTML="<p>Error loading fixtures. Please try again.</p>",n.style.display="block"}}async renderFixturesDisplay(e,t=null,i=null,n=null){const o=document.querySelector("#fixtures-display-container"),s=document.querySelector("#fixtures-display"),a=document.querySelector("#deadline-date"),r=document.querySelector("#deadline-status"),l=document.querySelector("#pick-status-display");if(o&&s){console.log("Rendering fixtures display for",e.length,"fixtures");try{if(o.style.display="block",!e||0===e.length)return void(s.innerHTML="<p>No fixtures available for this gameweek.</p>");const n=e.reduce((e,t)=>new Date(t.date)<new Date(e.date)?t:e);if(a&&n.date){const e=new Date(n.date),t=e.getFullYear(),i=e.getMonth(),o=e.getDate(),s=e.getHours(),r=e.getMinutes(),l=new Date(t,i,o,s,r).toLocaleDateString("en-GB",{weekday:"short",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit",timeZone:"Europe/London"});a.textContent=l}const c=e.every(e=>e.status&&("FT"===e.status||"AET"===e.status||"PEN"===e.status)),d=e.every(e=>e.status&&"NS"!==e.status&&"1H"!==e.status&&"HT"!==e.status&&"2H"!==e.status);if(r&&(c?(r.textContent="All fixtures completed",r.style.color="#28a745"):d?(r.textContent="All fixtures finished, processing results...",r.style.color="#ffc107"):(r.textContent="Fixtures in progress",r.style.color="#007bff")),l&&t&&t.picks){const e="tiebreak"===i?"gwtiebreak":`gw${i}`,n=t.picks[e];n?(l.textContent=`Pick made: ${n.team}`,l.style.color="#28a745"):(l.textContent="No pick made yet",l.style.color="#dc3545")}let u='<div class="fixtures-list">';e.forEach((e,t)=>{const i=new Date(e.date),n=i.getFullYear(),o=i.getMonth(),s=i.getDate(),a=i.getHours(),r=i.getMinutes(),l=new Date(n,o,s,a,r).toLocaleDateString("en-GB",{weekday:"short",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit",timeZone:"Europe/London"});let c="fixture-status",d=e.status||"NS";"FT"===e.status||"AET"===e.status||"PEN"===e.status?c+=" completed":"1H"===e.status||"HT"===e.status||"2H"===e.status?c+=" in-progress":"NS"===e.status&&(c+=" not-started"),u+=`\n                    <div class="fixture-item">\n                        <div class="fixture-header">\n                            <span class="fixture-date">${l}</span>\n                            <span class="${c}">${d}</span>\n                        </div>\n                        <div class="fixture-teams">\n                            <span class="team home-team">${e.homeTeam}</span>\n                            <span class="vs">v</span>\n                            <span class="team away-team">${e.awayTeam}</span>\n                        </div>\n                        ${void 0!==e.homeScore&&void 0!==e.awayScore?`<div class="fixture-score">${e.homeScore} - ${e.awayScore}</div>`:'<div class="fixture-score">-</div>'}\n                    </div>\n                `}),u+="</div>",s.innerHTML=u}catch(e){console.error("Error rendering fixtures display:",e),s.innerHTML="<p>Error loading fixtures. Please try again.</p>"}}else console.warn("Fixtures display containers not found")}async loadMobileFixturesForDeadline(e,t=null,i=null){const n=document.querySelector("#mobile-fixtures-display-container");if(!n)return;const o=document.querySelector("#mobile-fixtures-display");if(o)try{const s="tiebreak"===e?"gwtiebreak":`gw${e}`,a=`edition${window.currentActiveEdition}_${s}`;console.log("Loading mobile fixtures for deadline:",a);const r=await this.db.collection("fixtures").doc(a).get();if(r.exists){const s=r.data().fixtures;s&&s.length>0?(console.log("Found mobile fixtures:",s.length),this.renderMobileFixturesDisplay(s,t,e,i),n.style.display="block"):(console.log("No mobile fixtures found for gameweek"),o.innerHTML="<p>No fixtures available for this gameweek.</p>",n.style.display="block")}else console.log("No mobile fixtures document found for:",a),o.innerHTML="<p>No fixtures available for this gameweek.</p>",n.style.display="block"}catch(e){console.error("Error loading mobile fixtures for deadline:",e),o.innerHTML="<p>Error loading fixtures. Please try again.</p>",n.style.display="block"}}async renderMobileFixturesDisplay(e,t=null,i=null,n=null){const o=document.querySelector("#mobile-fixtures-display-container"),s=document.querySelector("#mobile-fixtures-display"),a=document.querySelector("#mobile-deadline-date"),r=document.querySelector("#mobile-deadline-status"),l=document.querySelector("#mobile-pick-status-display");if(o&&s){console.log("Rendering mobile fixtures display for",e.length,"fixtures");try{if(o.style.display="block",!e||0===e.length)return void(s.innerHTML="<p>No fixtures available for this gameweek.</p>");const n=e.reduce((e,t)=>new Date(t.date)<new Date(e.date)?t:e);if(a&&n.date){const e=new Date(n.date),t=e.getFullYear(),i=e.getMonth(),o=e.getDate(),s=e.getHours(),r=e.getMinutes(),l=new Date(t,i,o,s,r).toLocaleDateString("en-GB",{weekday:"short",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit",timeZone:"Europe/London"});a.textContent=l}const c=e.every(e=>e.status&&("FT"===e.status||"AET"===e.status||"PEN"===e.status)),d=e.every(e=>e.status&&"NS"!==e.status&&"1H"!==e.status&&"HT"!==e.status&&"2H"!==e.status);if(r&&(c?(r.textContent="All fixtures completed",r.style.color="#28a745"):d?(r.textContent="All fixtures finished, processing results...",r.style.color="#ffc107"):(r.textContent="Fixtures in progress",r.style.color="#007bff")),l&&t&&t.picks){const e="tiebreak"===i?"gwtiebreak":`gw${i}`,n=t.picks[e];n?(l.textContent=`Pick made: ${n.team}`,l.style.color="#28a745"):(l.textContent="No pick made yet",l.style.color="#dc3545")}let u='<div class="mobile-fixtures-list">';e.forEach((e,t)=>{const i=new Date(e.date),n=i.getFullYear(),o=i.getMonth(),s=i.getDate(),a=i.getHours(),r=i.getMinutes(),l=new Date(n,o,s,a,r).toLocaleDateString("en-GB",{month:"short",day:"numeric",hour:"2-digit",minute:"2-digit",timeZone:"Europe/London"});let c="mobile-fixture-status",d=e.status||"NS";"FT"===e.status||"AET"===e.status||"PEN"===e.status?c+=" completed":"1H"===e.status||"HT"===e.status||"2H"===e.status?c+=" in-progress":"NS"===e.status&&(c+=" not-started"),u+=`\n                    <div class="mobile-fixture-item">\n                        <div class="mobile-fixture-header">\n                            <span class="mobile-fixture-date">${l}</span>\n                            <span class="${c}">${d}</span>\n                        </div>\n                        <div class="mobile-fixture-teams">\n                            <span class="mobile-team home-team">${e.homeTeam}</span>\n                            <span class="mobile-vs">v</span>\n                            <span class="mobile-team away-team">${e.awayTeam}</span>\n                        </div>\n                        ${void 0!==e.homeScore&&void 0!==e.awayScore?`<div class="mobile-fixture-score">${e.homeScore} - ${e.awayScore}</div>`:'<div class="mobile-fixture-score">-</div>'}\n                    </div>\n                `}),u+="</div>",s.innerHTML=u}catch(e){console.error("Error rendering mobile fixtures display:",e),s.innerHTML="<p>Error loading fixtures. Please try again.</p>"}}else console.warn("Mobile fixtures display containers not found")}switchToFixturesTab(){const e=document.querySelector('.mobile-tabs .tab-btn[data-tab="fixtures"]'),t=document.getElementById("fixtures-tab");e&&e.classList.add("active"),t&&t.classList.add("active");const i=document.querySelector('.desktop-tabs .desktop-tab-btn[data-tab="fixtures"]'),n=document.getElementById("desktop-fixtures-tab");i&&i.classList.add("active"),n&&n.classList.add("active")}async loadCompetitionSettings(){try{const e=await this.db.collection("settings").doc("competition").get();if(e.exists){const t=e.data();console.log("Competition settings loaded:",t)}}catch(e){console.error("Error loading competition settings:",e)}}async loadFootballWebPagesSettings(){try{const e=await this.db.collection("settings").doc("footballWebPages").get();if(e.exists){const t=e.data();console.log("Football Web Pages settings loaded:",t)}}catch(e){console.error("Error loading Football Web Pages settings:",e)}}async saveFootballWebPagesSettings(){try{const e=document.querySelector("#football-webpages-league")?.value,t=document.querySelector("#football-webpages-season")?.value;if(!e||!t)return void alert("Please fill in all required fields");await this.db.collection("settings").doc("footballWebPages").set({league:e,season:t,lastUpdated:new Date}),alert("API settings saved successfully")}catch(e){console.error("Error saving API settings:",e),alert("Error saving API settings: "+e.message)}}async importScoresFromFootballWebPages(e){try{console.log("Importing scores from Football Web Pages for gameweek:",e),alert("Score import functionality would be implemented here")}catch(e){console.error("Error importing scores:",e),alert("Error importing scores: "+e.message)}}async importScoresFromFile(e,t){try{console.log("Importing scores from file for gameweek:",t),alert("File import functionality would be implemented here")}catch(e){console.error("Error importing scores from file:",e),alert("Error importing scores from file: "+e.message)}}startAutoScoreUpdates(e){this.autoUpdateInterval&&clearInterval(this.autoUpdateInterval),this.autoUpdateInterval=setInterval(async()=>{await this.performAutoScoreUpdate(e)},6e4),console.log("Auto score updates started for gameweek:",e)}stopAutoScoreUpdates(){this.autoUpdateInterval&&(clearInterval(this.autoUpdateInterval),this.autoUpdateInterval=null),console.log("Auto score updates stopped")}async performAutoScoreUpdate(e){try{console.log("Performing auto score update for gameweek:",e)}catch(e){console.error("Error in auto score update:",e)}}startRealTimeScoreUpdates(e){this.realTimeUpdateInterval&&clearInterval(this.realTimeUpdateInterval),this.realTimeUpdateInterval=setInterval(async()=>{await this.performRealTimeUpdate(e)},3e4),console.log("Real-time score updates started for gameweek:",e)}stopRealTimeScoreUpdates(){this.realTimeUpdateInterval&&(clearInterval(this.realTimeUpdateInterval),this.realTimeUpdateInterval=null),console.log("Real-time score updates stopped")}async performRealTimeUpdate(e){try{console.log("Performing real-time update for gameweek:",e)}catch(e){console.error("Error in real-time update:",e)}}processResults(e,t){try{console.log("Processing results for gameweek:",e,"with",t.length,"fixtures")}catch(e){console.error("Error processing results:",e)}}checkPickStillValid(e,t){try{return!0}catch(e){return console.error("Error checking pick validity:",e),!1}}calculatePickResult(e,t){try{return"win"}catch(e){return console.error("Error calculating pick result:",e),"unknown"}}async renderPlayerScores(e,t){try{console.log("Rendering player scores for gameweek:",t,"with",e.length,"fixtures")}catch(e){console.error("Error rendering player scores:",e)}}renderDesktopPlayerScores(e,t){try{console.log("Rendering desktop player scores for gameweek:",t,"with",e.length,"fixtures")}catch(e){console.error("Error rendering desktop player scores:",e)}}renderMobilePlayerScores(e,t){try{console.log("Rendering mobile player scores for gameweek:",t,"with",e.length,"fixtures")}catch(e){console.error("Error rendering mobile player scores:",e)}}async renderAsItStandsStandings(e,t,i,n,o){try{console.log("Rendering as-it-stands standings for gameweek:",i,"edition:",n,"platform:",o)}catch(e){console.error("Error rendering as-it-stands standings:",e)}}cleanup(){this.autoUpdateInterval&&clearInterval(this.autoUpdateInterval),this.realTimeUpdateInterval&&clearInterval(this.realTimeUpdateInterval),console.log("FixturesManager cleaned up")}};class n{constructor(e,t=1){this.db=e,this.currentActiveEdition=t,this.autoUpdateInterval=null,this.realTimeUpdateInterval=null,this.isLoadingScores=!1}initializeLiveScoring(){console.log("Initializing live scoring..."),this.setupEventListeners()}setupEventListeners(){const e=document.querySelector("#start-auto-updates-btn"),t=document.querySelector("#stop-auto-updates-btn"),i=document.querySelector("#auto-update-status");e&&e.addEventListener("click",()=>{const e=document.querySelector("#score-gameweek-select")?.value;e&&(this.startAutoScoreUpdates(e),i&&(i.innerHTML='<p class="success">✅ Auto score updates started. Checking every minute for half-time (45+ min) and full-time (105+ min) scores.</p>'))}),t&&t.addEventListener("click",()=>{this.stopAutoScoreUpdates(),i&&(i.innerHTML='<p class="info">⏹️ Auto score updates stopped.</p>')});const n=document.querySelector("#refresh-scores-btn");n&&n.addEventListener("click",()=>this.loadScoresForGameweek())}loadScoresForGameweek(){if(this.isLoadingScores)return console.log("Scores already loading, skipping duplicate call"),Promise.resolve([]);const e=document.querySelector("#score-gameweek-select"),t=document.querySelector("#scores-container");if(!e)return console.log("Score gameweek select not found, skipping scores load"),Promise.resolve([]);if(!t)return console.log("Scores container not found, skipping scores load"),Promise.resolve([]);const i=e.value;return console.log(`loadScoresForGameweek called - gameweek: ${i}, currentActiveEdition: ${this.currentActiveEdition}`),this.isLoadingScores=!0,t.innerHTML="",t.textContent="",new Promise((e,n)=>{setTimeout(async()=>{try{const n=await this.loadScoresContent(i,t);e(n)}catch(e){this.isLoadingScores=!1,n(e)}finally{this.isLoadingScores=!1}},10)})}async loadScoresContent(e,t){const i="tiebreak"===e?"gwtiebreak":`gw${e}`,n=`edition${this.currentActiveEdition}_${i}`;console.log(`Looking for fixtures in: ${n}`);try{const i=await this.db.collection("fixtures").doc(n).get();if(i.exists){const e=i.data().fixtures,t=e.map(e=>(void 0===e.homeScoreHT&&(e.homeScoreHT=null),void 0===e.awayScoreHT&&(e.awayScoreHT=null),e));return e.some(e=>void 0===e.homeScoreHT||void 0===e.awayScoreHT)&&(console.log("Initializing missing half-time score fields in database"),this.db.collection("fixtures").doc(n).update({fixtures:t}).catch(e=>{console.error("Error updating fixtures with initialized fields:",e)})),t.forEach((e,t)=>{this.addScoreRow(e,t)}),console.log(`✅ Scores loaded successfully for ${t.length} fixtures`),this.isLoadingScores=!1,t}return console.log(`No fixtures found for Edition ${this.currentActiveEdition} Game Week ${e} - not falling back to old structure`),t.innerHTML=`<p>No fixtures found for Edition ${this.currentActiveEdition} Game Week ${e}. Please add fixtures first.</p>`,this.isLoadingScores=!1,[]}catch(i){throw console.error("Error loading scores from new structure:",i),t.innerHTML=`<p>Error loading fixtures for Edition ${this.currentActiveEdition} Game Week ${e}. Please try again.</p>`,this.isLoadingScores=!1,i}}addScoreRow(e,t){const i=document.querySelector("#scores-container"),n=document.createElement("div");n.className="score-row";const o=e.time?e.time:e.matchTime||"TBC",s=e.completed||"FT"===e.status||"COMP"===e.status,a=null!==e.homeScoreHT&&void 0!==e.homeScoreHT&&null!==e.awayScoreHT&&void 0!==e.awayScoreHT,r=null!==e.homeScore&&void 0!==e.homeScore&&null!==e.awayScore&&void 0!==e.awayScore,l=null!==e.homeScore&&void 0!==e.homeScore&&null!==e.awayScore&&void 0!==e.awayScore,c=!s&&l,d=s&&r;console.log(`Fixture ${t}: ${e.homeTeam} vs ${e.awayTeam}`,{homeScore:e.homeScore,awayScore:e.awayScore,hasCurrentScores:l,showCurrentScore:c,showFullTimeScore:d,isCompleted:s,status:e.status});const u=c?`\n                    <div class="current-scores">\n                        <label>Current Score:</label>\n                        <input type="number" class="home-score-current" placeholder="Home" value="${null!==e.homeScore&&void 0!==e.homeScore?e.homeScore:""}" min="0">\n                        <span>-</span>\n                        <input type="number" class="away-score-current" placeholder="Away" value="${null!==e.awayScore&&void 0!==e.awayScore?e.awayScore:""}" min="0">\n                    </div>\n                    `:"",g=a||!s?`\n                    <div class="half-time-scores">\n                        <label>Half Time:</label>\n                        <input type="number" class="home-score-ht" placeholder="HT" value="${null!==e.homeScoreHT&&void 0!==e.homeScoreHT?e.homeScoreHT:""}" min="0">\n                        <span>-</span>\n                        <input type="number" class="away-score-ht" placeholder="HT" value="${null!==e.awayScoreHT&&void 0!==e.awayScoreHT?e.awayScoreHT:""}" min="0">\n                    </div>\n                    `:"",m=d?`\n                    <div class="full-time-scores">\n                        <label>Full Time:</label>\n                        <input type="number" class="home-score" placeholder="Home" value="${null!==e.homeScore&&void 0!==e.homeScore?e.homeScore:""}" min="0">\n                        <span>-</span>\n                        <input type="number" class="away-score" placeholder="Away" value="${null!==e.awayScore&&void 0!==e.awayScore?e.awayScore:""}" min="0">\n                    </div>\n                    `:"";n.innerHTML=`\n            <div class="score-inputs">\n                <div class="fixture-info">\n                    <span class="fixture-display">${e.homeTeam} vs ${e.awayTeam}</span>\n                    <span class="match-time">${o}</span>\n                    <span class="match-status ${e.status||"NS"}">${this.getStatusDisplay(e.status)}</span>\n                </div>\n                <div class="score-section">\n                    ${u}\n                    ${g}\n                    ${m}\n                </div>\n                <div class="match-controls">\n                    <input type="checkbox" class="fixture-completed" ${s?"checked":""}>\n                    <label>Completed</label>\n                    <select class="match-status-select">\n                        <option value="NS" ${"NS"===e.status?"selected":""}>Not Started</option>\n                        <option value="POSTP" ${"POSTP"===e.status?"selected":""}>Postponed</option>\n                        <option value="KO" ${"KO"===e.status?"selected":""}>Kicked Off</option>\n                        <option value="HT" ${"HT"===e.status?"selected":""}>Half-time</option>\n                        <option value="FT" ${"FT"===e.status?"selected":""}>Full-time</option>\n                        <option value="COMP" ${"COMP"===e.status?"selected":""}>Completed</option>\n                    </select>\n                </div>\n            </div>\n        `,i.appendChild(n)}getStatusDisplay(e){return{NS:"Not Started",POSTP:"Postponed",KO:"Kicked Off","1H":"First Half",HT:"Half Time","2H":"Second Half",FT:"Full Time",AET:"Extra Time",PEN:"Penalties",COMP:"Completed",LIVE:"Live"}[e]||e||"Unknown"}startAutoScoreUpdates(e){console.log(`Starting auto score updates for gameweek ${e}`),this.autoUpdateInterval&&clearInterval(this.autoUpdateInterval),this.autoUpdateInterval=setInterval(()=>{this.performAutoScoreUpdate(e)},6e4)}stopAutoScoreUpdates(){console.log("Stopping auto score updates"),this.autoUpdateInterval&&(clearInterval(this.autoUpdateInterval),this.autoUpdateInterval=null)}async performAutoScoreUpdate(e){console.log(`Performing auto score update for gameweek ${e}`);try{console.log("Auto score update logic not yet implemented")}catch(e){console.error("Error during auto score update:",e)}}startRealTimeScoreUpdates(e){console.log(`Starting real-time score updates for gameweek ${e}`),this.realTimeUpdateInterval&&clearInterval(this.realTimeUpdateInterval),this.realTimeUpdateInterval=setInterval(()=>{this.performRealTimeUpdate(e)},3e4)}stopRealTimeScoreUpdates(){console.log("Stopping real-time score updates"),this.realTimeUpdateInterval&&(clearInterval(this.realTimeUpdateInterval),this.realTimeUpdateInterval=null)}async performRealTimeUpdate(e){console.log(`Performing real-time update for gameweek ${e}`);try{console.log("Real-time update logic not yet implemented")}catch(e){console.error("Error during real-time update:",e)}}cleanup(){this.stopAutoScoreUpdates(),this.stopRealTimeScoreUpdates()}}class o{constructor(e,t=1,i="1"){this.db=e,this.currentActiveEdition=t,this.currentActiveGameweek=i,this.processedGameweeks=new Set}processResults(e,t){const i="tiebreak"===e?"Tiebreak Round":`Game Week ${e}`;if(console.log(`Processing results for ${i}`),this.processedGameweeks.has(e))return void console.log(`Gameweek ${e} has already been processed, skipping to prevent duplicate life deduction`);const n=t.filter(e=>e.completed&&null!==e.homeScore&&null!==e.awayScore);if(0===n.length)return void console.log("No completed fixtures to process");this.processedGameweeks.add(e),console.log(`Marking gameweek ${e} as processed`);const o="tiebreak"===e?"gwtiebreak":`gw${e}`;this.db.collection("users").get().then(e=>{e.forEach(e=>{const t=e.data(),i=`edition${this.getUserEdition(t)}_${o}`;let s=t.picks&&t.picks[i];if(!s&&t.picks&&t.picks[o]&&(s=t.picks[o],console.log(`Using old pick structure for user ${t.displayName}`)),!s)return void console.log(`No pick found for user ${t.displayName} in ${i} or ${o}`);console.log(`Processing results for ${t.displayName}: picked ${s} in ${i}`);let a=0;if(n.forEach(e=>{const i=e.homeTeam,n=e.awayTeam,o=e.homeScore,r=e.awayScore;let l=null;o>r?l=i:r>o&&(l=n),l&&l!==s&&(s!==i&&s!==n||(a++,console.log(`${t.displayName} loses a life: picked ${s}, ${l} won`)))}),a>0){const i=t.lives||2,n=Math.max(0,i-a);this.db.collection("users").doc(e.id).update({lives:n}).then(()=>{console.log(`${t.displayName}: ${i} → ${n} lives (lost ${a})`)}).catch(e=>{console.error(`Error updating lives for ${t.displayName}:`,e)})}else console.log(`${t.displayName} didn't lose any lives this gameweek`)})}).catch(e=>{console.error("Error processing results:",e)})}getUserEdition(e){return e.defaultEdition?e.defaultEdition:e.registeredEditions&&e.registeredEditions.length>0?e.registeredEditions[0]:1}checkPickStillValid(e,t){const i=t.filter(e=>"completed"===e.status&&null!==e.homeScore&&null!==e.awayScore);for(const t of i){const i=t.homeScore,n=t.awayScore;if(i>n&&t.awayTeam===e)return!1;if(n>i&&t.homeTeam===e)return!1}return!0}calculatePickResult(e,t){const i=t.filter(e=>"completed"===e.status&&null!==e.homeScore&&null!==e.awayScore);for(const t of i){const i=t.homeScore,n=t.awayScore;if(i>n&&t.awayTeam===e)return"lost";if(n>i&&t.homeTeam===e)return"lost";if(i===n)return"draw"}return"valid"}async loadPlayerScores(){try{const e=this.currentActiveGameweek,t="tiebreak"===e?"gwtiebreak":`gw${e}`,i=`edition${this.currentActiveEdition}_${t}`,n=await this.db.collection("fixtures").doc(i).get();if(n.exists){const e=n.data().fixtures;return console.log(`Found ${e.length} fixtures for player scores`),e}return console.log("No fixtures found for player scores"),[]}catch(e){return console.error("Error loading player scores:",e),[]}}async renderPlayerScores(e,t){try{this.renderDesktopPlayerScores(e,t),this.renderMobilePlayerScores(e,t)}catch(e){console.error("Error rendering player scores:",e)}}renderDesktopPlayerScores(e,t){console.log("renderDesktopPlayerScores called with:",{fixtures:e,gameweek:t});const i=document.querySelector("#desktop-scores-display");if(!i)return void console.error("Desktop scores display element not found");if(!e||0===e.length)return void console.log("No fixtures to render for desktop");const n=e.sort((e,t)=>new Date(e.date)-new Date(t.date));let o=`\n            <div class="scores-header">\n                <h4>Game Week ${"tiebreak"===t?"Tiebreak":t} Results</h4>\n            </div>\n            <div class="scores-container">\n        `;for(const e of n){const t=new Date(e.date),i=this.getTeamBadge(e.homeTeam),n=this.getTeamBadge(e.awayTeam),s=i?`<img src="${i}" alt="${e.homeTeam}" class="team-badge">`:"",a=n?`<img src="${n}" alt="${e.awayTeam}" class="team-badge">`:"";let r="",l="";if(e.completed||"FT"===e.status||"AET"===e.status||"PEN"===e.status){const t=null!==e.homeScoreHT&&null!==e.awayScoreHT;r=`\n                    <div class="score-result">\n                        <span class="score">${e.homeScore||0}</span>\n                        <span class="score-separator">-</span>\n                        <span class="score">${e.awayScore||0}</span>\n                    </div>\n                    ${t?`\n                        <div class="half-time-scores">\n                            <small>Half Time: ${e.homeScoreHT} - ${e.awayScoreHT}</small>\n                        </div>\n                    `:""}\n                `,l="completed"}else if("HT"===e.status&&null!==e.homeScoreHT&&null!==e.awayScoreHT)r=`\n                    <div class="score-result">\n                        <span class="score">${e.homeScoreHT}</span>\n                        <span class="score-separator">-</span>\n                        <span class="score">${e.awayScoreHT}</span>\n                        <span class="score-status">HT</span>\n                    </div>\n                `,l="half-time";else if("1H"===e.status||"2H"===e.status||"LIVE"===e.status){const t=null!==e.homeScoreHT&&null!==e.awayScoreHT;r=`\n                    <div class="score-result">\n                        <span class="score">${e.homeScore||0}</span>\n                        <span class="score-separator">-</span>\n                        <span class="score">${e.awayScore||0}</span>\n                        <span class="score-status live">LIVE</span>\n                    </div>\n                    ${t?`\n                        <div class="half-time-scores">\n                            <small>Half Time: ${e.homeScoreHT} - ${e.awayScoreHT}</small>\n                        </div>\n                    `:""}\n                `,l="live"}else r='\n                    <div class="score-result">\n                        <span class="score-placeholder">vs</span>\n                    </div>\n                ',l="not-started";o+=`\n                <div class="score-fixture ${l}">\n                    <div class="fixture-teams">\n                        <div class="team home-team">\n                            ${s}\n                            <span class="team-name">${e.homeTeam}</span>\n                        </div>\n                        ${r}\n                        <div class="team away-team">\n                            <span class="team-name">${e.awayTeam}</span>\n                            ${a}\n                        </div>\n                    </div>\n                    <div class="fixture-info">\n                        <div class="fixture-time">${t.toLocaleTimeString("en-GB",{timeZone:"Europe/London",hour:"2-digit",minute:"2-digit"})}</div>\n                        <div class="fixture-date">${t.toLocaleDateString("en-GB",{timeZone:"Europe/London",weekday:"short",month:"short",day:"numeric"})}</div>\n                        <div class="fixture-status">${this.getStatusDisplay(e.status)}</div>\n                    </div>\n                </div>\n            `}o+="</div>",i.innerHTML=o}renderMobilePlayerScores(e,t){console.log("renderMobilePlayerScores called with:",{fixtures:e,gameweek:t});const i=document.querySelector("#mobile-scores-display");if(!i)return void console.error("Mobile scores display element not found");if(!e||0===e.length)return void console.log("No fixtures to render for mobile");const n=e.sort((e,t)=>new Date(e.date)-new Date(t.date));let o=`\n            <div class="mobile-scores-header">\n                <h4>Game Week ${"tiebreak"===t?"Tiebreak":t} Results</h4>\n            </div>\n            <div class="mobile-scores-container">\n        `;for(const e of n){const t=new Date(e.date),i=this.getTeamBadge(e.homeTeam),n=this.getTeamBadge(e.awayTeam),s=i?`<img src="${i}" alt="${e.homeTeam}" class="team-badge">`:"",a=n?`<img src="${n}" alt="${e.awayTeam}" class="team-badge">`:"";let r="",l="";if(e.completed||"FT"===e.status||"AET"===e.status||"PEN"===e.status){const t=null!==e.homeScoreHT&&null!==e.awayScoreHT;r=`\n                    <div class="mobile-score-result">\n                        <span class="mobile-score">${e.homeScore||0}</span>\n                        <span class="mobile-score-separator">-</span>\n                        <span class="mobile-score">${e.awayScore||0}</span>\n                    </div>\n                    ${t?`\n                        <div class="mobile-half-time-scores">\n                            <small>Half Time: ${e.homeScoreHT} - ${e.awayScoreHT}</small>\n                        </div>\n                    `:""}\n                `,l="completed"}else if("HT"===e.status&&null!==e.homeScoreHT&&null!==e.awayScoreHT)r=`\n                    <div class="mobile-score-result">\n                        <span class="mobile-score">${e.homeScoreHT}</span>\n                        <span class="mobile-score-separator">-</span>\n                        <span class="mobile-score">${e.awayScoreHT}</span>\n                        <span class="mobile-score-status">HT</span>\n                    </div>\n                `,l="half-time";else if("1H"===e.status||"2H"===e.status||"LIVE"===e.status){const t=null!==e.homeScoreHT&&null!==e.awayScoreHT;r=`\n                    <div class="mobile-score-result">\n                        <span class="mobile-score">${e.homeScore||0}</span>\n                        <span class="mobile-score-separator">-</span>\n                        <span class="mobile-score">${e.awayScore||0}</span>\n                        <span class="mobile-score-status live">LIVE</span>\n                    </div>\n                    ${t?`\n                        <div class="mobile-half-time-scores">\n                            <small>Half Time: ${e.homeScoreHT} - ${e.awayScoreHT}</span>\n                        </div>\n                    `:""}\n                `,l="live"}else r='\n                    <div class="mobile-score-result">\n                        <span class="mobile-score-placeholder">vs</span>\n                    </div>\n                ',l="not-started";o+=`\n                <div class="mobile-score-fixture ${l}">\n                    <div class="mobile-fixture-teams">\n                        <div class="mobile-team home-team">\n                            ${s}\n                            <span class="mobile-team-name">${e.homeTeam}</span>\n                        </div>\n                        ${r}\n                        <div class="mobile-team away-team">\n                            <span class="mobile-team-name">${e.awayTeam}</span>\n                            ${a}\n                        </div>\n                    </div>\n                    <div class="mobile-fixture-info">\n                        <div class="mobile-fixture-time">${t.toLocaleTimeString("en-GB",{timeZone:"Europe/London",hour:"2-digit",minute:"2-digit"})}</div>\n                        <div class="mobile-fixture-date">${t.toLocaleDateString("en-GB",{timeZone:"Europe/London",weekday:"short",month:"short",day:"numeric"})}</div>\n                        <div class="mobile-fixture-status">${this.getStatusDisplay(e.status)}</div>\n                    </div>\n                </div>\n            `}o+="</div>",i.innerHTML=o}getStatusDisplay(e){return{NS:"Not Started",POSTP:"Postponed",KO:"Kicked Off","1H":"First Half",HT:"Half Time","2H":"Second Half",FT:"Full Time",AET:"Extra Time",PEN:"Penalties",COMP:"Completed",LIVE:"Live"}[e]||e||"Unknown"}getTeamBadge(e){return null}showNoScoresMessage(e=null){const t=document.querySelector("#desktop-scores-display"),i=document.querySelector("#mobile-scores-display");let n="";n="test"===e?'\n                <div class="no-scores-message">\n                    <h3>Test Edition - No Fixtures Available</h3>\n                    <p>This is the test edition. No fixtures have been created yet.</p>\n                    <p>To see scores, you would need to:</p>\n                    <ul>\n                        <li>Create fixtures in the admin panel</li>\n                        <li>Or switch to a different edition that has fixtures</li>\n                    </ul>\n                    <p>For now, you can explore the other tabs to see how the app works!</p>\n                </div>\n            ':'\n                <div class="no-scores-message">\n                    <p>No scores available for this gameweek yet.</p>\n                    <p>Scores will appear here once matches are played and results are updated.</p>\n                </div>\n            ',t&&(t.innerHTML=n),i&&(i.innerHTML=n)}cleanup(){this.processedGameweeks.clear()}}class s{constructor(e,t=1,i=null){this.db=e,this.currentActiveEdition=t,this.apiManager=i}saveScores(e=null){const t=document.querySelector("#score-gameweek-select").value,i=document.querySelectorAll(".score-row"),n=[];console.log(`saveScores called - gameweek: ${t}, currentActiveEdition: ${this.currentActiveEdition}`);const o="tiebreak"===t?"gwtiebreak":`gw${t}`,s=`edition${this.currentActiveEdition}_${o}`;console.log(`Attempting to save scores for ${s}`),this.db.collection("fixtures").doc(s).get().then(a=>{if(a.exists){const o=a.data().fixtures;console.log(`Found ${o.length} fixtures for ${s}`),i.forEach((e,t)=>{if(o[t]){const i=e.querySelector(".home-score-current"),s=e.querySelector(".away-score-current");let a,r;if(i&&s)a=i.value,r=s.value;else{const t=e.querySelector(".home-score"),i=e.querySelector(".away-score");a=t?t.value:null,r=i?i.value:null}const l=e.querySelector(".home-score-ht"),c=e.querySelector(".away-score-ht"),d=e.querySelector(".fixture-completed"),u=e.querySelector(".match-status-select"),g=l?l.value:null,m=c?c.value:null,h=!!d&&d.checked,p=u?u.value:"FT";n.push({...o[t],homeScore:a?parseInt(a):null,awayScore:r?parseInt(r):null,homeScoreHT:g?parseInt(g):null,awayScoreHT:m?parseInt(m):null,completed:h,status:p})}}),this.db.collection("fixtures").doc(s).update({fixtures:n}).then(()=>{alert("Scores saved for "+("tiebreak"===t?"Tiebreak Round":`Game Week ${t}`)),e&&e(t,n)}).catch(e=>{console.error("Error saving scores:",e),alert("Error saving scores")})}else console.log(`No fixtures document found for ${s} - checking old structure`),this.db.collection("fixtures").doc(o).get().then(n=>{if(n.exists){const s=n.data().fixtures;console.log(`Found ${s.length} fixtures in old structure for ${o}`),i.forEach((e,t)=>{if(s[t]){const i=e.querySelector(".home-score-current"),n=e.querySelector(".away-score-current");let o,a;if(i&&n)o=i.value,a=n.value;else{const t=e.querySelector(".home-score"),i=e.querySelector(".away-score");o=t?t.value:null,a=i?i.value:null}const r=e.querySelector(".home-score-ht"),l=e.querySelector(".away-score-ht"),c=e.querySelector(".fixture-completed"),d=e.querySelector(".match-status-select"),u=r?r.value:null,g=l?l.value:null,m=!!c&&c.checked,h=d?d.value:"FT";s[t]={...s[t],homeScore:o?parseInt(o):null,awayScore:a?parseInt(a):null,homeScoreHT:u?parseInt(u):null,awayScoreHT:g?parseInt(g):null,completed:m,status:h}}}),this.db.collection("fixtures").doc(o).update({fixtures:s}).then(()=>{alert("Scores saved for "+("tiebreak"===t?"Tiebreak Round":`Game Week ${t}`)),e&&e(t,s)}).catch(e=>{console.error("Error saving scores to old structure:",e),alert("Error saving scores")})}else{console.log("No fixtures document found in old structure either - creating empty document");const e=[];this.db.collection("fixtures").doc(s).set({fixtures:e}).then(()=>{console.log(`Created empty fixtures document for ${s}`),alert(`Created empty fixtures document for ${"tiebreak"===t?"Tiebreak Round":`Game Week ${t}`}. Please add fixtures first, then save scores.`)}).catch(e=>{console.error("Error creating fixtures document:",e),alert("Error creating fixtures document. Please try again.")})}}).catch(e=>{console.error("Error checking old structure:",e),alert("Error accessing fixtures. Please try again.")})}).catch(e=>{console.error("Error accessing fixtures document:",e),alert("Error accessing fixtures. Please try again.")})}async importScoresFromFile(e,t){console.log("importScoresFromFile called with gameweek:",t);try{const t=await e.text(),i=JSON.parse(t);Array.isArray(i)?console.log(`Importing ${i.length} scores from file`):(console.error("Invalid file format: expected array of scores"),alert("Invalid file format. Please check the file and try again."))}catch(e){console.error("Error importing scores from file:",e),alert("Error importing scores: "+e.message)}}async importScoresFromFootballWebPages(e){console.log(`📥 Importing scores from Football WebPages for gameweek ${e}`);try{if(!this.apiManager||!this.apiManager.footballWebPagesConfig)return console.error("❌ API configuration not available"),void alert("API configuration not available. Please check the API settings.");const t=`edition${this.currentActiveEdition||"edition1"}_${"tiebreak"===e?"gwtiebreak":`gw${e}`}`;console.log(`📥 Importing scores for ${t}`);const i=await this.db.collection("fixtures").doc(t).get();if(!i.exists)return console.error("❌ No fixtures found for this gameweek"),void alert("No fixtures found for this gameweek. Please import fixtures first.");const n=i.data().fixtures||[];if(0===n.length)return console.error("❌ No fixtures in database for this gameweek"),void alert("No fixtures found in database for this gameweek. Please import fixtures first.");console.log(`📥 Found ${n.length} fixtures in database for gameweek ${e}`);const o=document.querySelector("#football-webpages-league")?.value||"5",s=document.querySelector("#football-webpages-season")?.value||"2025-26";console.log(`📥 Fetching scores for league ${o}, season ${s}`);const a=await fetch(`https://football-web-pages1.p.rapidapi.com/fixtures-results.json?comp=${o}&round=0&team=0`,{method:"GET",headers:{"X-RapidAPI-Key":this.apiManager.footballWebPagesConfig.RAPIDAPI_KEY,"X-RapidAPI-Host":this.apiManager.footballWebPagesConfig.RAPIDAPI_HOST}});if(!a.ok)throw new Error(`HTTP ${a.status}: ${a.statusText}`);const r=await a.json();console.log("📥 API response received:",r);let l=[];if(r["fixtures-results"]){const e=r["fixtures-results"];if(Array.isArray(e))l=e;else if(e.fixtures&&Array.isArray(e.fixtures))l=e.fixtures;else if(e.matches&&Array.isArray(e.matches))l=e.matches;else{const t=Object.keys(e);for(const i of t)if(Array.isArray(e[i])){l=e[i];break}}}if(console.log(`📥 Found ${l.length} fixtures in API response`),0===l.length)return console.error("❌ No fixtures found in API response"),void alert("No fixtures found in API response. Please check the API settings and try again.");let c=0;const d=n.map(e=>{const t=l.find(t=>{const i=t["home-team"]?.name||t.homeTeam||t.home||"TBD",n=t["away-team"]?.name||t.awayTeam||t.away||"TBD";return i===e.homeTeam&&n===e.awayTeam||i.toLowerCase()===e.homeTeam.toLowerCase()&&n.toLowerCase()===e.awayTeam.toLowerCase()||!(!i.toLowerCase().includes(e.homeTeam.toLowerCase())||!n.toLowerCase().includes(e.awayTeam.toLowerCase()))});if(t){const i=t["home-team"]?.name||t.homeTeam||t.home||"TBD",n=t["away-team"]?.name||t.awayTeam||t.away||"TBD";console.log(`📥 Found matching fixture: ${e.homeTeam} vs ${e.awayTeam} (API: ${i} vs ${n})`);let o=null,s=null,a=null,r=null;if(t["home-team"]&&t["away-team"]&&(o=t["home-team"].score??t["home-team"].goals??t["home-team"].result,s=t["away-team"].score??t["away-team"].goals??t["away-team"].result),null==o&&null==s&&(o=t.homeScore??t.homeGoals??t.score1??t.home_result,s=t.awayScore??t.awayGoals??t.score2??t.away_result),null==o&&null==s){if(t.ft_score&&t.ft_score.includes("-")){const e=t.ft_score.split("-");o=parseInt(e[0].trim()),s=parseInt(e[1].trim())}if(null==o&&null==s&&t.score&&t.score.includes("-")){const e=t.score.split("-");o=parseInt(e[0].trim()),s=parseInt(e[1].trim())}if(null==o&&null==s&&t.result&&t.result.includes("-")){const e=t.result.split("-");o=parseInt(e[0].trim()),s=parseInt(e[1].trim())}}if(null==o&&null==s&&(o=t.homeGoals??t.goals1??t.home_goals,s=t.awayGoals??t.goals2??t.away_goals),null==o&&null==s){const e=["score","result","goals","ft_score","ht_score","final_score"];for(const i of e)if(t[i]&&"string"==typeof t[i]&&t[i].includes("-")){const e=t[i].split("-");if(2===e.length&&!isNaN(parseInt(e[0]))&&!isNaN(parseInt(e[1]))){o=parseInt(e[0].trim()),s=parseInt(e[1].trim());break}}}if(t["home-team"]&&t["away-team"]&&(a=t["home-team"]["half-time-score"]??t["home-team"].ht_score??t["home-team"].half_time_score,r=t["away-team"]["half-time-score"]??t["away-team"].ht_score??t["away-team"].half_time_score),null==a&&null==r)if(t.ht_score&&t.ht_score.includes("-")){const e=t.ht_score.split("-");a=parseInt(e[0].trim()),r=parseInt(e[1].trim())}else if(t.half_time_score&&t.half_time_score.includes("-")){const e=t.half_time_score.split("-");a=parseInt(e[0].trim()),r=parseInt(e[1].trim())}else if(t.ht_result&&t.ht_result.includes("-")){const e=t.ht_result.split("-");a=parseInt(e[0].trim()),r=parseInt(e[1].trim())}if(null==a&&null==r&&t.halfTimeScore&&t.halfTimeScore.includes("-")){const e=t.halfTimeScore.split("-");a=parseInt(e[0].trim()),r=parseInt(e[1].trim())}if(null==a&&null==r&&t.halfTime&&t.halfTime.includes("-")){const e=t.halfTime.split("-");a=parseInt(e[0].trim()),r=parseInt(e[1].trim())}if(null==a&&null==r&&t.ht&&t.ht.includes("-")){const e=t.ht.split("-");a=parseInt(e[0].trim()),r=parseInt(e[1].trim())}if(null==a&&null==r){const e=["halfTimeScore","halfTime","ht","ht_score","half_time_score","ht_result","halfTimeResult"];for(const i of e)if(t[i]&&"string"==typeof t[i]&&t[i].includes("-")){const e=t[i].split("-");if(2===e.length&&!isNaN(parseInt(e[0]))&&!isNaN(parseInt(e[1]))){a=parseInt(e[0].trim()),r=parseInt(e[1].trim());break}}}o=null!=o&&""!==o?parseInt(o):null,s=null!=s&&""!==s?parseInt(s):null,a=null!=a&&""!==a?parseInt(a):null,r=null!=r&&""!==r?parseInt(r):null;let l=t.status?.full||t.status?.short||e.status||"NS";return null!==o&&null!==s&&(l="FT"),console.log(`📥 Updating scores: ${e.homeTeam} ${o} - ${s} ${e.awayTeam} (Status: ${l})`),console.log(`📥 Half-time scores: ${e.homeTeam} ${a} - ${r} ${e.awayTeam}`),c++,{...e,homeScore:o,awayScore:s,homeScoreHT:a,awayScoreHT:r,status:l,completed:null!==o&&null!==s,lastUpdated:new Date}}return console.log(`⚠️ No matching fixture found in API for: ${e.homeTeam} vs ${e.awayTeam}`),e});await this.db.collection("fixtures").doc(t).update({fixtures:d,lastUpdated:new Date,scoresImportedFrom:"Football Web Pages API"}),console.log(`✅ Successfully updated ${c} out of ${n.length} fixtures with scores from API`),alert(`Successfully imported scores for ${c} out of ${n.length} fixtures from Football Web Pages API!`),console.log("Scores imported successfully. Please refresh the scores display manually.");const u=document.querySelector("#import-status");u&&(u.textContent=`Successfully imported scores for ${c} fixtures from Football Web Pages API`,u.className="status-message success")}catch(e){console.error("❌ Error importing scores from Football WebPages:",e),alert("Error importing scores from Football WebPages: "+e.message);const t=document.querySelector("#import-status");t&&(t.textContent="Error importing scores: "+e.message,t.className="status-message error")}}async testFootballWebPagesAPI(){console.log("🧪 Testing Football Web Pages API...");try{if(!this.apiManager||!this.apiManager.footballWebPagesConfig)return void console.error("❌ API configuration not available");const e=await fetch("https://football-web-pages1.p.rapidapi.com/fixtures-results.json?comp=5",{method:"GET",headers:{"X-RapidAPI-Key":this.apiManager.footballWebPagesConfig.RAPIDAPI_KEY,"X-RapidAPI-Host":this.apiManager.footballWebPagesConfig.RAPIDAPI_HOST}});if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const t=await e.json();return console.log("🧪 API Response Structure:",t),t["fixtures-results"]&&t["fixtures-results"].matches&&(console.log("🧪 Found matches:",t["fixtures-results"].matches.length),t["fixtures-results"].matches.length>0&&console.log("🧪 First match:",t["fixtures-results"].matches[0])),t}catch(e){console.error("❌ Error testing API:",e)}}cleanup(){}}const a=class{constructor(e,t=1,i="1",a=null){this.db=e,this.currentActiveEdition=t,this.currentActiveGameweek=i,this.apiManager=a,this.scoresManagementInitialized=!1,this.liveScoring=new n(e,t),this.statisticsEngine=new o(e,t,i),this.historyManager=new s(e,t,a)}initializeScoresManagement(){this.scoresManagementInitialized?console.log("Scores management already initialized, skipping..."):document.querySelector("#score-gameweek-select")||document.querySelector("#scores-container")?(console.log("Initializing scores management..."),this.scoresManagementInitialized=!0,this.setupEventListeners(),this.initializeScoresDisplay()):console.log("Scores management elements not found on this page, skipping...")}setupEventListeners(){const e=document.querySelector("#save-scores-btn");e&&e.addEventListener("click",()=>this.historyManager.saveScores());const t=document.querySelector("#score-gameweek-select");t&&t.addEventListener("change",()=>this.liveScoring.loadScoresForGameweek());const i=document.querySelector("#import-football-webpages-scores-btn");i&&i.addEventListener("click",()=>{const e=t.value;this.historyManager.importScoresFromFootballWebPages(e)});const n=document.querySelector("#scores-file-input");n&&n.addEventListener("change",e=>{const i=e.target.files[0],n=t.value;this.historyManager.importScoresFromFile(i,n)}),this.liveScoring.initializeLiveScoring()}initializeScoresDisplay(){document.querySelector("#score-gameweek-select")&&document.querySelector("#scores-container")&&"function"==typeof this.liveScoring.loadScoresForGameweek&&this.liveScoring.loadScoresForGameweek()}loadScoresForGameweek(){return this.liveScoring.loadScoresForGameweek()}addScoreRow(e,t){return this.liveScoring.addScoreRow(e,t)}startAutoScoreUpdates(e){return this.liveScoring.startAutoScoreUpdates(e)}stopAutoScoreUpdates(){return this.liveScoring.stopAutoScoreUpdates()}startRealTimeScoreUpdates(e){return this.liveScoring.startRealTimeScoreUpdates(e)}stopRealTimeScoreUpdates(){return this.liveScoring.stopRealTimeScoreUpdates()}processResults(e,t){return this.statisticsEngine.processResults(e,t)}getUserEdition(e){return this.statisticsEngine.getUserEdition(e)}checkPickStillValid(e,t){return this.statisticsEngine.checkPickStillValid(e,t)}calculatePickResult(e,t){return this.statisticsEngine.calculatePickResult(e,t)}loadPlayerScores(){return this.statisticsEngine.loadPlayerScores()}renderPlayerScores(e,t){return this.statisticsEngine.renderPlayerScores(e,t)}renderDesktopPlayerScores(e,t){return this.statisticsEngine.renderDesktopPlayerScores(e,t)}renderMobilePlayerScores(e,t){return this.statisticsEngine.renderMobilePlayerScores(e,t)}showNoScoresMessage(e=null){return this.statisticsEngine.showNoScoresMessage(e)}saveScores(){this.historyManager.saveScores((e,t)=>{this.statisticsEngine.processResults(e,t)})}importScoresFromFile(e,t){return this.historyManager.importScoresFromFile(e,t)}importScoresFromFootballWebPages(e){return this.historyManager.importScoresFromFootballWebPages(e)}testFootballWebPagesAPI(){return this.historyManager.testFootballWebPagesAPI()}getStatusDisplay(e){return this.liveScoring.getStatusDisplay(e)}getTeamBadge(e){return this.statisticsEngine.getTeamBadge(e)}cleanup(){this.liveScoring.cleanup(),this.statisticsEngine.cleanup(),this.historyManager.cleanup(),this.scoresManagementInitialized=!1}},r=class{constructor(e){this.db=e,this.uiManagementInitialized=!1,this.vidiprinterInterval=null,this.vidiprinterData=[],this.isVidiprinterRunning=!1,this.autoScrollEnabled=!0,this.processedEvents=new Set}initializeUIManagement(){this.uiManagementInitialized?console.log("UI management already initialized, skipping..."):(console.log("Initializing UI management..."),this.uiManagementInitialized=!0,this.setupEventListeners(),this.initializeTestimonialModal(),this.initializeVidiprinter(),this.initializeMobileTabs(),this.initializeDesktopTabs())}setupEventListeners(){const e=document.querySelector(".testimonial-toggle");e&&e.addEventListener("click",()=>this.toggleTestimonials())}showModal(e){const t=document.querySelector(".modal-overlay");t&&t.remove();const i=document.createElement("div");i.className="modal-overlay",i.innerHTML=e,document.body.appendChild(i),i.addEventListener("click",e=>{e.target===i&&this.closeUserDetailsModal()})}closeUserDetailsModal(){const e=document.querySelector(".modal-overlay");e&&e.remove()}initializeMobileTabs(){console.log("Initializing mobile tabs...");const e=document.querySelectorAll(".mobile-tabs .tab-btn"),t=document.querySelectorAll(".mobile-tab-content .tab-pane");console.log(`Found ${e.length} mobile tab buttons and ${t.length} mobile tab panes`),e.forEach(i=>{i.addEventListener("click",()=>{const n=i.getAttribute("data-tab");console.log(`Mobile tab clicked: ${n}`),e.forEach(e=>e.classList.remove("active")),t.forEach(e=>e.classList.remove("active")),i.classList.add("active");const o=document.getElementById(`${n}-tab`);o&&o.classList.add("active"),this.handleTabContentLoad(n)})})}initializeDesktopTabs(){console.log("Initializing desktop tabs...");const e=document.querySelectorAll(".desktop-tabs .desktop-tab-btn"),t=document.querySelectorAll(".desktop-tab-content .desktop-tab-pane");console.log(`Found ${e.length} desktop tab buttons and ${t.length} desktop tab panes`),e.forEach(i=>{i.addEventListener("click",()=>{const n=i.getAttribute("data-tab");console.log(`Desktop tab clicked: ${n}`),e.forEach(e=>e.classList.remove("active")),t.forEach(e=>e.classList.remove("active")),i.classList.add("active");const o=document.getElementById(`desktop-${n}-tab`);o&&o.classList.add("active"),this.handleTabContentLoad(n)})})}handleTabContentLoad(e){if("as-it-stands"===e)console.log("As It Stands tab clicked"),window.app&&window.app.utilitiesManager&&window.app.utilitiesManager.diagnoseAsItStandsElements(),window.asItStandsInitialized_desktop||window.asItStandsInitialized_mobile||(window.app&&window.app.adminManagementManager&&window.app.adminManagementManager.teamOperations?window.app.adminManagementManager.teamOperations.initializeAsItStandsTab("desktop"):window.app&&window.app.teamOperations&&window.app.teamOperations.initializeAsItStandsTab("desktop"));else if("scores"===e){if(window.app&&window.app.scoresManager)try{window.app.scoresManager.loadScoresForGameweek.bind(window.app.scoresManager)().then(async e=>{console.log("loadScoresForGameweek returned:",e);const t=window.app.currentActiveGameweek;window.app&&window.app.scoresManager&&await window.app.scoresManager.renderPlayerScores(e,t),window.app&&window.app.scoresManager&&window.app.scoresManager.renderMobilePlayerScores(e,t)}).catch(e=>{console.error("Error loading player scores:",e),window.app&&window.app.scoresManager&&window.app.scoresManager.showNoScoresMessage()})}catch(e){console.error("Error calling loadScoresForGameweek:",e)}}else"vidiprinter"===e&&window.app&&window.app.apiManager&&window.app.apiManager.initializePlayerVidiprinter()}async renderDashboard(e){console.log("Starting tab initialization..."),this.initializeMobileTabs(),console.log("Mobile tabs initialized"),this.initializeDesktopTabs(),console.log("Desktop tabs initialized"),console.log("Dashboard rendered, running As It Stands diagnostics..."),setTimeout(()=>{console.log("Running delayed diagnostics..."),window.app&&window.app.utilitiesManager&&window.app.utilitiesManager.diagnoseAsItStandsElements()},1e3);const t=await this.db.collection("users").doc(e.uid).get();if(t.exists){const e=t.data(),i=this.getUserEdition(e),n=["1","2","3","4","5","6","7","8","9","10","tiebreak"];window.app&&window.app.gameLogicManager&&await window.app.gameLogicManager.batchCheckDeadlines(n,i)}const i=document.querySelector("#welcome-message"),n=document.querySelector("#mobile-welcome-message"),o=document.querySelector("#lives-remaining"),s=document.querySelector("#mobile-lives-remaining"),a=document.querySelector("#desktop-lives-remaining"),r=document.querySelector("#picks-history"),l=document.querySelector("#mobile-picks-history"),c=document.querySelector("#desktop-picks-history"),d=document.querySelector("#user-logged-in-view"),u=(document.querySelector("#fixtures-display-container"),document.querySelector("#mobile-fixtures-display-container"),document.querySelector("#gameweek-navigation")),g=document.querySelector("#mobile-gameweek-navigation");d&&(d.style.display="block"),u&&(u.style.display="block"),g&&(g.style.display="block");try{const t=await this.db.collection("settings").doc("currentCompetition").get();if(!t.exists)return void console.error("CRITICAL: Settings document not found!");const d=t.data().active_gameweek,u=await this.db.collection("users").doc(e.uid).get();if(u.exists){const t=u.data(),g=this.getUserEdition(t),m=this.getUserRegisteredEditions(t);this.setupEditionSelection(t,g,m,e.uid),this.updateEditionDisplays(g),i&&(i.textContent=`Welcome, ${t.displayName}!`),n&&(n.textContent=`Welcome, ${t.displayName}!`),this.updateLivesDisplay(t,o,s,a),window.app&&window.app.gameLogicManager&&(r&&await window.app.gameLogicManager.renderPickHistory(t.picks||{},r,e.uid,t),l&&await window.app.gameLogicManager.renderPickHistory(t.picks||{},l,e.uid,t),c&&await window.app.gameLogicManager.renderPickHistory(t.picks||{},c,e.uid,t)),window.app&&window.app.gameLogicManager&&window.app.gameLogicManager.initializeGameweekNavigation(d,t,e.uid),window.app&&window.app.gameLogicManager&&window.app.gameLogicManager.initializeMobileGameweekNavigation(d,t,e.uid),"function"==typeof checkAndAssignAutoPicks&&checkAndAssignAutoPicks(t,d,e.uid),"function"==typeof loadFixturesForDeadline&&loadFixturesForDeadline(d,t,e.uid),"function"==typeof loadMobileFixturesForDeadline&&loadMobileFixturesForDeadline(d,t,e.uid),"function"==typeof loadPlayerScores&&loadPlayerScores(),"function"==typeof startDeadlineChecker&&startDeadlineChecker()}else console.warn("User document not found for:",e.uid)}catch(e){console.error("Error rendering dashboard:",e)}}setupEditionSelection(e,t,i,n){if(i.length>1){const e=document.getElementById("edition-selection-container"),o=document.getElementById("mobile-edition-selection-container"),s=document.getElementById("dashboard-edition-selector"),a=document.getElementById("mobile-dashboard-edition-selector");if(e&&o){e.style.display="block",o.style.display="block",s&&a&&(s.innerHTML="",a.innerHTML="",i.forEach(e=>{const i="test"===e?"Test Weeks":`Edition ${e}`,n=e,o=document.createElement("option");o.value=n,o.textContent=i,e===t&&(o.selected=!0),s.appendChild(o);const r=document.createElement("option");r.value=n,r.textContent=i,e===t&&(r.selected=!0),a.appendChild(r)}));const r=document.getElementById("save-edition-preference"),l=document.getElementById("mobile-save-edition-preference");r&&(r.onclick=()=>{"function"==typeof saveEditionPreference&&saveEditionPreference(s.value,n)}),l&&(l.onclick=()=>{"function"==typeof saveEditionPreference&&saveEditionPreference(a.value,n)})}}}updateEditionDisplays(e){document.querySelectorAll("#current-edition-display, #submit-edition-display, #re-submit-edition-display, #sidebar-edition-display").forEach(t=>{t&&(t.textContent="test"===e?"Test Weeks":`Edition ${e}`)})}updateLivesDisplay(e,t,i,n){let o="";2===e.lives?o='<p style="text-align: center; margin-top: 10px; color: #28a745; font-weight: bold;">All is well, you haven\'t got a card yet</p>':1===e.lives?o='<img src="images/Yellow Card.png" alt="Yellow Card" style="width: 240px; height: 240px; display: block; margin: 0 auto; margin-top: 10px;">':0===e.lives&&(o='<img src="images/redcard.png" alt="Red Card" style="width: 240px; height: 240px; display: block; margin: 0 auto; margin-top: 10px;">'),t&&(t.innerHTML=o),i&&(i.innerHTML=o),n&&(n.innerHTML=o)}getUserEdition(e){return e.defaultEdition?e.defaultEdition:e.registeredEditions&&e.registeredEditions.length>0?e.registeredEditions[0]:1}getUserRegisteredEditions(e){return e.registeredEditions&&Array.isArray(e.registeredEditions)?e.registeredEditions:[]}initializeTestimonialModal(){let e=document.getElementById("imageModal"),t=document.getElementById("modalImage"),i=document.querySelector(".modal-close");e||(e=document.createElement("div"),e.id="imageModal",e.className="modal",e.style.cssText="display: none; position: fixed !important; z-index: 999999 !important; left: 0 !important; top: 0 !important; width: 100vw !important; height: 100vh !important; background-color: rgba(0, 0, 0, 0.8) !important; backdrop-filter: blur(5px) !important;",i=document.createElement("span"),i.className="modal-close",i.innerHTML="&times;",i.style.cssText="position: absolute !important; top: -50px !important; right: 0 !important; color: white !important; font-size: 40px !important; font-weight: bold !important; cursor: pointer !important; background: none !important; border: none !important; padding: 0 !important; line-height: 1 !important; z-index: 1000000 !important;",t=document.createElement("img"),t.className="modal-content",t.id="modalImage",t.style.cssText="position: absolute !important; top: 50% !important; left: 50% !important; transform: translate(-50%, -50%) !important; max-width: 90% !important; max-height: 90% !important; border-radius: 12px !important; box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4) !important; z-index: 1000001 !important;",e.appendChild(i),e.appendChild(t),document.body.appendChild(e)),document.querySelectorAll(".testimonial-image").forEach(i=>{i.addEventListener("click",function(){e.style.display="block",t.src=this.src,t.alt=this.alt})}),i&&i.addEventListener("click",function(){e.style.display="none"}),e.addEventListener("click",function(t){t.target===e&&(e.style.display="none")}),document.addEventListener("keydown",function(t){"Escape"===t.key&&"block"===e.style.display&&(e.style.display="none")})}toggleTestimonials(){const e=document.getElementById("mobile-testimonials"),t=document.querySelector(".toggle-icon"),i=document.querySelector(".toggle-text");e&&t&&i&&("block"===e.style.display?(e.style.display="none",t.textContent="▼",i.textContent="What Our Players Say..."):(e.style.display="block",t.textContent="▲",i.textContent="Hide Testimonials"))}async initializeRegistrationWindowDisplay(){this.registrationUpdateTimer&&clearInterval(this.registrationUpdateTimer),await this.updateRegistrationWindowDisplay(),this.registrationUpdateTimer=setInterval(()=>this.updateRegistrationWindowDisplay(),3e5)}async updateRegistrationWindowDisplay(){if(this.isUpdatingRegistrationWindow)console.log("Registration window update already in progress, skipping...");else{this.isUpdatingRegistrationWindow=!0;try{if(!this.db)return console.warn("Database not available yet, showing default registration window"),this.showDefaultRegistrationWindow(),void(this.isUpdatingRegistrationWindow=!1);if(!window.registrationManager)return console.warn("Registration manager not available yet, showing default registration window"),this.showDefaultRegistrationWindow(),void(this.isUpdatingRegistrationWindow=!1);console.log("✅ Registration manager is now available, proceeding with update...");const e=await this.db.collection("settings").doc(`registration_edition_${window.currentActiveEdition||1}`).get();if(!e.exists)return console.log("No registration settings found, showing default registration window"),void this.showDefaultRegistrationWindow();const t=e.data(),i=new Date;if("function"==typeof window.registrationManager.checkRegistrationWindow)if(await window.registrationManager.checkRegistrationWindow()){const e=t.endDate?new Date(t.endDate.toDate()):null;e?this.showRegistrationCountdown(e):this.showDefaultRegistrationWindow(),this.showRegisterButton(!0)}else{const e=t.nextStartDate?new Date(t.nextStartDate.toDate()):null;e&&e>i?this.showNextRegistrationCountdown(e):this.showDefaultRegistrationWindow(),this.showRegisterButton(!1)}else console.warn("Registration manager checkRegistrationWindow function not available"),this.showDefaultRegistrationWindow(),this.showRegisterButton(!1)}catch(e){console.error("Error updating registration window display:",e),this.showDefaultRegistrationWindow(),this.showRegisterButton(!1)}finally{this.isUpdatingRegistrationWindow=!1}}}showDefaultRegistrationWindow(){const e=document.querySelector("#registration-countdown"),t=document.querySelector("#next-registration-countdown");if(e&&t){e.style.display="block",t.style.display="none";const i=document.querySelector("#countdown-timer");i&&(i.textContent="Registration Open"),this.showRegisterButton(!0)}}cleanupRegistrationTimers(){this.registrationUpdateTimer&&(clearInterval(this.registrationUpdateTimer),this.registrationUpdateTimer=null),this.countdownTimer&&(clearInterval(this.countdownTimer),this.countdownTimer=null)}showRegistrationCountdown(e){const t=document.querySelector("#registration-countdown"),i=document.querySelector("#next-registration-countdown"),n=document.querySelector("#countdown-timer");if(t&&n){t.style.display="block",i&&(i.style.display="none");const o=()=>{const t=new Date,i=e-t;if(i<=0)return this.hideRegistrationCountdowns(),void this.showRegisterButton(!1);const o=Math.floor(i/864e5),s=Math.floor(i%864e5/36e5),a=Math.floor(i%36e5/6e4);let r="";o>0&&(r+=`${o}d `),(s>0||o>0)&&(r+=`${s}h `),(a>0||s>0||o>0)&&(r+=`${a}m `),r+=`${Math.floor(i%6e4/1e3)}s`,n.textContent=r};o(),this.countdownTimer&&clearInterval(this.countdownTimer),this.countdownTimer=setInterval(o,1e3)}}showNextRegistrationCountdown(e){const t=document.querySelector("#registration-countdown"),i=document.querySelector("#next-registration-countdown"),n=document.querySelector("#next-countdown-timer");if(i&&n){i.style.display="block",t&&(t.style.display="none");const o=()=>{const t=new Date,i=e-t;if(i<=0)return this.hideRegistrationCountdowns(),void setTimeout(()=>this.updateRegistrationWindowDisplay(),1e3);const o=Math.floor(i/864e5),s=Math.floor(i%864e5/36e5),a=Math.floor(i%36e5/6e4);let r="";o>0&&(r+=`${o}d `),(s>0||o>0)&&(r+=`${s}h `),(a>0||s>0||o>0)&&(r+=`${a}m `),r+=`${Math.floor(i%6e4/1e3)}s`,n.textContent=r};o(),this.countdownTimer&&clearInterval(this.countdownTimer),this.countdownTimer=setInterval(o,1e3)}}hideRegistrationCountdowns(){const e=document.querySelector("#registration-countdown"),t=document.querySelector("#next-registration-countdown");e&&(e.style.display="none"),t&&(t.style.display="none")}showRegisterButton(e){const t=document.querySelector("#register-now-button");t&&(t.style.display=e?"inline-block":"none")}initializeVidiprinter(){console.log("Initializing Vidiprinter...");const e=document.querySelector("#start-vidiprinter-btn"),t=document.querySelector("#stop-vidiprinter-btn"),i=document.querySelector("#clear-vidiprinter-btn"),n=document.querySelector("#auto-scroll-toggle"),o=document.querySelector("#vidiprinter-comp"),s=document.querySelector("#vidiprinter-refresh-rate");console.log("Vidiprinter elements found:",{startBtn:!!e,stopBtn:!!t,clearBtn:!!i,autoScrollBtn:!!n,compSelect:!!o,refreshRateSelect:!!s}),e&&e.addEventListener("click",()=>this.startVidiprinter()),t&&t.addEventListener("click",()=>this.stopVidiprinter()),i&&i.addEventListener("click",()=>this.clearVidiprinterFeed()),n&&n.addEventListener("click",()=>this.toggleAutoScroll()),o&&o.addEventListener("change",()=>{this.isVidiprinterRunning&&(this.stopVidiprinter(),setTimeout(()=>this.startVidiprinter(),100))}),s&&s.addEventListener("change",()=>{this.isVidiprinterRunning&&(this.stopVidiprinter(),setTimeout(()=>this.startVidiprinter(),100))});const a=document.querySelector("#test-vidiprinter-btn");a&&a.addEventListener("click",()=>this.testVidiprinterConnection()),console.log("📺 Vidiprinter initialization complete"),console.log("📺 System ready check:",this.isVidiprinterReady()),this.addVidiprinterEntry("Vidiprinter system initialized and ready","status"),this.showVidiprinterStatus(),setTimeout(()=>{this.isVidiprinterReady()&&!this.isVidiprinterRunning&&(console.log("📺 Auto-starting vidiprinter..."),this.startVidiprinter())},1e3)}async testVidiprinterConnection(){if(console.log("📺 Testing vidiprinter connection..."),this.isVidiprinterReady())try{this.addVidiprinterEntry("Testing connection...","status");const e=await window.fetchVidiprinterData();console.log("📺 Test connection result:",e),e&&Array.isArray(e)&&e.length>0?this.addVidiprinterEntry(`Connection successful! Found ${e.length} events`,"status"):this.addVidiprinterEntry("Connection successful but no events found","status")}catch(e){console.error("📺 Test connection failed:",e),this.addVidiprinterEntry(`Test failed: ${e.message}`,"error")}else this.addVidiprinterEntry("System not ready for testing","error")}async manualVidiprinterUpdate(){if(console.log("📺 Manual vidiprinter update requested..."),this.isVidiprinterRunning)try{await this.performVidiprinterUpdate(),this.addVidiprinterEntry("Manual update completed","status")}catch(e){console.error("📺 Manual update failed:",e),this.addVidiprinterEntry(`Manual update failed: ${e.message}`,"error")}else this.addVidiprinterEntry("Vidiprinter not running. Please start it first.","status")}async startVidiprinter(){if(this.isVidiprinterRunning)return void console.log("📺 Vidiprinter is already running");if(!this.isVidiprinterReady())return console.error("📺 Vidiprinter system not ready"),void this.addVidiprinterEntry("Cannot start vidiprinter - system not ready. Please refresh the page.","error");console.log("📺 Starting vidiprinter..."),this.isVidiprinterRunning=!0;const e=document.querySelector("#start-vidiprinter-btn"),t=document.querySelector("#stop-vidiprinter-btn");e&&(e.disabled=!0),t&&(t.disabled=!1),this.processedEvents.clear(),this.clearVidiprinterFeed(),this.vidiprinterInterval=setInterval(async()=>{try{await this.performVidiprinterUpdate()}catch(e){console.error("Error during vidiprinter update:",e)}},3e4),this.addVidiprinterEntry("Vidiprinter system started successfully","status"),await this.performVidiprinterUpdate()}stopVidiprinter(){if(!this.isVidiprinterRunning)return void console.log("Vidiprinter is not running");console.log("Stopping vidiprinter..."),this.isVidiprinterRunning=!1,this.vidiprinterInterval&&(clearInterval(this.vidiprinterInterval),this.vidiprinterInterval=null);const e=document.querySelector("#start-vidiprinter-btn"),t=document.querySelector("#stop-vidiprinter-btn");e&&(e.disabled=!1),t&&(t.disabled=!0),this.addVidiprinterEntry("Vidiprinter system stopped","status")}async performVidiprinterUpdate(){try{if("function"==typeof window.isApiSuspended&&await window.isApiSuspended())return console.log("📺 API calls are suspended, skipping vidiprinter update"),void this.addVidiprinterEntry("API calls are currently suspended. Manual updates only.","status");if("function"==typeof window.fetchVidiprinterData){console.log("📺 Performing vidiprinter update...");const e=await window.fetchVidiprinterData();console.log("📺 Received vidiprinter data:",e),e&&Array.isArray(e)?this.processVidiprinterData(e):(console.warn("📺 Invalid vidiprinter data received:",e),this.addVidiprinterEntry("Vidiprinter update failed. Please check the console for details.","error"))}else console.warn("📺 fetchVidiprinterData function not available globally"),this.addVidiprinterEntry("Vidiprinter system not properly initialized. Please refresh the page.","error")}catch(e){console.error("❌ Error performing vidiprinter update:",e),this.addVidiprinterEntry(`Vidiprinter error: ${e.message}`,"error")}}processVidiprinterData(e){if(!Array.isArray(e))return void console.warn("Invalid vidiprinter data received:",e);if(console.log(`📺 Processing ${e.length} vidiprinter events`),0===e.length)return void this.addVidiprinterEntry("No live matches currently available. The vidiprinter will update when matches are in progress.","status");let t=0;e.forEach(e=>{if(e&&e.text){if("Attendance"===e.type)return;const i=this.createEventId(e);this.processedEvents.has(i)||(this.processedEvents.add(i),this.addVidiprinterEntry(e.text,e.type||"status",e),t++)}}),t>0&&console.log(`📺 Added ${t} new events to vidiprinter`)}createEventId(e){return`${e["date/time"]||""}|${e.text||""}|${e.type||""}`}addVidiprinterEntry(e,t="status",i=null){let n=document.querySelector("#enhanced-vidiprinter-feed");if(n||(n=document.querySelector("#vidiprinter-feed")),!n)return void console.warn("Vidiprinter feed element not found - neither #enhanced-vidiprinter-feed nor #vidiprinter-feed");const o=document.createElement("div");let s;if(i&&i["date/time"]){const e=i["date/time"],t=e.split(" ");if(2===t.length){const i=t[0],n=t[1],o=i.split("-");s=3===o.length?`${o[2]}-${o[1]}-${o[0]} ${n}`:e}else s=e}else{const e=new Date;s=`${String(e.getDate()).padStart(2,"0")}-${String(e.getMonth()+1).padStart(2,"0")}-${e.getFullYear()} ${e.toLocaleTimeString("en-GB",{timeZone:"Europe/London",hour:"2-digit",minute:"2-digit",second:"2-digit"})}`}let a=`vidiprinter-entry ${t}`,r="";"goal"===t||"Goals"===t?(a+=" goal",r="⚽",t="GOAL"):"card"===t||"Cards"===t?(a+=" card",r="🟨"):"substitution"===t||"Substitutions"===t?(a+=" substitution",r="🔄"):"match"===t||"Matches"===t?(a+=" match",r="🏟️"):"kick-off"===t||"Kick-off"===t?(a+=" kickoff",r="📢",t="Kick-off"):"half-time"===t||"Half-time"===t?(a+=" halftime",r="⏸️",t="HT"):"full-time"===t||"Full-time"===t?(a+=" fulltime",r="🏁",t="FT"):"Correction"===t?(a+=" correction",r="🔧",t="Error"):"error"===t?(a+=" error",r="❌"):"status"===t&&(a+=" status",r="ℹ️");const l="enhanced-vidiprinter-feed"===n.id;for(o.className=l?`enhanced-vidiprinter-entry ${t}`:`vidiprinter-entry ${t}`,o.innerHTML=`\n            <span class="timestamp">${s}</span>\n            <span class="emoji">${r}</span>\n            <span class="type">${t}</span>\n            <span class="text">${e}</span>\n        `,n.appendChild(o),this.autoScrollEnabled&&(n.scrollTop=n.scrollHeight);n.children.length>100;)n.removeChild(n.firstChild);o.style.opacity="0",o.style.transform="translateY(-10px)",o.style.transition="all 0.3s ease-in-out",setTimeout(()=>{o.style.opacity="1",o.style.transform="translateY(0)"},10)}clearVidiprinterFeed(){const e=document.querySelector("#vidiprinter-feed"),t=document.querySelector("#enhanced-vidiprinter-feed");e&&(e.innerHTML=""),t&&(t.innerHTML=""),this.processedEvents.clear(),console.log("📺 Vidiprinter feeds cleared and processed events reset")}toggleAutoScroll(){this.autoScrollEnabled=!this.autoScrollEnabled;const e=document.querySelector("#auto-scroll-toggle");if(e&&(e.textContent=this.autoScrollEnabled?"Disable Auto-scroll":"Enable Auto-scroll"),this.autoScrollEnabled){const e=document.querySelector("#vidiprinter-feed");e&&(e.scrollTop=e.scrollHeight)}}showVidiprinterStatus(){const e=this.isVidiprinterRunning?"Running":"Stopped",t=this.lastUpdateTime?new Date(this.lastUpdateTime).toLocaleTimeString():"Never",i="function"==typeof window.fetchVidiprinterData;this.addVidiprinterEntry(`System Status: ${e} | Last Update: ${t} | API: ${i?"Available":"Not Available"}`,"status")}isVidiprinterReady(){const e="function"==typeof window.fetchVidiprinterData,t=document.querySelector("#enhanced-vidiprinter-feed")||document.querySelector("#vidiprinter-feed");return console.log("📺 Vidiprinter system check:",{globalFunction:e,feedElement:t,isRunning:this.isVidiprinterRunning}),e&&t}cleanup(){this.stopVidiprinter(),this.vidiprinterInterval&&(clearInterval(this.vidiprinterInterval),this.vidiprinterInterval=null)}},l=class{constructor(e){this.db=e,this.gameLogicInitialized=!1,this.deadlineCheckerInterval=null,this.currentActiveEdition=1,this.currentActiveGameweek="1"}initializeGameLogicManagement(){this.gameLogicInitialized?console.log("Game logic management already initialized, skipping..."):(console.log("Initializing game logic management..."),this.gameLogicInitialized=!0,this.setupEventListeners(),this.startDeadlineChecker())}setupEventListeners(){console.log("Setting up game logic event listeners...")}generatePickHistory(e){if(0===Object.keys(e).length)return"<p>No picks made yet</p>";let t='<div class="pick-list">';return[{key:"gw1",label:"Game Week 1"},{key:"gw2",label:"Game Week 2"},{key:"gw3",label:"Game Week 3"},{key:"gw4",label:"Game Week 4"},{key:"gw5",label:"Game Week 5"},{key:"gw6",label:"Game Week 6"},{key:"gw7",label:"Game Week 7"},{key:"gw8",label:"Game Week 8"},{key:"gw9",label:"Game Week 9"},{key:"gw10",label:"Game Week 10"},{key:"gwtiebreak",label:"Tiebreak Round"}].forEach(i=>{const n=e[i.key],o=n?this.getTeamBadge(n):null,s=o?`<img src="${o}" alt="${n}" style="width: 14px; height: 14px; margin-right: 4px; vertical-align: middle;">`:"";t+=`\n                <div class="pick-item">\n                    <strong>${i.label}:</strong> ${n?s+n:"No pick made"}\n                </div>\n            `}),t+="</div>",t}async renderPickHistory(e,t,i,n=null){if(t)try{const i=this.generatePickHistory(e);t.innerHTML=i}catch(e){console.error("Error rendering pick history:",e),t.innerHTML="<p>Error loading pick history</p>"}else console.error("Pick history container not found")}initializeGameweekNavigation(e,t,i){const n=document.querySelector("#current-gameweek-display"),o=document.querySelector("#prev-gameweek"),s=document.querySelector("#next-gameweek"),a=document.querySelectorAll(".gameweek-tab"),r=document.querySelector(".tiebreak-tab");this.db.collection("settings").doc("currentCompetition").get().then(n=>{if(n.exists){const o=n.data().tiebreak_enabled||!1;if(r)if(o)r.style.display="inline-block";else if(r.style.display="none","tiebreak"===e)return void this.navigateToGameweek("10",t,i)}});const l="tiebreak"===e?"Tiebreak Round":`Game Week ${e}`;n&&(n.textContent=l),this.updateNavigationButtons(e,o,s),this.updateActiveTab(e,a),o&&o.addEventListener("click",()=>this.navigateGameweek(e,-1,t,i)),s&&s.addEventListener("click",()=>this.navigateGameweek(e,1,t,i)),a.forEach(e=>{e.addEventListener("click",()=>{const n=e.dataset.gameweek;this.navigateToGameweek(n,t,i)})}),this.updateTabStates(a)}updateNavigationButtons(e,t,i){if(!t||!i)return;const n="tiebreak"===e?11:parseInt(e);t.disabled=n<=1,i.disabled=n>=11}updateActiveTab(e,t){t.forEach(t=>{t.classList.remove("active"),t.dataset.gameweek===e&&t.classList.add("active")})}updateTabStates(e){e.forEach(e=>{const t=e.dataset.gameweek;this.checkDeadlineForGameweek(t).then(t=>{t?e.classList.add("locked"):e.classList.remove("locked")})})}navigateGameweek(e,t,i,n){const o=("tiebreak"===e?11:parseInt(e))+t;if(o<1||o>11)return;const s=11===o?"tiebreak":o.toString();this.navigateToGameweek(s,i,n)}async navigateToGameweek(e,t,i){try{const n=await this.db.collection("users").doc(i).get(),o=n.exists?n.data():t,s=document.querySelector("#current-gameweek-display"),a="tiebreak"===e?"Tiebreak Round":`Game Week ${e}`;s&&(s.textContent=a);const r=document.querySelector("#prev-gameweek"),l=document.querySelector("#next-gameweek");this.updateNavigationButtons(e,r,l),r&&(r.replaceWith(r.cloneNode(!0)),document.querySelector("#prev-gameweek").addEventListener("click",()=>this.navigateGameweek(e,-1,o,i))),l&&(l.replaceWith(l.cloneNode(!0)),document.querySelector("#next-gameweek").addEventListener("click",()=>this.navigateGameweek(e,1,o,i)));const c=document.querySelectorAll(".gameweek-tab");this.updateActiveTab(e,c),window.loadFixturesForDeadline&&window.loadFixturesForDeadline(e,o,i),console.log(`Navigated to gameweek ${e} with fresh user data`)}catch(n){console.error("Error navigating to gameweek:",n),window.loadFixturesForDeadline&&window.loadFixturesForDeadline(e,t,i)}}initializeMobileGameweekNavigation(e,t,i){console.log("Initializing mobile gameweek navigation for gameweek:",e);const n=document.querySelectorAll("#mobile-gameweek-navigation .gameweek-tab");if(0===n.length)return void console.log("No mobile gameweek buttons found");this.setActiveGameweek(e),n.forEach(e=>{e.addEventListener("click",()=>{const n=e.getAttribute("data-gameweek");console.log("Navigating to mobile gameweek:",n),this.navigateToGameweek(n,t,i)})});const o=document.querySelector("#mobile-prev-gameweek"),s=document.querySelector("#mobile-next-gameweek"),a=document.querySelector("#mobile-current-gameweek-display");if(a){const t="tiebreak"===e?"Tiebreak Round":`Game Week ${e}`;a.textContent=t}o&&o.addEventListener("click",()=>this.navigateGameweek(e,-1,t,i)),s&&s.addEventListener("click",()=>this.navigateGameweek(e,1,t,i)),console.log("Mobile gameweek navigation initialized")}removePick(e,t){if(confirm("Are you sure you want to remove this pick?")){const i=t.replace("gw","");this.checkDeadlineForGameweek(i).then(i=>{if(i)return void alert("Cannot remove pick - deadline has passed for this gameweek.");const n={};n[`picks.${t}`]=this.db.FieldValue.delete(),this.db.collection("users").doc(e).update(n).then(()=>{firebase.auth().onAuthStateChanged(e=>{e&&window.renderDashboard&&window.renderDashboard(e).catch(console.error)})}).catch(e=>{console.error("Error removing pick:",e),alert("Error removing pick. Please try again.")})})}}makePick(e,t){this.db.collection("users").doc(e).get().then(i=>{if(i.exists){const n=i.data();this.navigateToGameweek(t,n,e),window.switchToFixturesTab&&window.switchToFixturesTab()}}).catch(e=>{console.error("Error making pick:",e),alert("Error loading user data. Please try again.")})}async selectTeamAsTempPick(e,t,i){const n="tiebreak"===t?"gwtiebreak":`gw${t}`;try{const o=await this.db.collection("users").doc(i).get();if(!o.exists)return void alert("User not found.");const s=o.data();if(Object.values(s.picks||{}).includes(e)){let o=null;for(const[t,i]of Object.entries(s.picks||{}))if(i===e){o=t;break}if(o){const s="gwtiebreak"===o?"tiebreak":o.replace("gw","");if(confirm(`You have picked ${e} for Game Week ${s}. Would you like to release this pick and select ${e} for Game Week ${t}?`)){const s=o;await this.db.collection("users").doc(i).update({[`picks.${s}`]:this.db.FieldValue.delete(),[`picks.${n}`]:e}),console.log(`Pick released and new pick saved: ${e} for Game Week ${t}`),await this.refreshDisplayAfterPickUpdate(t,i)}return}}confirm(`Would you like to pick ${e} for Game Week ${t}?`)&&(await this.db.collection("users").doc(i).update({[`picks.${n}`]:e}),console.log(`Pick saved: ${e} for Game Week ${t}`),await this.refreshDisplayAfterPickUpdate(t,i))}catch(e){console.error("Error in selectTeamAsTempPick:",e),alert("Error processing pick. Please try again.")}}async refreshDisplayAfterPickUpdate(e,t){try{const i=await this.db.collection("users").doc(t).get();if(i.exists){const n=i.data(),o=document.querySelector(".gameweek-tab.active"),s=o?o.getAttribute("data-gameweek"):e;window.loadFixturesForDeadline&&window.loadFixturesForDeadline(s,n,t),window.loadMobileFixturesForDeadline&&window.loadMobileFixturesForDeadline(s,n,t),window.updatePickStatusHeader&&window.updatePickStatusHeader(s,n,t).catch(e=>{console.error("Error updating pick status header:",e)}),window.updateMobilePickStatusHeader&&window.updateMobilePickStatusHeader(s,n,t).catch(e=>{console.error("Error updating mobile pick status header:",e)});const a=document.querySelector("#picks-history"),r=document.querySelector("#mobile-picks-history"),l=document.querySelector("#desktop-picks-history");a&&this.renderPickHistory(n.picks||{},a,t,n),r&&this.renderPickHistory(n.picks||{},r,t,n),l&&this.renderPickHistory(n.picks||{},l,t,n),console.log(`Display refreshed for gameweek ${s} with updated user data`)}}catch(e){console.error("Error refreshing display:",e)}}saveTempPick(e,t){const i="tiebreak"===e?"gwtiebreak":`gw${e}`,n=`tempPick_${t}_${e}`,o=sessionStorage.getItem(n);o?this.checkDeadlineForGameweek(e).then(s=>{s?alert("Deadline has passed for this gameweek. Picks are locked."):this.db.collection("users").doc(t).update({[`picks.${i}`]:o}).then(()=>{console.log(`Pick saved: ${o} for Game Week ${e}`),sessionStorage.removeItem(n),this.db.collection("users").doc(t).get().then(i=>{if(i.exists){const n=i.data(),o=document.querySelector("#picks-history");o&&this.renderPickHistory(n.picks||{},o,t,n),window.loadFixturesForDeadline&&window.loadFixturesForDeadline(e,n,t),window.updatePickStatusHeader&&window.updatePickStatusHeader(e,n,t).catch(e=>{console.error("Error updating pick status header:",e)})}}).catch(console.error)}).catch(e=>{console.error("Error saving pick:",e),alert("Error saving pick. Please try again.")})}):alert("No temporary pick to save.")}releaseFuturePick(e,t,i){const n="tiebreak"===t?"gwtiebreak":`gw${t}`;confirm(`Are you sure you want to release ${e} from Game Week ${t}?`)&&this.db.collection("users").doc(i).update({[`picks.${n}`]:this.db.FieldValue.delete()}).then(()=>{console.log(`Future pick released: ${e} from Game Week ${t}`),this.db.collection("users").doc(i).get().then(e=>{if(e.exists){const t=e.data(),n=document.querySelector("#picks-history");n&&this.renderPickHistory(t.picks||{},n,i,t);const o=document.querySelector(".gameweek-tab.active")?.getAttribute("data-gameweek")||"1";window.loadFixturesForDeadline&&window.loadFixturesForDeadline(o,t,i)}}).catch(console.error)}).catch(e=>{console.error("Error releasing future pick:",e),alert("Error releasing pick. Please try again.")})}selectTeamAsPick(e,t,i){this.selectTeamAsTempPick(e,t,i)}checkAndAssignAutoPicks(e,t,i){const n="tiebreak"===t?"gwtiebreak":`gw${t}`;e.picks&&e.picks[n]||this.db.collection("fixtures").doc(n).get().then(n=>{if(n.exists){const o=n.data().fixtures;if(o&&o.length>0){const n=o.reduce((e,t)=>new Date(t.date)<new Date(e.date)?t:e);new Date(n.date)<=new Date&&this.assignAutoPick(e,t,i)}}})}assignAutoPick(e,t,i){const n="tiebreak"===t?"gwtiebreak":`gw${t}`,o=e.picks||{},s=Object.values(o),a=window.TEAMS_CONFIG?window.TEAMS_CONFIG.allTeams.filter(e=>!s.includes(e)):[];if(a.length>0){const e=a[0];this.db.collection("users").doc(i).update({[`picks.${n}`]:e}).then(()=>{console.log(`Auto-pick assigned: ${e} for Game Week ${t}`),window.renderDashboard&&window.renderDashboard({uid:i}).catch(console.error)}).catch(e=>{console.error("Error assigning auto-pick:",e)})}}getDeadlineDateForGameweek(e){return new Promise(t=>{const i=setTimeout(()=>{console.log("getDeadlineDateForGameweek timeout for:",e),t(null)},5e3),n="tiebreak"===e?"gwtiebreak":`gw${e}`,o=`edition${this.currentActiveEdition}_${n}`;this.db.collection("fixtures").doc(o).get().then(e=>e.exists?e:this.db.collection("fixtures").doc(n).get()).then(e=>{if(clearTimeout(i),e.exists){const i=e.data().fixtures;if(i&&i.length>0){const e=i.reduce((e,t)=>new Date(t.date)<new Date(e.date)?t:e);t(new Date(e.date))}else t(null)}else t(null)}).catch(e=>{clearTimeout(i),console.log("getDeadlineDateForGameweek error:",e),t(null)})})}formatDeadlineDate(e){if(!e)return"No deadline set";const t=new Date,i=new Date(e).getTime()-t.getTime(),n=Math.ceil(i/864e5);if(n<0)return"Deadline passed";if(0===n){const e=Math.ceil(i/36e5);return e<=0?`${Math.ceil(i/6e4)} minutes`:`${e} hours`}return 1===n?"Tomorrow":`${n} days`}getOrdinalSuffix(e){if(e>3&&e<21)return"th";switch(e%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}}checkDeadlineForGameweek(e,t=null){return new Promise(i=>{const n=setTimeout(()=>{console.log("checkDeadlineForGameweek timeout for:",e,t),i(!1)},5e3),o="tiebreak"===e?"gwtiebreak":`gw${e}`,s=`edition${t||this.currentActiveEdition}_${o}`;this.db.collection("fixtures").doc(s).get().then(e=>e.exists?e:this.db.collection("fixtures").doc(o).get()).then(e=>{if(clearTimeout(n),e.exists){const t=e.data().fixtures;if(t&&t.length>0){const e=t.reduce((e,t)=>new Date(t.date)<new Date(e.date)?t:e),n=new Date(e.date),o=new Date;i(n<=o)}else i(!1)}else i(!1)}).catch(e=>{clearTimeout(n),console.log("checkDeadlineForGameweek error:",e),i(!1)})})}startDeadlineChecker(){this.deadlineCheckerInterval=setInterval(()=>{this.db.collection("settings").doc("currentCompetition").get().then(e=>{if(e.exists){const t=e.data().active_gameweek;this.checkDeadlineForGameweek(t).then(e=>{e&&this.db.collection("users").get().then(e=>{e.forEach(e=>{const i=e.data(),n="tiebreak"===t?"gwtiebreak":`gw${t}`;i.picks&&i.picks[n]||this.assignAutoPick(i,t,e.id)})})})}})},6e4)}async batchCheckDeadlines(e,t){const i={},n=e.map(async e=>{const n=await this.checkDeadlineForGameweek(e,t);i[e]=n});return await Promise.all(n),i}getTeamStatusSimple(e,t,i,n){try{if(!(e&&t&&i&&n))return{status:"normal",clickable:!1,reason:"No user data"};const o="tiebreak"===i?"gwtiebreak":`gw${i}`;return(t.picks&&t.picks[o])===e?{status:"current-pick",clickable:!1,reason:"Current pick for this gameweek"}:Object.values(t.picks||{}).includes(e)?{status:"future-pick",clickable:!0,reason:"Picked in another gameweek"}:{status:"available",clickable:!0,reason:"Available for picking"}}catch(e){return console.error("Error in getTeamStatusSimple:",e),{status:"available",clickable:!0,reason:"Available for picking"}}}async getTeamStatus(e,t,i,n){if(!t||!i||!n)return{status:"normal",clickable:!1,reason:"No user data"};const o="tiebreak"===i?"gwtiebreak":`gw${i}`;if((t.picks&&t.picks[o])===e)return{status:"current-pick",clickable:!1,reason:"Current pick for this gameweek"};if(Object.values(t.picks||{}).includes(e)){let i=null;for(const[n,o]of Object.entries(t.picks||{}))if(o===e){i=n;break}if(i){const e="gwtiebreak"===i?"tiebreak":i.replace("gw",""),n=this.getUserEdition(t),o=Object.keys(t.picks||{}).map(e=>"gwtiebreak"===e?"tiebreak":e.replace("gw",""));let s=!1;try{s=(await this.batchCheckDeadlines(o,n))[e]||!1}catch(e){return console.log("Batch deadline check failed, using fallback:",e),{status:"future-pick",clickable:!0,reason:`Picked in future ${i}`}}return s?{status:"completed-pick",clickable:!1,reason:`Picked in completed ${i}`}:{status:"future-pick",clickable:!0,reason:`Picked in future ${i}`}}}return{status:"available",clickable:!0,reason:"Available for picking"}}getUserEdition(e){return e?e.edition?e.edition:e.registeredEditions&&e.registeredEditions.length>0?e.registeredEditions[0]:this.currentActiveEdition:1}getUserRegisteredEditions(e){return e&&e.registeredEditions&&Array.isArray(e.registeredEditions)?e.registeredEditions:[]}getTeamBadge(e){return null}getActiveGameweek(){return this.currentActiveGameweek}setActiveGameweek(e){this.currentActiveGameweek=e}setActiveEdition(e){this.currentActiveEdition=e}cleanup(){this.deadlineCheckerInterval&&(clearInterval(this.deadlineCheckerInterval),this.deadlineCheckerInterval=null),console.log("🧹 Game Logic Manager cleanup completed")}},c=class{constructor(e){this.db=e,this.mobileNavigationInitialized=!1}initializeMobileNavigationManagement(){this.mobileNavigationInitialized?console.log("Mobile navigation management already initialized, skipping..."):(console.log("Initializing mobile navigation management..."),this.mobileNavigationInitialized=!0,this.setupEventListeners())}setupEventListeners(){console.log("Mobile navigation event listeners ready")}initializeMobileTabs(){console.log("Initializing mobile tabs...");const e=document.querySelectorAll(".mobile-tabs .tab-btn"),t=document.querySelectorAll(".mobile-tab-content .tab-pane");console.log(`Found ${e.length} mobile tab buttons and ${t.length} mobile tab panes`),e.forEach(i=>{i.addEventListener("click",()=>{const n=i.getAttribute("data-tab");console.log(`Mobile tab clicked: ${n}`),e.forEach(e=>e.classList.remove("active")),t.forEach(e=>e.classList.remove("active")),i.classList.add("active");const o=document.getElementById(`${n}-tab`);o&&o.classList.add("active"),"as-it-stands"===n?(console.log("Mobile As It Stands tab clicked"),window.diagnoseAsItStandsElements&&window.diagnoseAsItStandsElements(),window.asItStandsInitialized_mobile||window.initializeAsItStandsTab&&window.initializeAsItStandsTab("mobile")):"scores"===n?window.loadPlayerScores&&window.loadPlayerScores().then(async e=>{console.log("loadPlayerScores returned:",e);const t=window.getActiveGameweek?window.getActiveGameweek():"1";window.renderPlayerScores&&await window.renderPlayerScores(e,t),this.renderMobilePlayerScores(e,t)}).catch(e=>{console.error("Error loading player scores:",e),window.showNoScoresMessage&&window.showNoScoresMessage()}):"vidiprinter"===n&&window.initializePlayerVidiprinter&&window.initializePlayerVidiprinter()})})}loadMobileFixturesForDeadline(e,t=null,i=null){const n=document.querySelector("#mobile-fixtures-display-container"),o=document.querySelector("#mobile-deadline-date"),s=document.querySelector("#mobile-deadline-status"),a=(document.querySelector("#mobile-fixtures-display"),"tiebreak"===e?"gwtiebreak":`gw${e}`),r=`edition${this.getUserEdition(t)}_${a}`;this.db.collection("fixtures").doc(r).get().then(a=>{if(a.exists){const r=a.data().fixtures;if(r&&r.length>0){const a=r.reduce((e,t)=>new Date(t.date)<new Date(e.date)?t:e),l=new Date(a.date),c=this.formatDeadlineDate(l);o&&(o.textContent=c);const d=l-new Date,u=r.every(e=>e.status&&("FT"===e.status||"AET"===e.status||"PEN"===e.status)),g=r.every(e=>e.status&&"NS"!==e.status&&"1H"!==e.status&&"HT"!==e.status&&"2H"!==e.status);u?s&&(s.textContent="Complete (Results confirmed and cards issued)",s.className="complete",s.style.color="#0c5460"):g&&d<=0?s&&(s.textContent="Locked (Matches are complete)",s.className="locked",s.style.color="#721c24"):d<=0?s&&(s.textContent="Locked (Matches are underway)",s.className="locked",s.style.color="#721c24"):s&&(s.textContent="Active (Pick updates allowed)",s.className="active",s.style.color="#28a745"),this.updateMobilePickStatusHeader(e,t,i).catch(e=>{console.error("Error updating mobile pick status header:",e)}),this.renderMobileFixturesDisplay(r,t,e,i),n&&(n.style.display="block")}}else n&&(n.style.display="none")})}async renderMobileFixturesDisplay(e,t=null,i=null,n=null){const o=document.querySelector("#mobile-fixtures-display");if(!e||0===e.length)return void(o.innerHTML="<p>No fixtures available for this gameweek.</p>");const s=e.sort((e,t)=>new Date(e.date)-new Date(t.date));let a="";for(const e of s){const o=new Date(e.date),s=this.getTeamBadge(e.homeTeam),r=this.getTeamBadge(e.awayTeam),l=s?`<img src="${s}" alt="${e.homeTeam}">`:"",c=r?`<img src="${r}" alt="${e.awayTeam}">`:"",d=i?"tiebreak"===i?"gwtiebreak":`gw${i}`:null,u=t&&d?t.picks&&t.picks[d]:null,g=t?Object.values(t.picks||{}):[];let m=!1;if(i&&t){const e=this.getUserEdition(t);try{m=await this.checkDeadlineForGameweek(i,e)}catch(e){console.error("Error checking deadline for mobile fixtures:",e),m=!1}}let h,p,y="team-pick-button",f="team-pick-button";h=u===e.homeTeam?{status:"current-pick",clickable:!1,reason:"Current pick for this gameweek"}:g.includes(e.homeTeam)?{status:"future-pick",clickable:!m,reason:m?"Deadline passed":"Picked in another gameweek"}:{status:"available",clickable:!m,reason:m?"Deadline passed":"Available for picking"},p=u===e.awayTeam?{status:"current-pick",clickable:!1,reason:"Current pick for this gameweek"}:g.includes(e.awayTeam)?{status:"future-pick",clickable:!m,reason:m?"Deadline passed":"Picked in another gameweek"}:{status:"available",clickable:!m,reason:m?"Deadline passed":"Available for picking"},y+=` ${h.status}`,f+=` ${p.status}`,m&&(y+=" deadline-passed",f+=" deadline-passed");let w=h.clickable,v=p.clickable,b=h.reason,k=p.reason;const S=w?`onclick="selectTeamAsTempPick('${e.homeTeam}', ${i}, '${n}')"`:"",E=v?`onclick="selectTeamAsTempPick('${e.awayTeam}', ${i}, '${n}')"`:"",A=k?`title="${k}"`:"";a+=`\n                <div class="fixture-item">\n                    <div class="fixture-teams">\n                        <button class="${y}" ${S} ${b?`title="${b}"`:""} ${w?"":"disabled"}>\n                            ${l}${e.homeTeam}\n                            ${u===e.homeTeam?'<span class="pick-indicator">✓</span>':""}\n                        </button>\n                        <div class="fixture-vs">vs</div>\n                        <button class="${f}" ${E} ${A} ${v?"":"disabled"}>\n                            ${c}${e.awayTeam}\n                            ${u===e.awayTeam?'<span class="pick-indicator">✓</span>':""}\n                        </button>\n                    </div>\n                    <div class="fixture-datetime">\n                        <div class="fixture-time">${o.toLocaleTimeString("en-GB",{timeZone:"Europe/London",hour:"2-digit",minute:"2-digit"})}</div>\n                        <div class="fixture-date">${o.toLocaleDateString("en-GB",{timeZone:"Europe/London",weekday:"short",month:"short",day:"numeric"})}</div>\n                    </div>\n                    <div class="fixture-status">\n                        <span class="status-badge ${e.status||"NS"}">${this.getStatusDisplay(e.status)}</span>\n                    </div>\n                </div>\n            `}o.innerHTML=a}async updateMobilePickStatusHeader(e,t,i){const n=document.querySelector("#mobile-pick-status-display"),o=document.querySelector(".mobile-deadline-section .pick-status-header");if(!n||!o)return;if(await this.checkDeadlineForGameweek(e))return n.style.display="none",void(o.style.display="none");o.style.display="block",n.style.display="block";const s="tiebreak"===e?"gwtiebreak":`gw${e}`,a=t&&t.picks&&t.picks[s];a?(n.textContent=`Saved Pick: ${a}`,n.className="pick-status-text saved",o.style.backgroundColor="rgba(40, 167, 69, 0.1)",o.style.borderColor="rgba(40, 167, 69, 0.3)"):(n.textContent="⚠️ Make your pick before the deadline!",n.className="pick-status-text prompt",o.style.backgroundColor="rgba(220, 53, 69, 0.1)",o.style.borderColor="rgba(220, 53, 69, 0.3)")}initializeMobileGameweekNavigation(e,t,i){const n=document.querySelector("#mobile-current-gameweek-display"),o=document.querySelector("#mobile-prev-gameweek"),s=document.querySelector("#mobile-next-gameweek"),a=document.querySelectorAll(".mobile-gameweek-tabs .gameweek-tab"),r=document.querySelector(".mobile-gameweek-tabs .tiebreak-tab");this.db.collection("settings").doc("currentCompetition").get().then(n=>{if(n.exists){const o=n.data().tiebreak_enabled||!1;if(r)if(o)r.style.display="inline-block";else if(r.style.display="none","tiebreak"===e)return void this.navigateToMobileGameweek("10",t,i)}});const l="tiebreak"===e?"Tiebreak Round":`Game Week ${e}`;n&&(n.textContent=l),this.updateMobileNavigationButtons(e,o,s),this.updateMobileActiveTab(e,a),o&&o.addEventListener("click",()=>this.navigateMobileGameweek(e,-1,t,i)),s&&s.addEventListener("click",()=>this.navigateMobileGameweek(e,1,t,i)),a.forEach(e=>{e.addEventListener("click",()=>{const n=e.dataset.gameweek;this.navigateToMobileGameweek(n,t,i)})}),this.updateMobileTabStates(a)}updateMobileNavigationButtons(e,t,i){if(!t||!i)return;const n="tiebreak"===e?11:parseInt(e);t.disabled=n<=1,i.disabled=n>=11}updateMobileActiveTab(e,t){t.forEach(t=>{t.classList.remove("active"),t.dataset.gameweek===e&&t.classList.add("active")})}updateMobileTabStates(e){e.forEach(e=>{const t=e.dataset.gameweek;this.checkDeadlineForGameweek(t).then(t=>{t?e.classList.add("locked"):e.classList.remove("locked")})})}navigateMobileGameweek(e,t,i,n){const o=("tiebreak"===e?11:parseInt(e))+t;if(o<1||o>11)return;const s=11===o?"tiebreak":o.toString();this.navigateToMobileGameweek(s,i,n)}async navigateToMobileGameweek(e,t,i){try{const n=await this.db.collection("users").doc(i).get(),o=n.exists?n.data():t,s=document.querySelector("#mobile-current-gameweek-display"),a="tiebreak"===e?"Tiebreak Round":`Game Week ${e}`;s&&(s.textContent=a);const r=document.querySelector("#mobile-prev-gameweek"),l=document.querySelector("#mobile-next-gameweek");this.updateMobileNavigationButtons(e,r,l),r&&(r.replaceWith(r.cloneNode(!0)),document.querySelector("#mobile-prev-gameweek").addEventListener("click",()=>this.navigateMobileGameweek(e,-1,o,i))),l&&(l.replaceWith(l.cloneNode(!0)),document.querySelector("#mobile-next-gameweek").addEventListener("click",()=>this.navigateMobileGameweek(e,1,o,i)));const c=document.querySelectorAll(".mobile-gameweek-tabs .gameweek-tab");this.updateMobileActiveTab(e,c),this.loadMobileFixturesForDeadline(e,o,i),console.log(`Navigated to mobile gameweek ${e} with fresh user data`)}catch(e){console.error("Error navigating to mobile gameweek:",e)}}renderMobilePlayerScores(e,t){console.log("renderMobilePlayerScores called with:",{fixtures:e,gameweek:t});const i=document.querySelector("#mobile-scores-display");if(!i)return void console.error("Mobile scores display element not found");if(!e||0===e.length)return void console.log("No fixtures to render for mobile");const n=e.sort((e,t)=>new Date(e.date)-new Date(t.date));let o=`\n            <div class="mobile-scores-header">\n                <h4>Game Week ${"tiebreak"===t?"Tiebreak":t} Results</h4>\n            </div>\n            <div class="mobile-scores-container">\n        `;for(const e of n){const t=new Date(e.date),i=this.getTeamBadge(e.homeTeam),n=this.getTeamBadge(e.awayTeam),s=i?`<img src="${i}" alt="${e.homeTeam}" class="team-badge">`:"",a=n?`<img src="${n}" alt="${e.awayTeam}" class="team-badge">`:"";let r="",l="";if(e.completed||"FT"===e.status||"AET"===e.status||"PEN"===e.status){const t=null!==e.homeScoreHT&&null!==e.awayScoreHT;r=`\n                    <div class="mobile-score-result">\n                        <span class="mobile-score">${e.homeScore||0}</span>\n                        <span class="mobile-score-separator">-</span>\n                        <span class="mobile-score">${e.awayScore||0}</span>\n                    </div>\n                    ${t?`\n                        <div class="mobile-half-time-scores">\n                            <small>Half Time: ${e.homeScoreHT} - ${e.awayScoreHT}</small>\n                        </div>\n                    `:""}\n                `,l="completed"}else if("HT"===e.status&&null!==e.homeScoreHT&&null!==e.awayScoreHT)r=`\n                    <div class="mobile-score-result">\n                        <span class="mobile-score">${e.homeScoreHT}</span>\n                        <span class="mobile-score-separator">-</span>\n                        <span class="mobile-score">${e.awayScoreHT}</span>\n                        <span class="mobile-score-status">HT</span>\n                    </div>\n                `,l="half-time";else if("1H"===e.status||"2H"===e.status||"LIVE"===e.status){const t=null!==e.homeScoreHT&&null!==e.awayScoreHT;r=`\n                    <div class="mobile-score-result">\n                        <span class="mobile-score">${e.homeScore||0}</span>\n                        <span class="mobile-score-separator">-</span>\n                        <span class="mobile-score">${e.awayScore||0}</span>\n                        <span class="mobile-score-status live">LIVE</span>\n                    </div>\n                    ${t?`\n                        <div class="mobile-half-time-scores">\n                            <small>Half Time: ${e.homeScoreHT} - ${e.awayScoreHT}</small>\n                        </div>\n                    `:""}\n                `,l="live"}else r='\n                    <div class="mobile-score-result">\n                        <span class="mobile-score-placeholder">vs</span>\n                    </div>\n                ',l="not-started";o+=`\n                <div class="mobile-score-fixture ${l}">\n                    <div class="mobile-fixture-teams">\n                        <div class="mobile-team home-team">\n                            ${s}\n                            <span class="mobile-team-name">${e.homeTeam}</span>\n                        </div>\n                        ${r}\n                        <div class="mobile-team away-team">\n                            <span class="mobile-team-name">${e.awayTeam}</span>\n                            ${a}\n                        </div>\n                    </div>\n                    <div class="mobile-fixture-info">\n                        <div class="mobile-fixture-time">${t.toLocaleTimeString("en-GB",{timeZone:"Europe/London",hour:"2-digit",minute:"2-digit"})}</div>\n                        <div class="mobile-fixture-date">${t.toLocaleDateString("en-GB",{timeZone:"Europe/London",weekday:"short",month:"short",day:"numeric"})}</div>\n                        <div class="mobile-fixture-status">${this.getStatusDisplay(e.status)}</div>\n                    </div>\n                </div>\n            `}o+="</div>",i.innerHTML=o}toggleTestimonials(){const e=document.querySelector(".testimonial-toggle"),t=document.getElementById("mobile-testimonials");e&&t&&(t.classList.contains("active")?(t.classList.remove("active"),e.classList.remove("active")):(t.classList.add("active"),e.classList.add("active")))}switchToFixturesTab(){const e=document.querySelectorAll(".mobile-tabs .tab-btn"),t=document.querySelectorAll(".mobile-tab-content .tab-pane");e.forEach(e=>e.classList.remove("active")),t.forEach(e=>e.classList.remove("active"));const i=document.querySelector('.mobile-tabs .tab-btn[data-tab="fixtures"]'),n=document.getElementById("fixtures-tab");i&&i.classList.add("active"),n&&n.classList.add("active")}getUserEdition(e){if(!e||!e.registrations)return 1;if(e.registrations[`edition${this.currentActiveEdition}`])return this.currentActiveEdition;for(let t=1;t<=5;t++)if(e.registrations[`edition${t}`])return t;return 1}async checkDeadlineForGameweek(e,t=null){try{const i=`${t?`edition${t}`:"edition1"}_${"tiebreak"===e?"gwtiebreak":`gw${e}`}`,n=await this.db.collection("fixtures").doc(i).get();if(!n.exists)return!1;const o=n.data().fixtures;if(!o||0===o.length)return!1;const s=o.reduce((e,t)=>new Date(t.date)<new Date(e.date)?t:e),a=new Date(s.date);return new Date>=a}catch(e){return console.error("Error checking deadline for gameweek:",e),!1}}formatDeadlineDate(e){const t=e.getDate(),i=e.toLocaleDateString("en-GB",{month:"long"}),n=e.getFullYear(),o=e.toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit"});return`${t}${this.getOrdinalSuffix(t)} ${i} ${n} at ${o}`}getOrdinalSuffix(e){if(e>3&&e<21)return"th";switch(e%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}}getTeamBadge(e){return null}getStatusDisplay(e){return{NS:"Not Started","1H":"First Half",HT:"Half Time","2H":"Second Half",FT:"Full Time",AET:"Extra Time",PEN:"Penalties",LIVE:"Live"}[e]||e||"Not Started"}cleanup(){this.mobileNavigationInitialized=!1,console.log("Mobile Navigation Manager cleanup completed")}};class d{constructor(e){this.db=e,this.allPlayers=[],this.currentPlayerManagementType="total"}showPlayerManagement(e){console.log(`🔧 Showing player management for type: ${e}`);const t=document.querySelector("#player-management-modal"),i=document.querySelector("#player-edit-modal");t&&(t.style.display="block"),i&&(i.style.display="none"),this.currentPlayerManagementType=e,this.loadPlayersForManagement()}closePlayerManagement(){const e=document.querySelector("#player-management-modal");e&&(e.style.display="none")}closePlayerEdit(){const e=document.querySelector("#player-edit-modal");e&&(e.style.display="none")}async checkOrphanedAccounts(){try{console.log("🔍 Checking for orphaned accounts...");const e=await this.db.collection("users").get(),t=new Set;e.forEach(e=>{t.add(e.id)}),alert("Orphaned accounts check requires server-side implementation. This feature will be available in a future update.")}catch(e){console.error("❌ Error checking orphaned accounts:",e),alert("Error checking orphaned accounts: "+e.message)}}showFirebaseAuthDeletionInstructions(){alert("\nFirebase Auth Account Deletion Instructions:\n\n1. Go to Firebase Console > Authentication > Users\n2. Find the user account you want to delete\n3. Click the three dots menu (⋮) next to the user\n4. Select \"Delete user\"\n5. Confirm the deletion\n\nNote: This will permanently delete the user's authentication account.\nThe user's data in Firestore will remain unless manually deleted.\n\n⚠️ WARNING: This action cannot be undone!\n        ")}async loadPlayersForManagement(){try{console.log("🔧 Loading players for management...");const e=await this.db.collection("users").get();this.allPlayers=[];const t=this.getCurrentActiveEdition();e.forEach(e=>{const i=e.data();let n=!1;switch(this.currentPlayerManagementType){case"total":default:n=!0;break;case"active":const e=i.status;n=!e||"active"===e.toLowerCase();break;case"archived":n="archived"===i.status;break;case"current":n=i.registrations&&i.registrations[`edition${t}`];break;case"test":n=i.registrations&&i.registrations.editiontest}n&&this.allPlayers.push({id:e.id,...i})}),this.allPlayers.sort((e,t)=>(e.displayName||"").localeCompare(t.displayName||"")),console.log(`✅ Loaded ${this.allPlayers.length} players for ${this.currentPlayerManagementType} management`),this.displayPlayers(this.allPlayers)}catch(e){console.error("❌ Error loading players for management:",e),alert("Error loading players: "+e.message)}}getCurrentActiveEdition(){const e=document.querySelector("#edition-selector");return e?e.value:window.currentActiveEdition?window.currentActiveEdition:1}displayPlayers(e){const t=document.querySelector("#player-management-list");if(!t)return void console.error("Player list container not found");if(!e||0===e.length)return void(t.innerHTML="<p>No players found</p>");let i="";e.forEach(e=>{const t=e.status?e.status.toLowerCase():"active",n="active"===t?"active":"archived",o=e.registrations&&e.registrations.editiontest,s=this.getCurrentActiveEdition(),a=e.registrations&&e.registrations[`edition${s}`];let r="";r=o?"Test Weeks":a?`Edition ${s}`:"None",i+=`\n                <tr class="player-row ${n}" data-player-id="${e.id}">\n                    <td>${e.displayName||"Unknown"}</td>\n                    <td>${e.email||"No email"}</td>\n                    <td><span class="status-badge ${n}">${"active"===t?"Active":"archived"===t?"Archived":"Unknown"}</span></td>\n                    <td>${e.lives||2}</td>\n                    <td>${r}</td>\n                    <td>\n                        <button class="edit-btn" onclick="window.adminManagementManager.userManagement.editPlayer('${e.id}')">Edit</button>\n                        ${"active"===t?`<button class="archive-btn" onclick="window.adminManagementManager.userManagement.archivePlayer('${e.id}')">Archive</button>`:`<button class="unarchive-btn" onclick="window.adminManagementManager.userManagement.unarchivePlayer('${e.id}')">Unarchive</button>`}\n                        <button class="delete-btn" onclick="window.adminManagementManager.userManagement.deletePlayer('${e.id}')">Delete</button>\n                    </td>\n                </tr>\n            `}),t.innerHTML=i,this.setupPlayerActionEventListeners(),this.setupSearchAndFilter()}setupPlayerActionEventListeners(){document.querySelectorAll(".player-item").forEach(e=>{e.addEventListener("editPlayer",e=>this.editPlayer(e.detail)),e.addEventListener("archivePlayer",e=>this.archivePlayer(e.detail)),e.addEventListener("unarchivePlayer",e=>this.unarchivePlayer(e.detail)),e.addEventListener("deletePlayer",e=>this.deletePlayer(e.detail))})}setupSearchAndFilter(){const e=document.querySelector("#player-search"),t=document.querySelector("#player-filter");e&&e.addEventListener("input",()=>this.searchPlayers()),t&&t.addEventListener("change",()=>this.filterPlayers())}searchPlayers(){const e=document.querySelector("#player-search")?.value?.toLowerCase()||"",t=this.allPlayers.filter(t=>t.displayName?.toLowerCase().includes(e)||t.email?.toLowerCase().includes(e));this.displayPlayers(t)}filterPlayers(){const e=document.querySelector("#player-filter")?.value||"all";let t=this.allPlayers;switch(e){case"active":t=this.allPlayers.filter(e=>"active"===e.status);break;case"archived":t=this.allPlayers.filter(e=>"archived"===e.status);break;case"test":t=this.allPlayers.filter(e=>!0===e.testWeeks);break;default:t=this.allPlayers}this.displayPlayers(t)}async editPlayer(e){try{console.log(`🔧 Editing player: ${e}`);const t=await this.db.collection("users").doc(e).get();if(!t.exists)return void alert("Player not found");const i=t.data();this.showPlayerEditForm(e,i)}catch(e){console.error("❌ Error editing player:",e),alert("Error editing player: "+e.message)}}showPlayerEditForm(e,t){const i=document.querySelector("#player-edit-modal"),n=document.querySelector("#player-management-modal");i&&(i.style.display="block"),n&&(n.style.display="none");const o=document.querySelector("#edit-first-name"),s=document.querySelector("#edit-surname"),a=document.querySelector("#edit-email"),r=document.querySelector("#edit-lives"),l=document.querySelector("#edit-status"),c=document.querySelector("#edit-notes");o&&(o.value=t.firstName||""),s&&(s.value=t.surname||""),a&&(a.value=t.email||""),r&&(r.value=t.lives||2),l&&(l.value=t.status||"active"),c&&(c.value=t.adminNotes||"");const d=document.querySelector("#player-edit-form");d&&(d.removeEventListener("submit",this.savePlayerEdit.bind(this)),d.addEventListener("submit",t=>this.savePlayerEdit(t,e)))}async savePlayerEdit(e,t){e.preventDefault();try{const e=document.querySelector("#edit-first-name").value,i=document.querySelector("#edit-surname").value,n=document.querySelector("#edit-email").value,o=parseInt(document.querySelector("#edit-lives").value),s=document.querySelector("#edit-status").value,a=document.querySelector("#edit-notes").value,r={firstName:e,surname:i,displayName:`${e} ${i}`.trim(),email:n,lives:o,status:s,adminNotes:a,lastUpdated:new Date};await this.db.collection("users").doc(t).update(r),console.log(`✅ Player ${t} updated successfully`),alert("Player updated successfully!"),this.closePlayerEdit(),this.loadPlayersForManagement()}catch(e){console.error("❌ Error saving player edit:",e),alert("Error saving player: "+e.message)}}async archivePlayer(e){if(confirm("Are you sure you want to archive this player?"))try{await this.db.collection("users").doc(e).update({status:"archived",archivedAt:new Date,lastUpdated:new Date}),console.log(`✅ Player ${e} archived successfully`),alert("Player archived successfully!"),this.loadPlayersForManagement()}catch(e){console.error("❌ Error archiving player:",e),alert("Error archiving player: "+e.message)}}async unarchivePlayer(e){if(confirm("Are you sure you want to unarchive this player?"))try{await this.db.collection("users").doc(e).update({status:"active",unarchivedAt:new Date,lastUpdated:new Date}),console.log(`✅ Player ${e} unarchived successfully`),alert("Player unarchived successfully!"),this.loadPlayersForManagement()}catch(e){console.error("❌ Error unarchiving player:",e),alert("Error unarchiving player: "+e.message)}}async addToTestWeeks(e){try{await this.db.collection("users").doc(e).update({testWeeks:!0,lastUpdated:new Date}),console.log(`✅ Player ${e} added to test weeks successfully`),alert("Player added to test weeks successfully!"),this.loadPlayersForManagement()}catch(e){console.error("❌ Error adding player to test weeks:",e),alert("Error adding player to test weeks: "+e.message)}}async deletePlayer(e){if(confirm("Are you sure you want to delete this player? This action cannot be undone."))try{await this.db.collection("users").doc(e).delete(),console.log(`✅ Player ${e} deleted successfully`),alert("Player deleted successfully!"),this.loadPlayersForManagement()}catch(e){console.error("❌ Error deleting player:",e),alert("Error deleting player: "+e.message)}}async resetAllPlayerLives(){if(confirm("Are you sure you want to reset all player lives to 2? This will affect all active players."))try{const e=this.db.batch(),t=await this.db.collection("users").where("status","==","active").get();t.forEach(t=>{e.update(t.ref,{lives:2,lastUpdated:new Date})}),await e.commit(),console.log(`✅ Reset ${t.size} player lives successfully`),alert(`Reset ${t.size} player lives successfully!`),this.loadPlayersForManagement()}catch(e){console.error("❌ Error resetting player lives:",e),alert("Error resetting player lives: "+e.message)}}generateTestScores(){console.log("🔧 Generating test scores..."),alert("Test scores generation not yet implemented")}cleanup(){console.log("🧹 UserManagement cleanup completed")}}class u{constructor(e){this.db=e,this.currentActiveEdition=1,this.currentActiveGameweek="1"}updateCurrentActiveEdition(e){this.currentActiveEdition=e,console.log(`TeamOperations: Updated currentActiveEdition to ${e}`)}updateCurrentActiveGameweek(e){this.currentActiveGameweek=e,console.log(`TeamOperations: Updated currentActiveGameweek to ${e}`)}setupAsItStandsFunctionality(){console.log("🔧 Setting up As It Stands functionality...");const e=document.querySelector("#as-it-stands-btn");e&&e.addEventListener("click",()=>this.loadStandings());const t=document.querySelector("#export-standings-btn");t&&t.addEventListener("click",()=>this.exportStandings());const i=document.querySelector("#manual-adjustment-btn");i&&i.addEventListener("click",()=>this.setupManualAdjustments());const n=document.querySelector("#standings-history-btn");n&&n.addEventListener("click",()=>this.setupStandingsHistory()),console.log("✅ As It Stands functionality setup complete")}initializeAsItStandsTab(e="desktop"){console.log(`🔧 Initializing As It Stands tab for ${e}...`);try{const t=document.querySelector(`#${e}-as-it-stands-tab`);if(!t)return void console.warn(`❌ As It Stands content container not found for ${e}`);this.createAsItStandsElements(t,e),this.loadStandings(),console.log(`✅ As It Stands tab initialized for ${e}`)}catch(t){console.error(`❌ Error initializing As It Stands tab for ${e}:`,t)}}createAsItStandsElements(e,t){console.log(`🔧 Creating As It Stands elements for ${t}...`);let i=e.querySelector(".gameweek-selector");if(!i){i=document.createElement("div"),i.className="gameweek-selector",i.innerHTML='\n                <label for="standings-gameweek">Select Gameweek:</label>\n                <select id="standings-gameweek">\n                    <option value="1">Game Week 1</option>\n                    <option value="2">Game Week 2</option>\n                    <option value="3">Game Week 3</option>\n                    <option value="4">Game Week 4</option>\n                    <option value="5">Game Week 5</option>\n                    <option value="6">Game Week 6</option>\n                    <option value="7">Game Week 7</option>\n                    <option value="8">Game Week 8</option>\n                    <option value="9">Game Week 9</option>\n                    <option value="10">Game Week 10</option>\n                    <option value="tiebreak">Tiebreak Round</option>\n                </select>\n            ',e.appendChild(i);const t=i.querySelector("select");t&&t.addEventListener("change",()=>{this.currentActiveGameweek=t.value,this.loadStandings()})}let n=e.querySelector(".standings-container");n||(n=document.createElement("div"),n.className="standings-container",n.innerHTML="<p>Loading standings...</p>",e.appendChild(n));let o=e.querySelector(".standings-summary");o||(o=document.createElement("div"),o.className="standings-summary",o.innerHTML="<p>Loading summary...</p>",e.appendChild(o)),console.log(`✅ As It Stands elements created for ${t}`)}async loadStandings(){try{console.log("🔧 Loading standings...");const e=this.currentActiveGameweek;console.log(`Current gameweek: ${e}`);const t=await this.db.collection("users").where("status","==","active").get(),i=[];t.forEach(e=>{i.push({id:e.id,...e.data()})}),console.log(`Found ${i.length} active players`);const n="tiebreak"===e?"gwtiebreak":`gw${e}`,o=`edition${this.currentActiveEdition}_${n}`,s=await this.db.collection("fixtures").doc(o).get();let a=[];s.exists?(a=s.data().fixtures||[],console.log(`Found ${a.length} fixtures for gameweek ${e}`)):console.log(`No fixtures found for gameweek ${e}`);const r=await this.calculateStandings(i,a,e);this.updateStandingsSummary(r),this.renderStandingsTable(r),console.log("✅ Standings loaded successfully")}catch(e){console.error("❌ Error loading standings:",e),alert("Error loading standings: "+e.message)}}async calculateStandings(e,t,i){console.log(`🔧 Calculating standings for gameweek ${i}...`);const n=[];for(const o of e){const e={id:o.id,displayName:o.displayName||"Unknown",email:o.email||"No email",lives:o.lives||2,status:o.status||"active",picks:{},totalPoints:0,eliminated:!1},s="tiebreak"===i?"gwtiebreak":`gw${i}`,a=`edition${this.currentActiveEdition}_${s}`;try{const t=await this.db.collection("picks").doc(o.id).get();if(t.exists){const i=t.data();e.picks=i[a]||{}}}catch(e){console.log(`No picks found for player ${o.id} in gameweek ${i}`)}if(t.length>0&&e.picks.team){const i=e.picks.team,n=t.find(e=>e.homeTeam===i||e.awayTeam===i);if(n)if("FT"===n.status){const t=parseInt(n.homeScore)||0,o=parseInt(n.awayScore)||0;i===n.homeTeam?t>o?e.totalPoints=3:t===o?(e.totalPoints=1,e.lives=Math.max(0,e.lives-1)):(e.totalPoints=0,e.lives=Math.max(0,e.lives-1)):o>t?e.totalPoints=3:o===t?(e.totalPoints=1,e.lives=Math.max(0,e.lives-1)):(e.totalPoints=0,e.lives=Math.max(0,e.lives-1)),0===e.lives&&(e.eliminated=!0)}else e.totalPoints=0}n.push(e)}return n.sort((e,t)=>e.totalPoints!==t.totalPoints?t.totalPoints-e.totalPoints:e.lives!==t.lives?t.lives-e.lives:e.displayName.localeCompare(t.displayName)),console.log(`✅ Calculated standings for ${n.length} players`),n}updateStandingsSummary(e){const t=document.querySelector("#standings-summary");if(!t)return;const i=e.length,n=e.filter(e=>!e.eliminated).length,o=i-n;t.innerHTML=`\n            <div class="standings-summary">\n                <h3>Standings Summary</h3>\n                <div class="summary-stats">\n                    <div class="stat">\n                        <span class="stat-label">Total Players:</span>\n                        <span class="stat-value">${i}</span>\n                    </div>\n                    <div class="stat">\n                        <span class="stat-label">Active Players:</span>\n                        <span class="stat-value active">${n}</span>\n                    </div>\n                    <div class="stat">\n                        <span class="stat-label">Eliminated:</span>\n                        <span class="stat-value eliminated">${o}</span>\n                    </div>\n                </div>\n            </div>\n        `}renderStandingsTable(e){const t=document.querySelector("#standings-table-container");if(!t)return;if(!e||0===e.length)return void(t.innerHTML="<p>No standings data available</p>");let i='\n            <table class="standings-table">\n                <thead>\n                    <tr>\n                        <th>Position</th>\n                        <th>Player</th>\n                        <th>Picked Team</th>\n                        <th>Result</th>\n                        <th>Points</th>\n                        <th>Lives</th>\n                        <th>Status</th>\n                    </tr>\n                </thead>\n                <tbody>\n        ';e.forEach((e,t)=>{const n=t+1,o=n<=3?"top-three":"",s=e.eliminated?"eliminated":"active",a=e.picks.team||"No pick";let r="Pending",l="pending";e.totalPoints>0?3===e.totalPoints?(r="Win",l="win"):1===e.totalPoints&&(r="Draw",l="draw"):e.picks.team&&(r="Loss",l="loss"),i+=`\n                <tr class="${o} ${s}">\n                    <td class="position">${n}</td>\n                    <td class="player-name">${e.displayName}</td>\n                    <td class="picked-team">${a}</td>\n                    <td class="result ${l}">${r}</td>\n                    <td class="points">${e.totalPoints}</td>\n                    <td class="lives">${e.lives}</td>\n                    <td class="status ${s}">${e.eliminated?"Eliminated":"Active"}</td>\n                </tr>\n            `}),i+="\n                </tbody>\n            </table>\n        ",t.innerHTML=i}exportStandings(){console.log("🔧 Exporting standings...");const e=document.querySelector("#standings-table-container");if(!e)return void alert("No standings table to export");const t=e.querySelector("table");if(!t)return void alert("No standings table found");const i=this.tableToCSV(t),n=new Blob([i],{type:"text/csv"}),o=window.URL.createObjectURL(n),s=document.createElement("a");s.href=o,s.download=`standings-gameweek-${this.currentActiveGameweek}-${(new Date).toISOString().split("T")[0]}.csv`,s.click(),window.URL.revokeObjectURL(o),console.log("✅ Standings exported successfully")}tableToCSV(e){return Array.from(e.querySelectorAll("tr")).map(e=>Array.from(e.querySelectorAll("th, td")).map(e=>{let t=e.textContent||e.innerText||"";return t=t.replace(/"/g,'""'),`"${t}"`}).join(",")).join("\n")}setupManualAdjustments(){console.log("🔧 Setting up manual adjustments...");const e=document.querySelector("#manual-adjustment-container");if(!e)return void console.error("Manual adjustment container not found");e.style.display="block",this.updateAdjustmentPlayerDropdown([]);const t=document.querySelector("#manual-adjustment-form");t&&t.addEventListener("submit",e=>this.applyManualAdjustment(e))}async updateAdjustmentPlayerDropdown(e){const t=document.querySelector("#adjustment-player-select");if(t){if(0===e.length)try{const t=await this.db.collection("users").where("status","==","active").orderBy("displayName").get();e=[],t.forEach(t=>{e.push({id:t.id,displayName:t.data().displayName||"Unknown"})})}catch(e){return void console.error("Error loading players for adjustment dropdown:",e)}t.innerHTML='<option value="">Select a player...</option>',e.forEach(e=>{const i=document.createElement("option");i.value=e.id,i.textContent=e.displayName,t.appendChild(i)})}}async loadPlayerCurrentLives(e){try{const t=await this.db.collection("users").doc(e).get();if(t.exists){const e=t.data(),i=document.querySelector("#adjustment-lives-input");i&&(i.value=e.lives||2)}}catch(e){console.error("Error loading player lives:",e)}}async applyManualAdjustment(e){e.preventDefault();try{const e=document.querySelector("#adjustment-player-select").value,t=parseInt(document.querySelector("#adjustment-lives-input").value),i=document.querySelector("#adjustment-reason").value;if(!e)return void alert("Please select a player");if(t<0||t>2)return void alert("Lives must be between 0 and 2");await this.db.collection("users").doc(e).update({lives:t,lastUpdated:new Date}),await this.db.collection("adjustmentLogs").add({playerId:e,oldLives:0,newLives:t,reason:i,adjustedBy:"admin",adjustedAt:new Date}),console.log(`✅ Manual adjustment applied: Player ${e} lives set to ${t}`),alert("Manual adjustment applied successfully!");const n=document.querySelector("#manual-adjustment-container");n&&(n.style.display="none"),document.querySelector("#standings-table-container")&&this.loadStandings()}catch(e){console.error("❌ Error applying manual adjustment:",e),alert("Error applying adjustment: "+e.message)}}setupStandingsHistory(){console.log("🔧 Setting up standings history...");const e=document.querySelector("#standings-history-container");e?(e.style.display="block",this.loadStandingsHistory()):console.error("Standings history container not found")}async loadStandingsHistory(){try{console.log("🔧 Loading standings history...");const e=await this.db.collection("adjustmentLogs").orderBy("adjustedAt","desc").limit(50).get(),t=[];e.forEach(e=>{t.push({id:e.id,...e.data()})}),this.renderStandingsHistory(t)}catch(e){console.error("❌ Error loading standings history:",e),alert("Error loading standings history: "+e.message)}}renderStandingsHistory(e){const t=document.querySelector("#standings-history-container");if(!t)return;if(!e||0===e.length)return void(t.innerHTML="<p>No adjustment history found</p>");let i='\n            <h3>Standings Adjustment History</h3>\n            <table class="history-table">\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Player</th>\n                        <th>Old Lives</th>\n                        <th>New Lives</th>\n                        <th>Reason</th>\n                        <th>Adjusted By</th>\n                    </tr>\n                </thead>\n                <tbody>\n        ';e.forEach(e=>{const t=e.adjustedAt?.toDate?.()||e.adjustedAt||new Date,n=t.toLocaleDateString("en-GB")+" "+t.toLocaleTimeString();i+=`\n                <tr>\n                    <td>${n}</td>\n                    <td>${e.playerId}</td>\n                    <td>${e.oldLives}</td>\n                    <td>${e.newLives}</td>\n                    <td>${e.reason||"No reason provided"}</td>\n                    <td>${e.adjustedBy||"Unknown"}</td>\n                </tr>\n            `}),i+='\n                </tbody>\n            </table>\n            <button id="export-history-btn" class="export-btn">Export History</button>\n        ',t.innerHTML=i;const n=document.querySelector("#export-history-btn");n&&n.addEventListener("click",()=>this.exportStandingsHistory(e))}exportStandingsHistory(e){if(console.log("🔧 Exporting standings history..."),!e||0===e.length)return void alert("No history data to export");const t=this.logsToCSV(e),i=new Blob([t],{type:"text/csv"}),n=window.URL.createObjectURL(i),o=document.createElement("a");o.href=n,o.download=`standings-history-${(new Date).toISOString().split("T")[0]}.csv`,o.click(),window.URL.revokeObjectURL(n),console.log("✅ Standings history exported successfully")}logsToCSV(e){const t=[["Date","Player ID","Old Lives","New Lives","Reason","Adjusted By"].join(",")];return e.forEach(e=>{const i=e.adjustedAt?.toDate?.()||e.adjustedAt||new Date,n=[i.toLocaleDateString("en-GB")+" "+i.toLocaleTimeString(),e.playerId||"",e.oldLives||"",e.newLives||"",(e.reason||"").replace(/"/g,'""'),e.adjustedBy||""].map(e=>`"${e}"`).join(",");t.push(n)}),t.join("\n")}async adjustPlayerLives(e,t){try{const i=Math.max(0,Math.min(2,t));return await this.db.collection("users").doc(e).update({lives:i,lastUpdated:new Date}),console.log(`✅ Player ${e} lives adjusted to ${i}`),!0}catch(e){return console.error("❌ Error adjusting player lives:",e),!1}}getTeamBadge(e){return null}cleanup(){console.log("🧹 TeamOperations cleanup completed")}}class g{constructor(e){this.db=e,this.currentActiveEdition=1,this.currentActiveGameweek="1"}updateCurrentActiveEdition(e){this.currentActiveEdition=e,console.log(`Scheduling: Updated currentActiveEdition to ${e}`)}updateCurrentActiveGameweek(e){this.currentActiveGameweek=e,console.log(`Scheduling: Updated currentActiveGameweek to ${e}`)}setupQuickEditionSelector(){if(this.editionSelectorInitialized)return void console.log("🔄 Edition selector already initialized, skipping...");console.log("🔧 Setting up quick edition selector...");const e=()=>{const e=document.querySelector("#quick-edition-selector"),t=document.querySelector("#quick-save-edition-btn");if(console.log("🔍 Looking for elements..."),console.log("Edition selector found:",!!e),console.log("Save button found:",!!t),!e)return console.log("❌ Quick edition selector not found, will retry..."),!1;if(!t)return console.log("❌ Quick save edition button not found, will retry..."),!1;console.log("✅ Found both elements"),console.log("🔍 Edition selector properties:",{disabled:e.disabled,style:e.style.cssText,className:e.className,type:e.type}),console.log("🔍 Save button properties:",{disabled:t.disabled,style:t.style.cssText,className:t.className,type:t.type}),this.loadAvailableEditions(),e.addEventListener("change",t=>{console.log("🔄 Edition selector change event triggered");const i=e.value;this.resetActiveWeekForNewEdition(i),this.saveQuickEditionChange(),window.adminManagementManager&&window.adminManagementManager.refreshRegistrationStatistics&&(console.log("🔄 Refreshing registration statistics after edition change..."),window.adminManagementManager.refreshRegistrationStatistics())}),console.log("🔧 Setting up save button event listener..."),console.log("🔍 Save button element:",t),console.log("🔍 Save button properties:",{disabled:t.disabled,style:t.style.cssText,className:t.className,type:t.type,onclick:t.onclick,onmousedown:t.onmousedown,onmouseup:t.onmouseup});const i=t.cloneNode(!0);t.parentNode.replaceChild(i,t);const n=document.querySelector("#quick-save-edition-btn");return console.log("🔍 Fresh button element:",n),n.addEventListener("click",e=>{console.log("🔄 Quick save edition button clicked!"),e.preventDefault(),e.stopPropagation();const t=n.textContent;n.textContent="Saving...",n.disabled=!0,this.saveQuickEditionChange().then(()=>{n.textContent="Saved!",n.style.backgroundColor="#28a745",n.style.color="white",setTimeout(()=>{n.textContent=t,n.style.backgroundColor="",n.style.color="",n.disabled=!1},2e3)}).catch(e=>{n.textContent="Error!",n.style.backgroundColor="#dc3545",n.style.color="white",setTimeout(()=>{n.textContent=t,n.style.backgroundColor="",n.style.color="",n.disabled=!1},3e3)})}),n.addEventListener("mousedown",e=>{console.log("🔄 Quick save edition button mousedown!")}),n.addEventListener("mouseup",e=>{console.log("🔄 Quick save edition button mouseup!")}),console.log("✅ Save button event listeners attached"),e.addEventListener("keypress",e=>{"Enter"===e.key&&(console.log("🔄 Enter key pressed in edition selector"),this.saveQuickEditionChange())}),e.style.appearance="auto",e.style.webkitAppearance="auto",e.style.mozAppearance="auto",e.style.cursor="pointer",e.style.pointerEvents="auto",e.style.opacity="1",e.disabled=!1,e.style.backgroundImage="none",e.style.backgroundRepeat="no-repeat",e.style.backgroundPosition="right 8px center",e.style.backgroundSize="12px auto",e.style.paddingRight="8px",t.disabled=!1,t.style.pointerEvents="auto",t.style.opacity="1",t.style.cursor="pointer",this.updateQuickEditionSelector(),console.log("✅ Quick edition selector and save button setup complete"),!0};e()||(console.log("🔄 Elements not found, retrying in 100ms..."),setTimeout(()=>{e()||(console.log("🔄 Elements still not found, retrying in 500ms..."),setTimeout(()=>{e()||console.error("❌ Failed to find elements after multiple retries")},500))},100)),this.editionSelectorInitialized=!0}setupActiveGameweekSelector(){console.log("🔧 Setting up active gameweek selector...");const e=document.querySelector("#active-gameweek-select");if(!e){console.log("❌ Active gameweek selector not found - checking for alternatives...");const e=["#active-gameweek-select","#gameweek-select",'select[id*="gameweek"]','select[id*="week"]'];for(const t of e)if(document.querySelector(t)){console.log(`✅ Found alternative selector: ${t}`);break}return}console.log("✅ Found active gameweek selector:",e),this.loadAvailableGameweeks(),e.addEventListener("change",e=>this.handleGameweekChange(e)),this.updateActiveGameweekSelector(),console.log("✅ Active gameweek selector setup complete")}async loadAvailableGameweeks(){try{const e=document.querySelector("#active-gameweek-select");if(!e)return void console.log("❌ Gameweek selector not found in loadAvailableGameweeks");console.log("🔧 Loading gameweeks into selector:",e),e.innerHTML="",console.log("✅ Cleared existing options");for(let t=1;t<=10;t++){const i=document.createElement("option");i.value=t.toString(),i.textContent=`Week ${t}`,e.appendChild(i),console.log(`✅ Added option: Week ${t}`)}console.log(`✅ Loaded ${e.options.length} gameweek options`),console.log("🔍 Final selector HTML:",e.innerHTML)}catch(e){console.error("❌ Error loading gameweeks:",e)}}updateActiveGameweekSelector(){const e=document.querySelector("#active-gameweek-select");e&&(e.value=this.currentActiveGameweek,console.log(`✅ Updated gameweek selector to ${this.currentActiveGameweek}`))}async handleGameweekChange(e){const t=e.target.value;console.log("Gameweek selection changed to:",t),this.currentActiveGameweek=t,void 0!==window.currentActiveGameweek&&(window.currentActiveGameweek=t),window.app&&void 0!==window.app.currentActiveGameweek&&(window.app.currentActiveGameweek=t),this.setDefaultGameweekSelection(),await this.saveGameweekChange(t)}async saveGameweekChange(e){try{const t=await this.db.collection("settings").doc("currentCompetition").get();let i={};t.exists&&(i=t.data()),i.active_gameweek=e,i.last_updated=new Date,await this.db.collection("settings").doc("currentCompetition").set(i),console.log(`✅ Gameweek change saved to database: ${e}`)}catch(e){console.error("❌ Error saving gameweek change:",e)}}setDefaultGameweekSelection(){console.log("🔧 Setting default gameweek selection..."),["#gameweek-select","#score-gameweek-select","#standings-gameweek-select","#history-gameweek-select","#import-gameweek-select","#source-gameweek","#target-gameweek","#delete-gameweek"].forEach(e=>{const t=document.querySelector(e);if(t)if(Array.from(t.options).some(e=>e.value===this.currentActiveGameweek)){t.value=this.currentActiveGameweek,console.log(`✅ Set ${e} to default gameweek: ${this.currentActiveGameweek}`);const i=new Event("change",{bubbles:!0});t.dispatchEvent(i)}else console.log(`⚠️ Gameweek ${this.currentActiveGameweek} not available in ${e}`)})}async loadAvailableEditions(){try{const e=document.querySelector("#quick-edition-selector");if(!e)return;const t=await this.db.collection("settings").doc("editions").get();let i=[];if(t.exists){const e=t.data();i=e.editions||[]}if(0===i.length)i=[{id:1,name:"Edition 1",active:!0},{id:2,name:"Edition 2",active:!1},{id:3,name:"Edition 3",active:!1},{id:4,name:"Edition 4",active:!1},{id:"test",name:"Test Weeks",active:!1}],await this.db.collection("settings").doc("editions").set({editions:i,lastUpdated:new Date});else{let e=!1;[{id:1,name:"Edition 1",active:!0},{id:2,name:"Edition 2",active:!1},{id:3,name:"Edition 3",active:!1},{id:4,name:"Edition 4",active:!1},{id:"test",name:"Test Weeks",active:!1}].forEach(t=>{i.find(e=>e.id===t.id)||(i.push(t),e=!0)}),e&&(await this.db.collection("settings").doc("editions").set({editions:i,lastUpdated:new Date}),console.log("✅ Added missing editions to database"))}e.innerHTML="",i.forEach(t=>{const i=document.createElement("option");i.value=t.id,i.textContent=t.name,e.appendChild(i)}),console.log(`✅ Loaded ${i.length} editions`)}catch(e){console.error("❌ Error loading editions:",e)}}updateQuickEditionSelector(){const e=document.querySelector("#quick-edition-selector");e&&(e.value=this.currentActiveEdition,console.log(`✅ Updated edition selector to ${this.currentActiveEdition}`))}async saveQuickEditionChange(){try{const e=document.querySelector("#quick-edition-selector");if(!e)return;const t=e.value;if(t===this.currentActiveEdition)return;const i="test"===t?"test":parseInt(t);console.log(`🔧 Changing active edition from ${this.currentActiveEdition} to ${i}`),this.currentActiveEdition=i,void 0!==window.currentActiveEdition&&(window.currentActiveEdition=i),window.app&&(window.app.currentActiveEdition=i),await this.db.collection("settings").doc("currentActiveEdition").set({edition:i,lastUpdated:new Date}),console.log(`✅ Active edition changed to ${i}`),this.resetActiveWeekForNewEdition(i),e.disabled=!1,e.style.pointerEvents="auto",e.style.opacity="1",e.style.cursor="pointer",e.style.appearance="auto",e.style.webkitAppearance="auto",e.style.mozAppearance="auto",e.style.backgroundImage="none",e.style.backgroundRepeat="no-repeat",e.style.backgroundPosition="right 8px center",e.style.backgroundSize="12px auto",e.style.paddingRight="8px",console.log("✅ Edition selector remains interactive after change"),console.log("🔍 Selector state after change:",{disabled:e.disabled,style:e.style.cssText,className:e.className,value:e.value}),this.ensureSelectorInteractive(e),this.refreshDisplaysAfterEditionChange()}catch(e){console.error("❌ Error saving edition change:",e),alert("Error changing edition: "+e.message)}}refreshDisplaysAfterEditionChange(){console.log("🔧 Refreshing displays after edition change..."),this.updateActiveEditionDisplay(this.currentActiveEdition);const e=document.querySelector("#standings-table-container");if(e&&""!==e.innerHTML){const e=document.querySelector("#as-it-stands-btn");e&&e.click()}this.refreshOtherDisplays(),console.log("✅ Displays refreshed after edition change")}updateActiveEditionDisplay(e){const t=document.querySelector("#quick-edition-selector");t&&(t.value=e),document.querySelectorAll("[data-edition-display]").forEach(t=>{t.textContent=`Edition ${e}`}),console.log(`✅ Updated edition display to: ${e}`)}refreshOtherDisplays(){console.log("Refreshing other displays...")}initializeCompetitionSettings(){this.competitionSettingsInitialized?console.log("Competition settings already initialized, skipping..."):(console.log("Initializing competition settings..."),this.competitionSettingsInitialized=!0,this.loadCurrentCompetitionSettings(),this.setupCompetitionSettingsUI())}async loadCurrentCompetitionSettings(){try{console.log("Loading current competition settings...");const e=await this.db.collection("settings").doc("currentCompetition").get();if(e.exists){const t=e.data();this.updateCompetitionSettingsDisplay(t),console.log("✅ Competition settings loaded")}else console.log("No competition settings found, using defaults"),this.updateCompetitionSettingsDisplay(this.getDefaultCompetitionSettings())}catch(e){console.error("❌ Error loading competition settings:",e),this.updateCompetitionSettingsDisplay(this.getDefaultCompetitionSettings())}}getDefaultCompetitionSettings(){return{tiebreak_enabled:!1,registration_open:!1,registration_start_date:null,registration_end_date:null,current_gameweek:1,total_gameweeks:10,lives_per_player:2}}updateCompetitionSettingsDisplay(e){const t=document.querySelector("#tiebreak-enabled");t&&(t.checked=e.tiebreak_enabled||!1);const i=document.querySelector("#registration-open");i&&(i.checked=e.registration_open||!1);const n=document.querySelector("#registration-start-date");n&&e.registration_start_date&&(n.value=e.registration_start_date);const o=document.querySelector("#registration-end-date");o&&e.registration_end_date&&(o.value=e.registration_end_date);const s=document.querySelector("#current-gameweek");s&&(s.value=e.current_gameweek||1);const a=document.querySelector("#total-gameweeks");a&&(a.value=e.total_gameweeks||10);const r=document.querySelector("#lives-per-player");r&&(r.value=e.lives_per_player||2)}setupCompetitionSettingsUI(){console.log("🔧 Setting up competition settings UI...");const e=document.querySelector("#competition-settings-form");e&&e.addEventListener("submit",e=>this.saveCompetitionSettings(e)),this.setupActiveGameweekSelector(),this.setupQuickEditionSelector(),this.setupSettingsFieldHandlers(),console.log("✅ Competition settings UI setup complete")}setupSettingsFieldHandlers(){const e=document.querySelector("#tiebreak-enabled");e&&e.addEventListener("change",()=>this.handleTiebreakChange());const t=document.querySelector("#registration-open");t&&t.addEventListener("change",()=>this.handleRegistrationChange());const i=document.querySelector("#registration-start-date");i&&i.addEventListener("change",()=>this.handleDateChange());const n=document.querySelector("#registration-end-date");n&&n.addEventListener("change",()=>this.handleDateChange())}resetActiveWeekForNewEdition(e){console.log(`🔧 Resetting Active Week for new edition: ${e}`),this.currentActiveGameweek="1",void 0!==window.currentActiveGameweek&&(window.currentActiveGameweek="1"),window.app&&(window.app.currentActiveGameweek="1");const t=document.querySelector("#active-gameweek-select");t&&(t.value="1",console.log("✅ Reset Active Week selector to Week 1"));const i=document.querySelector("#current-gameweek");i&&(i.value="1",console.log("✅ Reset Competition Settings current gameweek to 1")),this.setDefaultGameweekSelection(),console.log(`✅ Active Week reset to 1 for edition: ${e}`)}handleTiebreakChange(){const e=document.querySelector("#tiebreak-enabled");if(e){const t=e.checked;console.log("Tiebreak "+(t?"enabled":"disabled")),this.updateTiebreakUI(t)}}handleRegistrationChange(){const e=document.querySelector("#registration-open");if(e){const t=e.checked;console.log("Registration "+(t?"opened":"closed")),this.updateRegistrationUI(t)}}handleDateChange(){const e=document.querySelector("#registration-start-date"),t=document.querySelector("#registration-end-date");if(e&&t){const i=e.value,n=t.value;i&&n&&new Date(i)>=new Date(n)&&(alert("Registration start date must be before end date"),t.value="")}}updateTiebreakUI(e){document.querySelectorAll("[data-tiebreak-dependent]").forEach(t=>{e?(t.style.display="",t.disabled=!1):(t.style.display="none",t.disabled=!0)})}updateRegistrationUI(e){document.querySelectorAll("[data-registration-dependent]").forEach(t=>{e?(t.style.display="",t.disabled=!1):(t.style.display="none",t.disabled=!0)})}async saveCompetitionSettings(e){e.preventDefault();try{console.log("🔧 Saving competition settings...");const e={tiebreak_enabled:document.querySelector("#tiebreak-enabled")?.checked||!1,registration_open:document.querySelector("#registration-open")?.checked||!1,registration_start_date:document.querySelector("#registration-start-date")?.value||null,registration_end_date:document.querySelector("#registration-end-date")?.value||null,current_gameweek:parseInt(document.querySelector("#current-gameweek")?.value)||1,total_gameweeks:parseInt(document.querySelector("#total-gameweeks")?.value)||10,lives_per_player:parseInt(document.querySelector("#lives-per-player")?.value)||2,lastUpdated:new Date};if(e.current_gameweek<1||e.current_gameweek>e.total_gameweeks)return void alert("Current gameweek must be between 1 and total gameweeks");if(e.lives_per_player<1||e.lives_per_player>5)return void alert("Lives per player must be between 1 and 5");await this.db.collection("settings").doc("currentCompetition").set(e),console.log("✅ Competition settings saved successfully"),alert("Competition settings saved successfully!"),this.currentActiveGameweek=e.current_gameweek.toString(),void 0!==window.currentActiveGameweek&&(window.currentActiveGameweek=e.current_gameweek.toString()),window.app&&(window.app.currentActiveGameweek=e.current_gameweek.toString()),this.refreshDisplaysAfterSettingsChange()}catch(e){console.error("❌ Error saving competition settings:",e),alert("Error saving settings: "+e.message)}}refreshDisplaysAfterSettingsChange(){console.log("🔧 Refreshing displays after settings change..."),this.updateGameweekDisplay(),this.updateOtherDisplays(),console.log("✅ Displays refreshed after settings change")}updateGameweekDisplay(){const e=document.querySelector("#current-gameweek-display");e&&(e.textContent=`Game Week ${this.currentActiveGameweek}`),document.querySelectorAll("[data-gameweek-display]").forEach(e=>{e.textContent=`Game Week ${this.currentActiveGameweek}`})}updateOtherDisplays(){console.log("Updating other displays...")}setDefaultSelection(){console.log("🔧 Setting default selection..."),this.currentActiveEdition=1,this.currentActiveGameweek="1",void 0!==window.currentActiveEdition&&(window.currentActiveEdition=1),void 0!==window.currentActiveGameweek&&(window.currentActiveGameweek="1"),window.app&&(window.app.currentActiveEdition=1,window.app.currentActiveGameweek="1"),console.log("✅ Default selection set")}ensureSelectorInteractive(e){if(!e)return;let t=0;const i=setInterval(()=>{t++;const n=window.getComputedStyle(e),o=e.disabled,s=e.style.pointerEvents||n.pointerEvents,a=e.style.opacity||n.opacity,r=e.style.cursor||n.cursor,l=e.style.display||n.display,c=e.style.visibility||n.visibility,d=e.style.appearance||n.appearance,u=e.style.webkitAppearance||n.webkitAppearance,g=e.style.mozAppearance||n.mozAppearance;if(console.log(`🔍 Selector state check ${t}:`),console.log(`  - disabled: ${o}`),console.log(`  - pointerEvents: ${s}`),console.log(`  - opacity: ${a}`),console.log(`  - cursor: ${r}`),console.log(`  - display: ${l}`),console.log(`  - visibility: ${c}`),console.log(`  - appearance: ${d}`),console.log(`  - webkitAppearance: ${u}`),console.log(`  - mozAppearance: ${g}`),console.log(`  - style.cssText: ${e.style.cssText}`),console.log(`  - className: ${e.className}`),console.log(`  - tagName: ${e.tagName}`),console.log(`  - type: ${e.type}`),console.log(`  - computed classes: ${e.classList.toString()}`),console.log(`  - parent element: ${e.parentElement?.tagName} ${e.parentElement?.className}`),(e.disabled||"none"===e.style.pointerEvents||"0"===e.style.opacity)&&(console.log(`🔄 Selector became non-interactive (check ${t}), re-enabling...`),e.disabled=!1,e.style.pointerEvents="auto",e.style.opacity="1",e.style.cursor="pointer"),"auto"===e.style.appearance&&"auto"===e.style.webkitAppearance||(console.log(`🔄 Forcing dropdown appearance (check ${t})...`),e.style.appearance="auto",e.style.webkitAppearance="auto",e.style.mozAppearance="auto",e.style.backgroundImage="none",e.style.backgroundRepeat="no-repeat",e.style.backgroundPosition="right 8px center",e.style.backgroundSize="12px auto",e.style.paddingRight="8px"),("var(--alty-yellow)"===e.style.backgroundColor||"center"===e.style.textAlign||"8px"===e.style.borderRadius||"12px"===e.style.borderRadius||"16px"===e.style.borderRadius||"20px"===e.style.borderRadius||"24px"===e.style.borderRadius)&&(console.log(`⚠️ Selector has button-like styling (check ${t}), resetting to dropdown...`),console.log("🔍 Button-like properties detected:",{backgroundColor:e.style.backgroundColor,textAlign:e.style.textAlign,borderRadius:e.style.borderRadius}),e.style.borderRadius="4px",e.style.backgroundColor="white",e.style.textAlign="left",e.style.border="1px solid #ccc",e.style.padding="4px 30px 4px 8px",e.style.cursor="pointer",e.style.appearance="auto",e.style.webkitAppearance="auto",e.style.mozAppearance="auto"),"SELECT"!==e.tagName){console.log(`⚠️ Element is no longer a SELECT element! Current tagName: ${e.tagName}`);const t=document.querySelector("#quick-edition-selector");t&&"SELECT"===t.tagName&&(console.log("🔄 Found original SELECT element, switching back..."),e=t)}t>=20&&(clearInterval(i),console.log("✅ Selector interactive state monitoring completed"))},100)}cleanup(){console.log("🧹 Scheduling cleanup completed")}}class m{constructor(e){this.db=e,this.auditLogs=[],this.monitoringActive=!1}initializeAudit(){console.log("🔧 Initializing audit functionality..."),this.setupAuditMonitoring(),this.setupAuditLogViewing(),console.log("✅ Audit functionality initialized")}setupAuditMonitoring(){console.log("🔧 Setting up audit monitoring..."),this.startActionMonitoring(),this.setupPeriodicAuditChecks(),console.log("✅ Audit monitoring setup complete")}startActionMonitoring(){this.monitoringActive=!0,console.log("✅ Action monitoring started"),this.monitorDOMChanges(),this.monitorFirebaseOperations()}monitorDOMChanges(){console.log("🔧 DOM change monitoring active")}monitorFirebaseOperations(){console.log("🔧 Firebase operation monitoring active")}setupPeriodicAuditChecks(){setInterval(()=>{this.runAuditChecks()},36e5),console.log("✅ Periodic audit checks scheduled")}async runAuditChecks(){try{console.log("🔧 Running audit checks..."),await this.checkForSuspiciousActivity(),await this.checkForUnauthorizedAccess(),await this.generateAuditReport(),console.log("✅ Audit checks completed")}catch(e){console.error("❌ Error running audit checks:",e)}}async checkForSuspiciousActivity(){try{console.log("🔧 Checking for suspicious activity...");const e=await this.getRecentAdminActions(5);e.length>10&&(console.warn("⚠️ High volume of admin actions detected"),await this.logSuspiciousActivity("High volume of admin actions",e));const t=await this.checkUnusualTimePatterns();t.length>0&&(console.warn("⚠️ Unusual time pattern detected"),await this.logSuspiciousActivity("Unusual time pattern",t)),console.log("✅ Suspicious activity check completed")}catch(e){console.error("❌ Error checking for suspicious activity:",e)}}async checkForUnauthorizedAccess(){try{console.log("🔧 Checking for unauthorized access...");const e=await this.getFailedLoginAttempts(10);e.length>5&&(console.warn("⚠️ Multiple failed login attempts detected"),await this.logSecurityEvent("Multiple failed login attempts",e));const t=await this.checkUnusualAccessLocations();t.length>0&&(console.warn("⚠️ Unusual access location detected"),await this.logSecurityEvent("Unusual access location",t)),console.log("✅ Unauthorized access check completed")}catch(e){console.error("❌ Error checking for unauthorized access:",e)}}async generateAuditReport(){try{console.log("🔧 Generating audit report...");const e={timestamp:new Date,period:"1 hour",totalActions:0,suspiciousActivities:0,securityEvents:0,recommendations:[]},t=await this.getAdminActions(60);e.totalActions=t.length;const i=await this.getSuspiciousActivities(60);e.suspiciousActivities=i.length;const n=await this.getSecurityEvents(60);e.securityEvents=n.length,e.recommendations=this.generateRecommendations(e),await this.saveAuditReport(e),console.log("✅ Audit report generated and saved")}catch(e){console.error("❌ Error generating audit report:",e)}}generateRecommendations(e){const t=[];return e.suspiciousActivities>5&&t.push("Consider implementing rate limiting for admin actions"),e.securityEvents>3&&t.push("Review access control policies and consider additional security measures"),e.totalActions>100&&t.push("Monitor admin activity patterns for potential automation"),t}async saveAuditReport(e){try{await this.db.collection("auditReports").add({...e,timestamp:new Date,generatedBy:"system"}),console.log("✅ Audit report saved to database")}catch(e){console.error("❌ Error saving audit report:",e)}}async getRecentAdminActions(e){try{const t=new Date(Date.now()-60*e*1e3),i=await this.db.collection("auditLogs").where("timestamp",">=",t).orderBy("timestamp","desc").get(),n=[];return i.forEach(e=>{n.push({id:e.id,...e.data()})}),n}catch(e){return console.error("Error getting recent admin actions:",e),[]}}async getAdminActions(e){try{const t=new Date(Date.now()-60*e*1e3),i=await this.db.collection("auditLogs").where("timestamp",">=",t).orderBy("timestamp","desc").get(),n=[];return i.forEach(e=>{n.push({id:e.id,...e.data()})}),n}catch(e){return console.error("Error getting admin actions:",e),[]}}async getFailedLoginAttempts(e){try{const t=new Date(Date.now()-60*e*1e3),i=await this.db.collection("loginAttempts").where("timestamp",">=",t).where("success","==",!1).orderBy("timestamp","desc").get(),n=[];return i.forEach(e=>{n.push({id:e.id,...e.data()})}),n}catch(e){return console.error("Error getting failed login attempts:",e),[]}}async checkUnusualTimePatterns(){try{const e=(new Date).getHours();return e>=1&&e<=5?(await this.getAdminActions(60)).filter(e=>{const t=e.timestamp?.toDate?.()?.getHours()||new Date(e.timestamp).getHours();return t>=1&&t<=5}):[]}catch(e){return console.error("Error checking unusual time patterns:",e),[]}}async checkUnusualAccessLocations(){try{return[]}catch(e){return console.error("Error checking unusual access locations:",e),[]}}async getSuspiciousActivities(e){try{const t=new Date(Date.now()-60*e*1e3),i=await this.db.collection("suspiciousActivities").where("timestamp",">=",t).orderBy("timestamp","desc").get(),n=[];return i.forEach(e=>{n.push({id:e.id,...e.data()})}),n}catch(e){return console.error("Error getting suspicious activities:",e),[]}}async getSecurityEvents(e){try{const t=new Date(Date.now()-60*e*1e3),i=await this.db.collection("securityEvents").where("timestamp",">=",t).orderBy("timestamp","desc").get(),n=[];return i.forEach(e=>{n.push({id:e.id,...e.data()})}),n}catch(e){return console.error("Error getting security events:",e),[]}}async logSuspiciousActivity(e,t){try{await this.db.collection("suspiciousActivities").add({type:e,details:t,timestamp:new Date,severity:"medium"}),console.log(`✅ Suspicious activity logged: ${e}`)}catch(e){console.error("❌ Error logging suspicious activity:",e)}}async logSecurityEvent(e,t){try{await this.db.collection("securityEvents").add({type:e,details:t,timestamp:new Date,severity:"high"}),console.log(`✅ Security event logged: ${e}`)}catch(e){console.error("❌ Error logging security event:",e)}}async logAdminAction(e,t,i=null){try{const n={action:e,details:t,userId:i,timestamp:new Date,ipAddress:await this.getClientIP(),userAgent:navigator.userAgent};await this.db.collection("auditLogs").add(n),this.auditLogs.push(n),this.auditLogs.length>1e3&&(this.auditLogs=this.auditLogs.slice(-1e3)),console.log(`✅ Admin action logged: ${e}`)}catch(e){console.error("❌ Error logging admin action:",e)}}async getClientIP(){try{return"unknown"}catch(e){return console.error("Error getting client IP:",e),"unknown"}}setupAuditLogViewing(){console.log("🔧 Setting up audit log viewing..."),this.setupAuditLogDisplay(),this.setupAuditLogExport(),console.log("✅ Audit log viewing setup complete")}setupAuditLogDisplay(){if(!document.querySelector("#audit-log-container"))return void console.log("Audit log container not found");const e=document.querySelector("#refresh-audit-logs");e&&e.addEventListener("click",()=>this.refreshAuditLogs()),this.setupAuditLogFilters(),this.loadAuditLogs()}setupAuditLogFilters(){if(!document.querySelector("#audit-log-filters"))return;const e=document.querySelector("#action-type-filter");e&&e.addEventListener("change",()=>this.filterAuditLogs());const t=document.querySelector("#date-range-filter");t&&t.addEventListener("change",()=>this.filterAuditLogs());const i=document.querySelector("#user-filter");i&&i.addEventListener("change",()=>this.filterAuditLogs())}setupAuditLogExport(){const e=document.querySelector("#export-audit-logs");e&&e.addEventListener("click",()=>this.exportAuditLogs())}async loadAuditLogs(){try{console.log("🔧 Loading audit logs...");const e=await this.db.collection("auditLogs").orderBy("timestamp","desc").limit(100).get(),t=[];e.forEach(e=>{t.push({id:e.id,...e.data()})}),this.displayAuditLogs(t)}catch(e){console.error("❌ Error loading audit logs:",e),alert("Error loading audit logs: "+e.message)}}displayAuditLogs(e){const t=document.querySelector("#audit-log-list");if(!t)return;if(!e||0===e.length)return void(t.innerHTML="<p>No audit logs found</p>");let i='\n            <table class="audit-log-table">\n                <thead>\n                    <tr>\n                        <th>Timestamp</th>\n                        <th>Action</th>\n                        <th>User</th>\n                        <th>Details</th>\n                        <th>IP Address</th>\n                    </tr>\n                </thead>\n                <tbody>\n        ';e.forEach(e=>{const t=e.timestamp?.toDate?.()||e.timestamp||new Date,n=t.toLocaleDateString("en-GB")+" "+t.toLocaleTimeString();i+=`\n                <tr>\n                    <td>${n}</td>\n                    <td>${e.action||"Unknown"}</td>\n                    <td>${e.userId||"System"}</td>\n                    <td>${e.details||"No details"}</td>\n                    <td>${e.ipAddress||"Unknown"}</td>\n                </tr>\n            `}),i+="\n                </tbody>\n            </table>\n        ",t.innerHTML=i}async refreshAuditLogs(){await this.loadAuditLogs()}async filterAuditLogs(){try{const e=document.querySelector("#action-type-filter")?.value,t=document.querySelector("#date-range-filter")?.value,i=document.querySelector("#user-filter")?.value;let n=this.db.collection("auditLogs").orderBy("timestamp","desc");if(e&&"all"!==e&&(n=n.where("action","==",e)),i&&"all"!==i&&(n=n.where("userId","==",i)),t&&"all"!==t){const e=this.getDateCutoff(t);n=n.where("timestamp",">=",e)}const o=await n.limit(100).get(),s=[];o.forEach(e=>{s.push({id:e.id,...e.data()})}),this.displayAuditLogs(s)}catch(e){console.error("❌ Error filtering audit logs:",e)}}getDateCutoff(e){const t=new Date;switch(e){case"1h":return new Date(t.getTime()-36e5);case"24h":return new Date(t.getTime()-864e5);case"7d":return new Date(t.getTime()-6048e5);case"30d":return new Date(t.getTime()-2592e6);default:return new Date(0)}}async exportAuditLogs(){try{console.log("🔧 Exporting audit logs...");const e=await this.db.collection("auditLogs").orderBy("timestamp","desc").limit(1e3).get(),t=[];e.forEach(e=>{t.push({id:e.id,...e.data()})});const i=this.logsToCSV(t),n=new Blob([i],{type:"text/csv"}),o=window.URL.createObjectURL(n),s=document.createElement("a");s.href=o,s.download=`audit-logs-${(new Date).toISOString().split("T")[0]}.csv`,s.click(),window.URL.revokeObjectURL(o),console.log("✅ Audit logs exported successfully")}catch(e){console.error("❌ Error exporting audit logs:",e),alert("Error exporting audit logs: "+e.message)}}logsToCSV(e){const t=[["Timestamp","Action","User ID","Details","IP Address","User Agent"].join(",")];return e.forEach(e=>{const i=e.timestamp?.toDate?.()||e.timestamp||new Date,n=[i.toLocaleDateString("en-GB")+" "+i.toLocaleTimeString(),e.action||"",e.userId||"",(e.details||"").replace(/"/g,'""'),e.ipAddress||"",(e.userAgent||"").replace(/"/g,'""')].map(e=>`"${e}"`).join(",");t.push(n)}),t.join("\n")}stopMonitoring(){this.monitoringActive=!1,console.log("✅ Action monitoring stopped")}cleanup(){console.log("🧹 Audit cleanup completed"),this.stopMonitoring()}}class h{constructor(e,t=null,i=null){this.db=e,this.fixturesManager=t,this.scoresManager=i,this.userManagement=new d(e),this.teamOperations=new u(e),this.scheduling=new g(e),this.audit=new m(e),this.adminManagementInitialized=!1,this.adminDashboardInitialized=!1,this.adminTabsInitialized=!1,this.fixtureManagementInitialized=!1,this.registrationManagementInitialized=!1,this.competitionSettingsInitialized=!1,this.eventListenersInitialized=!1,this.playerManagementEventListenersInitialized=!1,this.currentActiveEdition=1,this.currentActiveGameweek="1",this.updateCurrentActiveEdition=e=>{this.currentActiveEdition=e,this.userManagement.updateCurrentActiveEdition(e),this.teamOperations.updateCurrentActiveEdition(e),this.scheduling.updateCurrentActiveEdition(e),console.log(`AdminManager: Updated currentActiveEdition to ${e}`)},this.updateCurrentActiveGameweek=e=>{this.currentActiveGameweek=e,this.teamOperations.updateCurrentActiveGameweek(e),this.scheduling.updateCurrentActiveGameweek(e),console.log(`AdminManager: Updated currentActiveGameweek to ${e}`)}}initializeAdminManagement(){this.adminManagementInitialized?console.log("Admin management already initialized, skipping..."):(console.log("Initializing admin management..."),this.adminManagementInitialized=!0)}initializeAdminPage(){console.log("🚀 Initializing admin page..."),this.scheduling.initializeCompetitionSettings(),this.buildAdminDashboard(),this.setupEventListeners(),this.ensureSaveSettingsButtonReady(),this.initializeAdminApiIntegration(),this.audit.initializeAudit(),this.initializePlayerPicksV2(),console.log("✅ Admin page initialization complete")}initializePlayerPicksV2(){console.log("🚀 Initializing Player Picks v2...");const e=document.querySelector("#picks-v2-edition-select"),t=document.querySelector("#picks-v2-gameweek-select"),i=document.querySelector("#picks-v2-refresh-btn"),n=document.querySelector("#picks-v2-export-btn");e&&t&&i?(e.addEventListener("change",()=>this.loadPlayerPicksV2()),t.addEventListener("change",()=>this.loadPlayerPicksV2()),i.addEventListener("click",()=>this.loadPlayerPicksV2()),n.addEventListener("click",()=>this.exportPlayerPicksV2()),this.loadPlayerPicksV2(),console.log("✅ Player Picks v2 initialized")):console.error("❌ Player Picks v2 elements not found")}async loadPlayerPicksV2(){console.log("🔄 Loading Player Picks v2...");const e=document.querySelector("#picks-v2-edition-select"),t=document.querySelector("#picks-v2-gameweek-select"),i=document.querySelector("#picks-v2-table-body"),n=document.querySelector("#picks-v2-loading");if(!e||!t||!i)return void console.error("❌ Player Picks v2 elements not found");const o=e.value,s=t.value;n.style.display="block",i.innerHTML="";try{console.log(`🔍 Fetching picks for edition: ${o}, gameweek: ${s}`);const e=this.db.collection("picks").where("edition","==",o).where("gameweek","==",s).where("isActive","==",!0),t=await e.get();console.log(`✅ Found ${t.size} picks`),this.updatePlayerPicksV2Stats(t),this.renderPlayerPicksV2Table(t,i)}catch(e){console.error("❌ Error loading Player Picks v2:",e),i.innerHTML=`\n                <tr>\n                    <td colspan="5" class="text-center text-danger">\n                        Error loading picks: ${e.message}\n                    </td>\n                </tr>\n            `}finally{n.style.display="none"}}updatePlayerPicksV2Stats(e){const t=document.querySelector("#picks-v2-total-count"),i=document.querySelector("#picks-v2-players-count"),n=document.querySelector("#picks-v2-teams-count");if(!t||!i||!n)return;const o=e.docs.map(e=>e.data()),s=new Set(o.map(e=>e.userId)).size,a=new Set(o.map(e=>e.teamPicked)).size;t.textContent=e.size,i.textContent=s,n.textContent=a}renderPlayerPicksV2Table(e,t){if(e.empty)return void(t.innerHTML='\n                <tr>\n                    <td colspan="5" class="text-center text-muted">\n                        No picks found for this edition and game week\n                    </td>\n                </tr>\n            ');const i=e.docs.map(e=>{const t=e.data();return`\n                <tr>\n                    <td>\n                        <strong>${t.userFirstName} ${t.userSurname}</strong>\n                    </td>\n                    <td>\n                        <span class="team-badge">${t.teamPicked}</span>\n                    </td>\n                    <td>${t.gameweek}</td>\n                    <td>${t.edition}</td>\n                    <td>\n                        <span class="status-badge status-active">Active</span>\n                    </td>\n                </tr>\n            `}).join("");t.innerHTML=i}exportPlayerPicksV2(){console.log("📤 Exporting Player Picks v2...");const e=document.querySelector("#picks-v2-edition-select"),t=document.querySelector("#picks-v2-gameweek-select");if(!e||!t)return;const i=e.value,n=t.value;alert(`Export functionality for ${i} - Game Week ${n} would be implemented here.`)}ensureSaveSettingsButtonReady(){console.log("🔧 Ensuring Save Settings button is ready...");const e=document.querySelector("#save-settings-btn");e?(e.disabled=!1,e.style.pointerEvents="auto",e.style.opacity="1",e.style.cursor="pointer",e.style.backgroundColor="var(--alty-yellow)",e.style.color="var(--dark-text)",e.classList.remove("disabled"),e.removeAttribute("disabled"),e.removeEventListener("click",e=>this.scheduling.saveCompetitionSettings(e)),e.addEventListener("click",e=>this.scheduling.saveCompetitionSettings(e)),console.log("✅ Save Settings button is ready and enabled"),console.log("Button disabled state:",e.disabled),console.log("Button pointer-events:",e.style.pointerEvents),console.log("Button opacity:",e.style.opacity),console.log("Button cursor:",e.style.cursor),console.log("Button background color:",e.style.backgroundColor),console.log("Button text color:",e.style.textColor),console.log("Button classes:",e.className),console.log("Button attributes:",Array.from(e.attributes).map(e=>`${e.name}="${e.value}"`))):console.error("Save Settings button not found")}setupEventListeners(){this.eventListenersInitialized?console.log("🔧 Event listeners already initialized, skipping..."):(console.log("🔧 Setting up admin management event listeners..."),this.setupSettingsEventListeners(),this.setupApiSuspensionEventListeners(),this.scheduling.setupQuickEditionSelector(),this.teamOperations.setupAsItStandsFunctionality(),this.setupAdminTabs(),this.setupPlayerManagementEventListeners(),this.eventListenersInitialized=!0,console.log("✅ Admin management event listeners setup complete"))}setupSettingsEventListeners(){console.log("🔧 Setting up settings event listeners..."),this.setupSaveSettingsButtonMonitoring(),console.log("✅ Settings event listeners setup complete")}setupApiSuspensionEventListeners(){if(console.log("🔧 Setting up API suspension event listeners..."),!document.querySelector("#api-suspension-container"))return void console.log("API suspension container not found");this.loadApiSuspensionSettings();const e=document.querySelector("#api-suspension-form");e&&e.addEventListener("submit",e=>this.saveApiSuspensionSettings(e)),console.log("✅ API suspension event listeners setup complete")}setupSaveSettingsButtonMonitoring(){console.log("🔧 Setting up save settings button monitoring...");const e=document.querySelector("#competition-settings-form");e&&e.querySelectorAll("input, select, textarea").forEach(e=>{e.addEventListener("change",()=>{this.enableSaveSettingsButton()}),e.addEventListener("input",()=>{this.enableSaveSettingsButton()})}),console.log("✅ Save settings button monitoring setup complete")}setupPlayerManagementEventListeners(){if(this.playerManagementEventListenersInitialized)return void console.log("🔧 Player management event listeners already initialized, skipping...");console.log("🔧 Setting up player management event listeners...");const e=document.querySelector("#total-registrations-card"),t=document.querySelector("#current-edition-card"),i=document.querySelector("#archived-players-card");if(e){const t=e.cloneNode(!0);e.parentNode.replaceChild(t,e),t.addEventListener("click",()=>{this.userManagement.showPlayerManagement("total")})}if(t){const e=t.cloneNode(!0);t.parentNode.replaceChild(e,t),e.addEventListener("click",()=>{this.userManagement.showPlayerManagement("current")})}if(i){const e=i.cloneNode(!0);i.parentNode.replaceChild(e,i),e.addEventListener("click",()=>{this.userManagement.showPlayerManagement("archived")})}const n=document.querySelector("#check-orphaned-accounts");n&&n.addEventListener("click",()=>{this.userManagement.checkOrphanedAccounts()});const o=document.querySelector("#firebase-auth-help");o&&o.addEventListener("click",()=>{this.userManagement.showFirebaseAuthDeletionInstructions()});const s=document.querySelector("#close-player-management");s&&s.addEventListener("click",()=>{this.userManagement.closePlayerManagement()});const a=document.querySelector("#search-players-btn");a&&a.addEventListener("click",()=>{this.userManagement.searchPlayers()});const r=document.querySelector("#close-player-edit");r&&r.addEventListener("click",()=>{this.userManagement.closePlayerEdit()});const l=document.querySelector("#cancel-player-edit");l&&l.addEventListener("click",()=>{this.userManagement.closePlayerEdit()});const c=document.querySelector("#reload-page-btn");c&&c.addEventListener("click",()=>{location.reload()}),this.playerManagementEventListenersInitialized=!0,console.log("✅ Player management event listeners setup complete")}enableSaveSettingsButton(){const e=document.querySelector("#save-settings-btn");e&&(e.disabled=!1,e.style.opacity="1",e.style.cursor="pointer",e.classList.remove("disabled"))}async loadApiSuspensionSettings(){try{console.log("Loading API suspension settings...");const e=await this.db.collection("settings").doc("apiSuspension").get();if(e.exists){const t=e.data();this.updateApiSuspensionDisplay(t),console.log("✅ API suspension settings loaded")}else console.log("No API suspension settings found, using defaults"),this.updateApiSuspensionDisplay({footballWebPages:!1,theSportsDb:!1,reason:"",suspendedUntil:null})}catch(e){console.error("❌ Error loading API suspension settings:",e),this.updateApiSuspensionDisplay({footballWebPages:!1,theSportsDb:!1,reason:"",suspendedUntil:null})}}updateApiSuspensionDisplay(e){const t=document.querySelector("#football-web-pages-suspended");t&&(t.checked=e.footballWebPages||!1);const i=document.querySelector("#the-sports-db-suspended");i&&(i.checked=e.theSportsDb||!1);const n=document.querySelector("#api-suspension-reason");n&&(n.value=e.reason||"");const o=document.querySelector("#api-suspended-until");o&&e.suspendedUntil&&(o.value=e.suspendedUntil)}async saveApiSuspensionSettings(e){e&&e.preventDefault();try{console.log("🔧 Saving API suspension settings...");const e={footballWebPages:document.querySelector("#football-web-pages-suspended")?.checked||!1,theSportsDb:document.querySelector("#the-sports-db-suspended")?.checked||!1,reason:document.querySelector("#api-suspension-reason")?.value||"",suspendedUntil:document.querySelector("#api-suspended-until")?.value||null,lastUpdated:new Date};await this.db.collection("settings").doc("apiSuspension").set(e),console.log("✅ API suspension settings saved successfully"),alert("API suspension settings saved successfully!"),await this.audit.logAdminAction("API suspension settings updated",e)}catch(e){console.error("❌ Error saving API suspension settings:",e),alert("Error saving API suspension settings: "+e.message)}}async isApiSuspended(e){try{const t=await this.db.collection("settings").doc("apiSuspension").get();if(t.exists){const i=t.data();if("footballWebPages"===e&&i.footballWebPages)return this.checkSuspensionExpiry(i.suspendedUntil);if("theSportsDb"===e&&i.theSportsDb)return this.checkSuspensionExpiry(i.suspendedUntil)}return!1}catch(e){return console.error("Error checking API suspension status:",e),!1}}checkSuspensionExpiry(e){if(!e)return!0;const t=new Date(e);return new Date<t}buildAdminDashboard(e){console.log("🔧 Building admin dashboard...");const t=document.querySelector("#admin-dashboard");t?(this.buildDashboardContent(t,e),console.log("✅ Admin dashboard built successfully")):console.error("Admin dashboard container not found")}buildDashboardContent(e,t){console.log("Building dashboard content...")}async loadRegistrationData(){try{console.log("🔧 Loading registration data..."),this.initializeRegistrationSettingsForAdmin(),window.registrationManager&&await window.registrationManager.loadRegistrationSettings(),await this.loadRegistrationStatistics(),window.registrationManager&&await window.registrationManager.loadAllEditionsOverview(),console.log("✅ Registration data loaded successfully")}catch(e){console.error("❌ Error loading registration data:",e)}}initializeRegistrationSettingsForAdmin(){try{console.log("🔧 Initializing registration settings for admin page...");const e=document.querySelector("#save-registration-settings");if(e){const t=e.cloneNode(!0);e.parentNode.replaceChild(t,e),t.addEventListener("click",async()=>{window.registrationManager&&(await window.registrationManager.saveRegistrationSettings(),window.registrationManager&&await window.registrationManager.loadAllEditionsOverview(),await this.loadRegistrationStatistics())}),console.log("✅ Save registration settings button initialized")}const t=document.querySelector("#refresh-registration-stats");if(t){const e=t.cloneNode(!0);t.parentNode.replaceChild(e,t),e.addEventListener("click",async()=>{await this.refreshRegistrationStatistics()}),console.log("✅ Refresh registration stats button initialized")}console.log("✅ Registration settings for admin page initialized successfully")}catch(e){console.error("❌ Error initializing registration settings for admin page:",e)}}async refreshRegistrationStatistics(){try{console.log("🔄 Refreshing registration statistics for edition change..."),await this.loadRegistrationStatistics()}catch(e){console.error("❌ Error refreshing registration statistics:",e)}}async loadRegistrationStatistics(){try{console.log("🔧 Loading registration statistics...");const e=await this.db.collection("users").get(),t=this.getCurrentActiveEdition();let i=0,n=0,o=0;console.log(`🔍 Checking ${e.size} users for active status...`),e.forEach(e=>{const s=e.data(),a=s.displayName||s.firstName||"Unknown",r=s.status,l=!r||"active"===r.toLowerCase();console.log(`👤 ${a}: status="${r}", isActive=${l}`),l?(i++,s.registrations&&s.registrations[`edition${t}`]?(n++,console.log(`✅ ${a} counted for current edition (${t})`)):console.log(`⏭️ ${a} active but not registered for current edition (${t})`)):"archived"===s.status?(o++,console.log(`📦 ${a} is archived`)):console.log(`❌ ${a} not active (status: "${r}")`)});const s=document.querySelector("#total-registrations"),a=document.querySelector("#current-edition-registrations"),r=document.querySelector("#archived-players-count");s&&(s.textContent=i),a&&(a.textContent=n),r&&(r.textContent=o),console.log(`✅ Registration statistics loaded: ${i} active, ${n} current edition (${t}), ${o} archived`)}catch(e){console.error("❌ Error loading registration statistics:",e)}}getCurrentActiveEdition(){const e=document.querySelector("#edition-selector");return e?e.value:window.currentActiveEdition?window.currentActiveEdition:1}setupAdminTabs(){console.log("🔧 Setting up admin tabs..."),document.querySelector("#admin-tabs")?(this.setupTabSwitching(),this.setupTabContent(),console.log("✅ Admin tabs setup complete")):console.log("Admin tabs container not found")}setupTabSwitching(){const e=document.querySelectorAll(".admin-tab");document.querySelectorAll(".admin-tab-content"),e.forEach(e=>{e.addEventListener("click",()=>{const t=e.getAttribute("data-tab");this.switchTab(t)})})}switchTab(e){document.querySelectorAll(".admin-tab-content").forEach(e=>{e.style.display="none"}),document.querySelectorAll(".admin-tab").forEach(e=>{e.classList.remove("active")});const t=document.querySelector(`#${e}-content`);t&&(t.style.display="block");const i=document.querySelector(`[data-tab="${e}"]`);i&&i.classList.add("active"),this.loadTabContent(e)}loadTabContent(e){switch(e){case"user-management":this.userManagement.showPlayerManagement("total");break;case"team-operations":this.teamOperations.loadStandings();break;case"scheduling":this.scheduling.loadCurrentCompetitionSettings();break;case"audit":this.audit.loadAuditLogs();break;default:console.log(`No specific content for tab: ${e}`)}}setupTabContent(){this.switchTab("user-management")}initializeFixtureManagement(){this.fixtureManagementInitialized?console.log("Fixture management already initialized, skipping..."):(console.log("Initializing fixture management..."),this.fixtureManagementInitialized=!0,this.setupFixtureManagementEventListeners(),console.log("✅ Fixture management initialized"))}setupFixtureManagementEventListeners(){console.log("🔧 Setting up fixture management event listeners...");const e=document.querySelector("#add-fixture-btn");e&&e.addEventListener("click",()=>this.fixturesManager.addFixtureRow());const t=document.querySelector("#save-fixtures-btn");t&&t.addEventListener("click",()=>this.fixturesManager.saveFixtures());const i=document.querySelector("#check-fixtures-btn");i&&i.addEventListener("click",()=>this.fixturesManager.checkFixtures()),console.log("✅ Fixture management event listeners setup complete")}initializeRegistrationManagement(){this.registrationManagementInitialized?console.log("Registration management already initialized, skipping..."):(console.log("Initializing registration management..."),this.registrationManagementInitialized=!0,this.setupRegistrationManagement(),console.log("✅ Registration management initialized"))}setupRegistrationManagement(){console.log("🔧 Setting up registration management..."),console.log("✅ Registration management setup complete")}initializeAdminApiIntegration(){console.log("🔧 Initializing admin API integration..."),this.setupImportButtonEventListeners(),console.log("✅ Admin API integration initialized")}setupImportButtonEventListeners(){console.log("🔧 Setting up import button event listeners...");const e=document.querySelector("#select-all-fixtures-btn");e&&(e.addEventListener("click",()=>{window.app&&window.app.apiManager&&window.app.apiManager.footballWebPagesAPI&&window.app.apiManager.footballWebPagesAPI.selectAllFixtures()}),console.log("✅ Select All Fixtures button event listener attached"));const t=document.querySelector("#deselect-all-fixtures-btn");t&&(t.addEventListener("click",()=>{window.app&&window.app.apiManager&&window.app.apiManager.footballWebPagesAPI&&window.app.apiManager.footballWebPagesAPI.deselectAllFixtures()}),console.log("✅ Deselect All Fixtures button event listener attached"));const i=document.querySelector("#import-selected-fixtures-btn");i&&(i.addEventListener("click",async()=>{window.app&&window.app.apiManager&&window.app.apiManager.footballWebPagesAPI&&await window.app.apiManager.footballWebPagesAPI.importSelectedFixtures()}),console.log("✅ Import Selected Fixtures button event listener attached")),console.log("✅ Import button event listeners setup complete")}initializeEnhancedVidiprinter(){console.log("🔧 Initializing enhanced vidiprinter..."),console.log("✅ Enhanced vidiprinter initialized")}async startEnhancedVidiprinter(){console.log("🔧 Starting enhanced vidiprinter..."),console.log("✅ Enhanced vidiprinter started")}stopEnhancedVidiprinter(){console.log("🔧 Stopping enhanced vidiprinter..."),console.log("✅ Enhanced vidiprinter stopped")}clearEnhancedVidiprinterFeed(){console.log("🔧 Clearing enhanced vidiprinter feed..."),console.log("✅ Enhanced vidiprinter feed cleared")}async resetTestLives(){if(confirm("Are you sure you want to reset all TEST EDITION players to 2 lives? This will only affect players in the test edition."))try{const e=document.querySelector("#reset-status");e&&(e.textContent="Resetting test players...",e.style.color="#007bff");const t=await this.db.collection("users").get(),i=this.db.batch();let n=0,o=0;console.log("🔍 Checking users for test edition reset..."),t.forEach(e=>{const t=e.data(),s=t.displayName||t.firstName||"Unknown",a=t.registrations&&t.registrations.editiontest;console.log(`👤 ${s}: status=${t.status}, registrations.editiontest=${a}`),"active"===t.status&&a?(i.update(e.ref,{lives:2,lastUpdated:new Date}),n++,console.log(`✅ Will reset ${s} to 2 lives`)):(o++,console.log(`⏭️ Skipping ${s} - not active or not in test edition`))}),await i.commit(),e?(e.textContent=`✅ Reset ${n} test edition players to 2 lives successfully! (Skipped ${o})`,e.style.color="#28a745"):alert(`✅ Reset ${n} test edition players to 2 lives successfully! (Skipped ${o})`),console.log(`✅ Reset ${n} test edition players to 2 lives (Skipped ${o})`)}catch(e){console.error("Error resetting test player lives:",e);const t=document.querySelector("#reset-status");t?(t.textContent=`❌ Error: ${e.message}`,t.style.color="#dc3545"):alert("Error resetting test player lives: "+e.message)}}cleanup(){console.log("🧹 AdminManager cleanup started"),this.userManagement.cleanup(),this.teamOperations.cleanup(),this.scheduling.cleanup(),this.audit.cleanup(),console.log("🧹 AdminManager cleanup completed")}}const p=class{constructor(){this.db=null,this.databaseInitialized=!1,this.adminSessionMonitoring=null,this.adminTokenRefresh=null,this.realTimeScoreUpdates=null,this.enhancedVidiprinter=null,this.deadlineChecker=null}initializeDatabaseManager(){this.databaseInitialized?console.log("Database manager already initialized, skipping..."):(console.log("Initializing database manager..."),this.databaseInitialized=!0,this.initializeDatabase(),this.setupEventListeners())}initializeDatabase(){window.db?(this.db=window.db,console.log("Database reference initialized")):(console.warn("Database not available yet, retrying in 100ms"),setTimeout(()=>this.initializeDatabase(),100))}checkAndInitializeDatabase(){window.db&&!this.db&&(this.db=window.db,console.log("Database reference initialized in checkAndInitializeDatabase"))}setupEventListeners(){document.addEventListener("DOMContentLoaded",()=>this.initializeDatabase()),window.location.pathname.endsWith("admin.html")&&setInterval(()=>this.checkAndInitializeDatabase(),100)}async getUserDocument(e){try{return await this.db.collection("users").doc(e).get()}catch(e){throw console.error("Error getting user document:",e),e}}async updateUserDocument(e,t){try{await this.db.collection("users").doc(e).update(t),console.log("User document updated successfully")}catch(e){throw console.error("Error updating user document:",e),e}}async saveEditionPreference(e,t){try{await this.db.collection("users").doc(t).update({defaultEdition:e,lastUpdated:new Date}),console.log("Edition preference saved successfully")}catch(e){throw console.error("Error saving edition preference:",e),e}}async saveUserDefaultEdition(e){try{await this.db.collection("users").doc(e).update({defaultEdition:window.currentActiveEdition,lastUpdated:new Date}),console.log("User default edition saved successfully")}catch(e){throw console.error("Error saving user default edition:",e),e}}async getAllUsers(){try{return await this.db.collection("users").get()}catch(e){throw console.error("Error getting all users:",e),e}}async getUsersByEdition(e){try{const t=await this.db.collection("users").get(),i=[];return t.forEach(t=>{const n=t.data();n.registrations&&n.registrations[e]&&i.push({id:t.id,...n})}),i}catch(e){throw console.error("Error getting users by edition:",e),e}}async getUsersOrderedByName(e=20){try{return await this.db.collection("users").orderBy("firstName").limit(e).get()}catch(e){throw console.error("Error getting users ordered by name:",e),e}}async getSettingsDocument(e="currentCompetition"){try{return await this.db.collection("settings").doc(e).get()}catch(e){throw console.error("Error getting settings document:",e),e}}async setSettingsDocument(e,t){try{await this.db.collection("settings").doc(e).set(t),console.log("Settings document set successfully")}catch(e){throw console.error("Error setting settings document:",e),e}}async getRegistrationSettings(e){try{return await this.db.collection("settings").doc(`registration_edition_${e}`).get()}catch(e){throw console.error("Error getting registration settings:",e),e}}async setRegistrationSettings(e,t){try{await this.db.collection("settings").doc(`registration_edition_${e}`).set(t),console.log("Registration settings saved successfully")}catch(e){throw console.error("Error saving registration settings:",e),e}}async getFixturesDocument(e){try{return await this.db.collection("fixtures").doc(e).get()}catch(e){throw console.error("Error getting fixtures document:",e),e}}async updateFixturesDocument(e,t){try{await this.db.collection("fixtures").doc(e).set(t),console.log("Fixtures document updated successfully")}catch(e){throw console.error("Error updating fixtures document:",e),e}}async deleteFixturesDocument(e){try{await this.db.collection("fixtures").doc(e).delete(),console.log("Fixtures document deleted successfully")}catch(e){throw console.error("Error deleting fixtures document:",e),e}}async updateUserPick(e,t,i){try{const n={};n[`picks.${t}`]=i,await this.db.collection("users").doc(e).update(n),console.log("User pick updated successfully")}catch(e){throw console.error("Error updating user pick:",e),e}}async removeUserPick(e,t){try{const i={};i[`picks.${t}`]=this.db.FieldValue.delete(),await this.db.collection("users").doc(e).update(i),console.log("User pick removed successfully")}catch(e){throw console.error("Error removing user pick:",e),e}}async getUserPicks(e){try{const t=await this.db.collection("users").doc(e).get();return t.exists&&t.data().picks||{}}catch(e){throw console.error("Error getting user picks:",e),e}}async updateUserRegistration(e,t,i){try{const n={};n[`registrations.${t}`]=i,await this.db.collection("users").doc(e).update(n),console.log("User registration updated successfully")}catch(e){throw console.error("Error updating user registration:",e),e}}async removeUserRegistration(e,t){try{const i={};i[`registrations.${t}`]=this.db.FieldValue.delete(),await this.db.collection("users").doc(e).update(i),console.log("User registration removed successfully")}catch(e){throw console.error("Error removing user registration:",e),e}}async checkAdminStatus(e){try{const t=await this.db.collection("users").doc(e).get();return!(!t.exists||!0!==t.data().isAdmin)}catch(e){throw console.error("Error checking admin status:",e),e}}async updateUserStatus(e,t,i={}){try{const n={status:t,lastUpdated:new Date,...i};"archived"===t?n.archivedDate=new Date:"active"===t&&(n.unarchivedDate=new Date),await this.db.collection("users").doc(e).update(n),console.log("User status updated successfully")}catch(e){throw console.error("Error updating user status:",e),e}}async resetAllPlayerLives(){try{const e=await this.db.collection("users").get(),t=this.db.batch();e.forEach(e=>{"active"===e.data().status&&t.update(e.ref,{lives:2,lastUpdated:new Date})}),await t.commit(),console.log("All player lives reset successfully")}catch(e){throw console.error("Error resetting player lives:",e),e}}async batchUpdateUsers(e){try{const t=this.db.batch();e.forEach(e=>{const i=this.db.collection("users").doc(e.userId);t.update(i,e.data)}),await t.commit(),console.log("Batch update completed successfully")}catch(e){throw console.error("Error in batch update:",e),e}}async batchDeleteUsers(e){try{const t=this.db.batch();e.forEach(e=>{const i=this.db.collection("users").doc(e);t.delete(i)}),await t.commit(),console.log("Batch delete completed successfully")}catch(e){throw console.error("Error in batch delete:",e),e}}startRealTimeScoreUpdates(e,t){try{this.realTimeScoreUpdates&&this.stopRealTimeScoreUpdates();const i=`gw${e}`;this.realTimeScoreUpdates=this.db.collection("fixtures").doc(i).onSnapshot(e=>{if(e.exists){const i=e.data();t&&"function"==typeof t&&t(i)}},e=>{console.error("Real-time score updates error:",e)}),console.log("Real-time score updates started for gameweek:",e)}catch(e){console.error("Error starting real-time score updates:",e)}}stopRealTimeScoreUpdates(){try{this.realTimeScoreUpdates&&(this.realTimeScoreUpdates(),this.realTimeScoreUpdates=null,console.log("Real-time score updates stopped"))}catch(e){console.error("Error stopping real-time score updates:",e)}}startEnhancedVidiprinter(e){try{this.enhancedVidiprinter&&this.stopEnhancedVidiprinter(),this.enhancedVidiprinter=this.db.collection("vidiprinter").orderBy("timestamp","desc").limit(100).onSnapshot(t=>{const i=[];t.forEach(e=>{i.push({id:e.id,...e.data()})}),e&&"function"==typeof e&&e(i)},e=>{console.error("Enhanced vidiprinter error:",e)}),console.log("Enhanced vidiprinter started")}catch(e){console.error("Error starting enhanced vidiprinter:",e)}}stopEnhancedVidiprinter(){try{this.enhancedVidiprinter&&(this.enhancedVidiprinter(),this.enhancedVidiprinter=null,console.log("Enhanced vidiprinter stopped"))}catch(e){console.error("Error stopping enhanced vidiprinter:",e)}}startDeadlineChecker(e){try{this.deadlineChecker&&clearInterval(this.deadlineChecker),this.deadlineChecker=setInterval(()=>{e&&"function"==typeof e&&e()},6e4),console.log("Deadline checker started")}catch(e){console.error("Error starting deadline checker:",e)}}stopDeadlineChecker(){try{this.deadlineChecker&&(clearInterval(this.deadlineChecker),this.deadlineChecker=null,console.log("Deadline checker stopped"))}catch(e){console.error("Error stopping deadline checker:",e)}}startAdminSessionMonitoring(e,t,i){try{this.adminSessionMonitoring&&this.stopAdminSessionMonitoring();let e=Date.now();const n=18e5,o=15e5,s=()=>{e=Date.now()};document.addEventListener("click",s),document.addEventListener("keypress",s),document.addEventListener("scroll",s),this.adminSessionMonitoring=setInterval(()=>{const s=Date.now()-e;s>=n?(this.stopAdminSessionMonitoring(),t&&"function"==typeof t&&t()):s>=o&&s<n&&i&&"function"==typeof i&&i()},1e3),console.log("Admin session monitoring started")}catch(e){console.error("Error starting admin session monitoring:",e)}}stopAdminSessionMonitoring(){try{this.adminSessionMonitoring&&(clearInterval(this.adminSessionMonitoring),this.adminSessionMonitoring=null,document.removeEventListener("click",this.updateActivity),document.removeEventListener("keypress",this.updateActivity),document.removeEventListener("scroll",this.updateActivity),console.log("Admin session monitoring stopped"))}catch(e){console.error("Error stopping admin session monitoring:",e)}}startAdminTokenRefresh(e,t){try{this.adminTokenRefresh&&this.stopAdminTokenRefresh(),this.adminTokenRefresh=setInterval(async()=>{try{await e.getIdToken(!0),t&&"function"==typeof t&&t()}catch(e){console.error("Error refreshing admin token:",e)}},6e5),console.log("Admin token refresh started")}catch(e){console.error("Error starting admin token refresh:",e)}}stopAdminTokenRefresh(){try{this.adminTokenRefresh&&(clearInterval(this.adminTokenRefresh),this.adminTokenRefresh=null,console.log("Admin token refresh stopped"))}catch(e){console.error("Error stopping admin token refresh:",e)}}getDatabaseReference(){return this.db}isDatabaseInitialized(){return null!==this.db}cleanup(){this.stopRealTimeScoreUpdates(),this.stopEnhancedVidiprinter(),this.stopDeadlineChecker(),this.stopAdminSessionMonitoring(),this.stopAdminTokenRefresh(),this.databaseInitialized=!1,console.log("Database Manager cleanup completed")}};class y{constructor(e=null,t=1){this.db=e,this.currentActiveEdition=t,this.config=null,this.initializeConfiguration()}initializeConfiguration(){this.loadConfiguration()}loadConfiguration(){return"undefined"!=typeof window&&window.FOOTBALL_WEBPAGES_CONFIG?(this.config=window.FOOTBALL_WEBPAGES_CONFIG,console.log("✅ Football Web Pages API configuration loaded from window object"),console.log("API Key available:",!!this.config.RAPIDAPI_KEY),!0):"undefined"!=typeof window&&window.ENV_CONFIG&&window.ENV_CONFIG.RAPIDAPI_KEY?(this.config={BASE_URL:"https://football-web-pages1.p.rapidapi.com",RAPIDAPI_KEY:window.ENV_CONFIG.RAPIDAPI_KEY,RAPIDAPI_HOST:"football-web-pages1.p.rapidapi.com"},console.log("✅ Football Web Pages API configuration loaded from ENV_CONFIG"),console.log("API Key available:",!!this.config.RAPIDAPI_KEY),!0):"undefined"!=typeof FOOTBALL_WEBPAGES_CONFIG?(this.config=FOOTBALL_WEBPAGES_CONFIG,console.log("✅ Football Web Pages API configuration loaded from global variable"),console.log("API Key available:",!!this.config.RAPIDAPI_KEY),!0):(console.warn("⚠️ Football Web Pages API configuration not found - will retry during initialization"),this.retryLoadConfiguration(),!1)}retryLoadConfiguration(){let e=0;const t=()=>(e++,console.log(`🔄 Attempt ${e}/10 to load Football Web Pages API configuration...`),"undefined"!=typeof window&&window.FOOTBALL_WEBPAGES_CONFIG?(this.config=window.FOOTBALL_WEBPAGES_CONFIG,void console.log("✅ Football Web Pages API configuration loaded from window object on retry attempt",e)):"undefined"!=typeof window&&window.ENV_CONFIG&&window.ENV_CONFIG.RAPIDAPI_KEY?(this.config={BASE_URL:"https://football-web-pages1.p.rapidapi.com",RAPIDAPI_KEY:window.ENV_CONFIG.RAPIDAPI_KEY,RAPIDAPI_HOST:"football-web-pages1.p.rapidapi.com"},void console.log("✅ Football Web Pages API configuration loaded from ENV_CONFIG on retry attempt",e)):"undefined"!=typeof FOOTBALL_WEBPAGES_CONFIG?(this.config=FOOTBALL_WEBPAGES_CONFIG,void console.log("✅ Football Web Pages API configuration loaded on retry attempt",e)):void(e<10?setTimeout(t,1e3):(console.error("❌ Failed to load Football Web Pages API configuration after",10,"attempts"),console.error("This will prevent API functions from working properly"),setTimeout(()=>{"undefined"!=typeof window&&window.FOOTBALL_WEBPAGES_CONFIG?(this.config=window.FOOTBALL_WEBPAGES_CONFIG,console.log("✅ Football Web Pages API configuration loaded from window object on final attempt")):"undefined"!=typeof FOOTBALL_WEBPAGES_CONFIG&&(this.config=FOOTBALL_WEBPAGES_CONFIG,console.log("✅ Football Web Pages API configuration loaded on final attempt"))},2e3))));setTimeout(t,100)}isConfigurationLoaded(){return null!==this.config}getConfiguration(){return this.isConfigurationLoaded()?this.config:(this.retryLoadConfiguration(),null)}async testApiConnection(){console.log("🧪 Testing Football Web Pages API connection...");const e=document.querySelector("#api-key-status"),t=document.querySelector("#test-api-connection");if(e&&t){if(this.config||(this.loadConfiguration(),this.config||await new Promise(e=>setTimeout(e,100))),!this.config||!this.config.RAPIDAPI_KEY)return e.textContent="API key not configured - please refresh the page",e.className="status-indicator error",void console.error("API configuration not available for test connection");try{e.textContent="Testing connection...",e.className="status-indicator loading",t.disabled=!0;const i=await fetch("https://football-web-pages1.p.rapidapi.com/fixtures-results.json?comp=5&round=0&team=0",{method:"GET",headers:{"X-RapidAPI-Key":this.config.RAPIDAPI_KEY,"X-RapidAPI-Host":this.config.RAPIDAPI_HOST}});if(!i.ok)throw new Error(`HTTP ${i.status}: ${i.statusText}`);{const t=await i.json();e.textContent=`✅ API connection successful! Received ${t.length||0} items`,e.className="status-indicator success",console.log("✅ API test successful:",t)}}catch(t){console.error("❌ API test failed:",t),e.textContent=`❌ API connection failed: ${t.message}`,e.className="status-indicator error"}finally{t.disabled=!1}}else console.error("Required elements not found for API test")}checkApiKeyStatus(){const e=document.querySelector("#api-key-status");if(!e)return void console.log("❌ API key status element not found");console.log("🔍 checkApiKeyStatus called"),console.log("🔍 Status element found:",e),console.log("🔍 Current config:",this.config),console.log("🔍 FOOTBALL_WEBPAGES_CONFIG available:","undefined"!=typeof FOOTBALL_WEBPAGES_CONFIG),this.config||"undefined"==typeof FOOTBALL_WEBPAGES_CONFIG||(this.config=FOOTBALL_WEBPAGES_CONFIG,console.log("✅ Football Web Pages API configuration loaded during status check"));const t=document.querySelector("#test-api-connection"),i=document.querySelector("#fetch-date-range-fixtures-btn"),n=document.querySelector("#fetch-all-fixtures-btn");console.log("🔍 Button elements found:",{testApiBtn:!!t,fetchDateRangeBtn:!!i,fetchAllBtn:!!n}),t&&console.log("🔍 Test API button disabled state:",t.disabled),i&&console.log("🔍 Fetch Date Range button disabled state:",i.disabled),n&&console.log("🔍 Fetch All button disabled state:",n.disabled),this.config&&this.config.RAPIDAPI_KEY?(e.textContent="API key configured",e.className="status-indicator success",console.log("API key status: Configured successfully"),console.log("🔑 API Key value:",this.config.RAPIDAPI_KEY.substring(0,10)+"..."),t&&(t.disabled=!1,console.log("✅ Test API button enabled")),i&&(i.disabled=!1,console.log("✅ Fetch Date Range button enabled")),n&&(n.disabled=!1,console.log("✅ Fetch All button enabled")),this.updateImportButtonStates(!1)):(e.textContent="API key missing - retrying...",e.className="status-indicator error",console.log("API key status: Missing - configuration may still be loading"),console.log("🔍 Current config state:",this.config),t&&(t.disabled=!0,console.log("❌ Test API button disabled")),i&&(i.disabled=!0,console.log("❌ Fetch Date Range button disabled")),n&&(n.disabled=!0,console.log("❌ Fetch All button disabled")),this.updateImportButtonStates(!1),this.config||this.retryLoadConfiguration())}async fetchDateRangeFixtures(){console.log("📅 Fetching fixtures by date range...");const e=document.querySelector("#start-date").value,t=document.querySelector("#end-date").value,i=document.querySelector("#fetch-status"),n=document.querySelector("#date-range-league").value,o=document.querySelector("#date-range-season").value;if(e&&t)if(n&&o)if(i){if(this.config||(this.loadConfiguration(),this.config||await new Promise(e=>setTimeout(e,100))),!this.config||!this.config.RAPIDAPI_KEY)return i.textContent="API key not configured - please refresh the page",i.className="status-message error",void console.error("API configuration not available for date range fetch");try{console.log(`📅 Fetching fixtures with parameters: league=${n}, season=${o}, startDate=${e}, endDate=${t}`);const s=[e,e.split("-").reverse().join("/"),e.split("-").slice(1).concat(e.split("-")[0]).join("/")];let a;console.log("📅 Trying date formats:",s),console.log(`📅 Note: You're searching for ${e} (${new Date(e).toLocaleDateString()})`),console.log("📅 If you meant September 8th, 2025, use 2025-09-08 instead"),i.innerHTML="<h4>🔄 Fetching Fixtures...</h4><p>Please wait while we fetch fixtures from the API...</p><p>This may take a few seconds for large date ranges.</p>",i.className="status-message loading";let r=null;for(const e of s)try{if(console.log(`📅 Trying date format: ${e}`),a=await fetch(`https://football-web-pages1.p.rapidapi.com/fixtures-results.json?from=${e}&to=${e}&comp=${n}&season=${o}`,{method:"GET",headers:{"X-RapidAPI-Key":this.config.RAPIDAPI_KEY,"X-RapidAPI-Host":this.config.RAPIDAPI_HOST}}),a.ok){r=e,console.log(`✅ Date range query successful with format: ${e}`);break}console.log(`❌ Date range query failed with format ${e}: ${a.status} ${a.statusText}`)}catch(t){console.log(`❌ Date range query error with format ${e}:`,t)}if(r||(console.log("All date range queries failed, trying league-only query..."),a=await fetch(`https://football-web-pages1.p.rapidapi.com/fixtures-results.json?comp=${n}&round=0&team=0`,{method:"GET",headers:{"X-RapidAPI-Key":this.config.RAPIDAPI_KEY,"X-RapidAPI-Host":this.config.RAPIDAPI_HOST}})),console.log(`📅 API Response Status: ${a.status} ${a.statusText}`),!a.ok){const e=await a.text();throw console.error(`📅 API Error Response: ${e}`),new Error(`HTTP ${a.status}: ${a.statusText}`)}{const n=await a.json();console.log("📅 API Response Data:",n);let o=[];if(n["fixtures-results"]){const e=n["fixtures-results"];if(console.log("📅 Fixtures data structure:",e),Array.isArray(e))o=e;else if(e.fixtures&&Array.isArray(e.fixtures))o=e.fixtures;else if(e.matches&&Array.isArray(e.matches))o=e.matches;else{const t=Object.keys(e);console.log("📅 Available keys in fixtures-results:",t);for(const i of t)if(Array.isArray(e[i])){o=e[i],console.log(`📅 Found fixtures array in key: ${i}`);break}}}if(console.log("📅 Extracted fixtures:",o),o&&o.length>0){const n=o.filter(i=>{const n=i.date;if(!n)return!1;const o=new Date(n),s=new Date(e),a=new Date(t);return s.setHours(0,0,0,0),a.setHours(23,59,59,999),o.setHours(0,0,0,0),o>=s&&o<=a});if(console.log(`📅 Filtered fixtures for date range ${e} to ${t}:`,n.length),0===n.length)return i.innerHTML=`<h4>No Fixtures Found</h4><p>No fixtures found for the date range ${e} to ${t}.</p>`,void(i.className="status-message info");let s=`<h4>Fixtures Found for ${e} to ${t}:</h4><div class="fixtures-list">`;console.log("📅 First 3 filtered fixtures structure:",n.slice(0,3)),n.forEach((e,t)=>{if(t<20){const i=e["home-team"]?.name||e.homeTeam||e.home||e.homeTeamName||e.home_team||e.home_team_name||e.team1||e.team1Name||"TBD",n=e["away-team"]?.name||e.awayTeam||e.away||e.awayTeamName||e.away_team||e.away_team_name||e.team2||e.team2Name||"TBD",o=e.date||e.matchDate||e.fixtureDate||e.match_date||e.fixture_date||e.dateTime||e.date_time||"TBD",a=e.competition?.name||e.competition||e.comp||e.league||e.competitionName||e.leagueName||"TBD",r=e.time||"TBD",l=e.referee||"TBD",c=e.attendance||"TBD",d=e.venue||"TBD",u=e.id||"TBD";let g=e["home-team"]?.score||e["home-team"]?.goals||e.homeScore||e.homeGoals||e.home_score||e.home_goals||e.score1||e.goals1||e.ht_score?.split("-")[0]||e.ft_score?.split("-")[0]||e.score?.split("-")[0]||"TBD",m=e["away-team"]?.score||e["away-team"]?.goals||e.awayScore||e.awayGoals||e.away_score||e.away_goals||e.score2||e.goals2||e.ht_score?.split("-")[1]||e.ft_score?.split("-")[1]||e.score?.split("-")[1]||"TBD";const h=e.status?.full||e.status?.short||"TBD";s+=`\n                                <div class="fixture-item">\n                                    <input type="checkbox" id="fixture-${t}" class="fixture-checkbox" data-fixture='${JSON.stringify(e)}'>\n                                    <label for="fixture-${t}">\n                                        <strong>${i} vs ${n}</strong><br>\n                                        <small>Date: ${o} | Time: ${r} | Competition: ${a}</small><br>\n                                        <small>Venue: ${d} | Match ID: ${u}</small><br>\n                                        <small>Referee: ${l} | Attendance: ${c}</small><br>\n                                        <small>Score: ${g} - ${m} | Status: ${h}</small>\n                                    </label>\n                                </div>\n                            `}}),n.length>20&&(s+=`<p><em>... and ${n.length-20} more fixtures</em></p>`),s+="</div>";const a=document.querySelector("#fixtures-container");if(a){this.displayFixtures(n,a),console.log(`✅ Date range fixtures displayed using displayFixtures: ${n.length} fixtures for ${e} to ${t}`),i.innerHTML=`<h4>✅ Fetch Complete!</h4><p>Successfully fetched and displayed ${n.length} fixtures for ${e} to ${t}.</p><p>The fixtures are now displayed below and import buttons are enabled.</p>`,i.className="status-message success";const o=document.querySelector("#import-controls");o&&(o.style.display="block",console.log("✅ Import controls displayed"))}else{i.innerHTML=s,i.className="status-message success",console.log(`✅ Date range fixtures fetched successfully: ${n.length} fixtures for ${e} to ${t}`);const o=document.querySelector("#import-controls");o&&(o.style.display="block",console.log("✅ Import controls displayed"))}}else i.textContent="No fixtures found for the selected date range",i.className="status-message info",console.log("No fixtures found in API response")}}catch(e){console.error("❌ Date range fetch failed:",e),i.textContent=`❌ Failed to fetch fixtures: ${e.message}`,i.className="status-message error"}}else console.error("Fetch status element not found");else i&&(i.textContent="Please select both league and season",i.className="status-message error");else i&&(i.textContent="Please select both start and end dates",i.className="status-message error")}async fetchAllFixtures(){const e=document.querySelector("#fixtures-container"),t=document.querySelector("#fetch-status");if(e&&t){t.textContent="Fetching all fixtures...",t.className="status-message info";try{const i=await fetch("/.netlify/functions/fetch-scores?comp=5&team=0");if(!i.ok)throw new Error(`HTTP ${i.status}: ${i.statusText}`);{const n=await i.json();this.displayFixtures(n.fixtures||[],e),t.textContent=`Found ${n.fixtures?n.fixtures.length:0} fixtures`,t.className="status-message success"}}catch(e){console.error("Error fetching all fixtures:",e),t.textContent="Error fetching fixtures",t.className="status-message error"}}else console.error("Required elements not found for all fixtures fetch")}displayFixtures(e,t){if(console.log(`🔧 displayFixtures called with ${e?.length||0} fixtures`),console.log("🔧 Container element:",t),console.log("🔧 Container visibility:",t.style.display,null!==t.offsetParent),console.log("🔧 Container computed styles:",window.getComputedStyle(t)),!Array.isArray(e)||0===e.length)return t.innerHTML="<p>No fixtures found</p>",console.log("🔧 No fixtures available, disabling import buttons"),void this.updateImportButtonStates(!1);console.log("🔧 Displaying fixtures, enabling import buttons"),t.innerHTML="",e.forEach((e,i)=>{const n=document.createElement("div");n.className="fixture-item";const o=e["home-team"]?.name||e.homeTeam||e.home||e.homeTeamName||e.home_team||e.home_team_name||e.team1||e.team1Name||"TBD",s=e["away-team"]?.name||e.awayTeam||e.away||e.awayTeamName||e.away_team||e.away_team_name||e.team2||e.team2Name||"TBD",a=e.date||e.matchDate||e.fixtureDate||e.match_date||e.fixture_date||e.dateTime||e.date_time||"TBD";n.innerHTML=`\n                <input type="checkbox" id="fixture-${i}" value="${i}" class="fixture-checkbox" data-fixture='${JSON.stringify(e)}'>\n                <label for="fixture-${i}">\n                    ${o} vs ${s} - ${a}\n                </label>\n            `,t.appendChild(n),console.log("🔧 Added fixture element:",n)});const i=document.createElement("div");i.className="fixture-success-message",i.innerHTML=`<h4>✅ ${e.length} Fixtures Loaded Successfully!</h4><p>Select the fixtures you want to import and use the import buttons below.</p>`,t.insertBefore(i,t.firstChild),console.log("🔧 Added success message:",i),this.updateImportButtonStates(!0),t.style.display="block",t.style.visibility="visible",t.style.opacity="1",console.log(`🔧 Successfully displayed ${e.length} fixtures in container`),console.log("🔧 Final container HTML:",t.innerHTML),console.log("🔧 Final container styles:",{display:t.style.display,visibility:t.style.visibility,opacity:t.style.opacity,computedDisplay:window.getComputedStyle(t).display,computedVisibility:window.getComputedStyle(t).visibility,computedOpacity:window.getComputedStyle(t).opacity})}selectAllFixtures(){console.log("✅ Selecting all fixtures...");const e=document.querySelectorAll(".fixture-checkbox");e.forEach(e=>e.checked=!0),console.log(`✅ Selected ${e.length} fixtures`)}deselectAllFixtures(){console.log("❌ Deselecting all fixtures...");const e=document.querySelectorAll(".fixture-checkbox");e.forEach(e=>e.checked=!1),console.log(`❌ Deselected ${e.length} fixtures`)}updateImportButtonStates(e){console.log(`🔧 updateImportButtonStates called with enable: ${e}`);const t=document.querySelector("#import-selected-fixtures-btn"),i=document.querySelector("#select-all-fixtures-btn"),n=document.querySelector("#deselect-all-fixtures-btn");console.log("🔧 Found import buttons:",{importSelectedFixturesBtn:!!t,selectAllFixturesBtn:!!i,deselectAllFixturesBtn:!!n}),t&&(t.disabled=!e,console.log("🔧 Import Selected Fixtures button "+(e?"enabled":"disabled"))),i&&(i.disabled=!e,console.log("🔧 Select All Fixtures button "+(e?"enabled":"disabled"))),n&&(n.disabled=!e,console.log("🔧 Deselect All Fixtures button "+(e?"enabled":"disabled")))}async importSelectedFixtures(){console.log("📥 Importing selected fixtures...");const e=[],t=document.querySelectorAll(".fixture-checkbox:checked");if(0===t.length)return void alert("Please select at least one fixture to import.");const i=document.querySelector("#import-gameweek-select").value;if(i){t.forEach(t=>{try{const i=JSON.parse(t.dataset.fixture);e.push(i)}catch(e){console.error("Error parsing fixture data:",e)}}),console.log(`📥 Importing ${e.length} fixtures to Game Week ${i}:`,e);try{const n=e.map(e=>({homeTeam:e["home-team"]?.name||e.homeTeam||"TBD",awayTeam:e["away-team"]?.name||e.awayTeam||"TBD",date:e.date||e.match?.date||"TBD",kickOffTime:e.time||"TBD",venue:e.venue||"TBD",status:"NS",matchId:e.id||e.match?.id||null,competition:e.competition?.name||"National League"})),o="tiebreak"===i?"gwtiebreak":`gw${i}`,s=`edition${this.currentActiveEdition}_${o}`;if(!this.db)throw console.error("Database not available for saving fixtures"),new Error("Database not available");await this.db.collection("fixtures").doc(s).set({fixtures:n,gameweek:i,edition:this.currentActiveEdition,lastUpdated:new Date,importedFrom:"API"}),console.log(`📥 Successfully saved ${n.length} fixtures to Game Week ${i}`),alert(`Successfully imported ${n.length} fixtures to Game Week ${i}!`),console.log("Fixtures imported successfully. Please refresh the fixture display manually."),t.forEach(e=>e.checked=!1);const a=document.querySelector("#import-status");a&&(a.textContent=`Successfully imported ${n.length} fixtures to Game Week ${i}`,a.className="status-message success")}catch(e){console.error("Error importing fixtures:",e),alert("Error importing fixtures: "+e.message);const t=document.querySelector("#import-status");t&&(t.textContent="Error importing fixtures: "+e.message,t.className="status-message error")}}else alert("Please select a game week to import to.")}cleanup(){console.log("🧹 Football Web Pages API cleanup completed")}}class f{constructor(e=null){this.footballWebPagesAPI=e}async fetchHistoricalVidiprinterData(e,t,i,n){console.log("📅 Fetching historical vidiprinter data:",{startDate:e,startTime:t,endDate:i,endTime:n});try{const o=[e,i,"2025-08-09","2025-08-10","2025-08-08"],s=[],a=new Set;for(const e of o)if(!a.has(e)){a.add(e),console.log(`📅 Trying to fetch vidiprinter data for date: ${e}`);try{const t=await fetch(`https://football-web-pages1.p.rapidapi.com/vidiprinter.json?comp=5&team=0&date=${e}`,{headers:{"X-RapidAPI-Key":this.footballWebPagesAPI?.config?.RAPIDAPI_KEY||"","X-RapidAPI-Host":this.footballWebPagesAPI?.config?.RAPIDAPI_HOST||"football-web-pages1.p.rapidapi.com"}});if(!t.ok){console.log(`📅 Failed to fetch data for ${e}: ${t.status} ${t.statusText}`);continue}const i=await t.json();console.log(`📅 Response for ${e}:`,i),i.vidiprinter&&i.vidiprinter.events&&Array.isArray(i.vidiprinter.events)?(console.log(`📅 Found ${i.vidiprinter.events.length} events for ${e}`),i.vidiprinter.events.length>0&&(s.push(...i.vidiprinter.events),console.log(`📅 Added ${i.vidiprinter.events.length} events from ${e}`))):console.log(`📅 No events found for ${e}`)}catch(t){console.log(`📅 Error fetching data for ${e}:`,t)}}if(console.log(`📅 Total events collected from all dates: ${s.length}`),0===s.length)return console.log("📅 No events found for any date, returning empty result"),{events:[],startDate:e,startTime:t,endDate:i,endTime:n,message:"No vidiprinter events found for the requested date range or fallback dates"};const r=this.filterEventsByTimeRange(s,e,t,i,n);return console.log("📅 Filtered events:",r),{events:r,startDate:e,startTime:t,endDate:i,endTime:n}}catch(e){throw console.error("❌ Error fetching historical vidiprinter data:",e),e}}filterEventsByTimeRange(e,t,i,n,o){if(!e||!Array.isArray(e))return console.log("❌ No events array provided or not an array"),[];console.log(`🔍 Filtering ${e.length} events between ${t} ${i} and ${n} ${o}`);const s=e.filter(e=>{if(!e["date/time"])return console.log("❌ Event missing date/time:",e),!1;const s=this.parseEventDateTime(e["date/time"]);if(!s)return console.log("❌ Failed to parse event date/time:",e["date/time"]),!1;const a=new Date(`${t} ${i}`),r=new Date(`${n} ${o}`);return console.log(`📅 Event: ${e["date/time"]} -> Parsed: ${s}`),console.log(`📅 Start: ${t} ${i} -> ${a}`),console.log(`📅 End: ${n} ${o} -> ${r}`),console.log(`📅 In range: ${s>=a&&s<=r}`),s>=a&&s<=r});return console.log(`✅ Filtered events result: ${s.length} events`),s}parseEventDateTime(e){console.log(`🔍 Parsing date/time: "${e}"`);const[t,i]=e.split(" ");if(console.log(`📅 Date part: "${t}", Time part: "${i}"`),!t||!i)return console.log("❌ Invalid date/time format - missing date or time part"),null;const[n,o,s]=t.split("-"),[a,r,l]=i.split(":");if(console.log(`📅 Parsed: Year=${n}, Month=${o}, Day=${s}, Hour=${a}, Minute=${r}, Second=${l}`),!(n&&o&&s&&a&&r&&l))return console.log("❌ Invalid date/time format - missing components"),null;const c=new Date(n,o-1,s,a,r,l);return console.log(`📅 Final parsed date: ${c}`),c}async fetchHistoricalDataForInterval(e,t,i,n){console.log("Fetching historical data for interval:",{startDate:e,startTime:t,endDate:i,endTime:n});try{return await this.fetchHistoricalVidiprinterData(e,t,i,n)}catch(e){throw console.error("Error fetching historical data for interval:",e),e}}async fetchVidiprinterData(e=5){console.log("📺 Fetching current vidiprinter data for competition:",e);try{const t=(new Date).toISOString().split("T")[0],i=(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1});console.log(`📺 Fetching vidiprinter for date: ${t}, time: ${i}`);let n=await fetch(`https://football-web-pages1.p.rapidapi.com/vidiprinter.json?comp=${e}&team=0&date=${t}`,{headers:{"X-RapidAPI-Key":this.footballWebPagesAPI?.config?.RAPIDAPI_KEY||"","X-RapidAPI-Host":this.footballWebPagesAPI?.config?.RAPIDAPI_HOST||"football-web-pages1.p.rapidapi.com"}});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);let o=await n.json();if(console.log("📺 Current date vidiprinter response:",o),!o.vidiprinter||!o.vidiprinter.events||0===o.vidiprinter.events.length){console.log("📺 No events on current date, trying recent dates...");const t=["2025-08-09","2025-08-10","2025-08-08"];for(const i of t)if(console.log(`📺 Trying date: ${i}`),n=await fetch(`https://football-web-pages1.p.rapidapi.com/vidiprinter.json?comp=${e}&team=0&date=${i}`,{headers:{"X-RapidAPI-Key":this.footballWebPagesAPI?.config?.RAPIDAPI_KEY||"","X-RapidAPI-Host":this.footballWebPagesAPI?.config?.RAPIDAPI_HOST||"football-web-pages1.p.rapidapi.com"}}),n.ok&&(o=await n.json(),console.log(`📺 Response for ${i}:`,o),o.vidiprinter&&o.vidiprinter.events&&o.vidiprinter.events.length>0)){console.log(`📺 Found ${o.vidiprinter.events.length} events for ${i}`);break}}return o.vidiprinter&&o.vidiprinter.events&&o.vidiprinter.events.length>0?(console.log(`📺 Returning ${o.vidiprinter.events.length} events from vidiprinter`),o.vidiprinter.events):(console.log("📺 No events found in any vidiprinter response"),[{text:"No live matches currently available. The vidiprinter will update when matches are in progress.",type:"status","date/time":(new Date).toISOString()}])}catch(e){return console.error("❌ Error fetching vidiprinter data:",e),[{text:"Vidiprinter system is running. Waiting for live match updates...",type:"status","date/time":(new Date).toISOString()}]}}async fetchEnhancedVidiprinterData(e=5,t=0,i=null){console.log("Fetching enhanced vidiprinter data:",{competition:e,team:t,date:i});try{const n=i||(new Date).toISOString().split("T")[0];console.log(`📅 Fetching enhanced vidiprinter for date: ${n}`);const o=await fetch(`https://football-web-pages1.p.rapidapi.com/vidiprinter.json?comp=${e}&team=${t}&date=${n}`,{headers:{"X-RapidAPI-Key":this.footballWebPagesAPI?.config?.RAPIDAPI_KEY||"","X-RapidAPI-Host":this.footballWebPagesAPI?.config?.RAPIDAPI_HOST||"football-web-pages1.p.rapidapi.com"}});if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);const s=await o.json();return console.log("📺 Enhanced vidiprinter API response:",s),s.vidiprinter&&s.vidiprinter.events?(console.log(`📺 Found ${s.vidiprinter.events.length} events in enhanced vidiprinter response`),s.vidiprinter.events):(console.log("📺 No events found in enhanced vidiprinter response"),[])}catch(e){return console.error("Error fetching enhanced vidiprinter data:",e),[]}}cleanup(){console.log("🧹 Vidiprinter API cleanup completed")}}class w{constructor(){}convertApiFixtureToDatabase(e){return{homeTeam:e["home-team"]?.name||e.homeTeam||"TBD",awayTeam:e["away-team"]?.name||e.awayTeam||"TBD",date:e.date||e.match?.date||"TBD",kickOffTime:e.time||"TBD",venue:e.venue||"TBD",status:"NS",matchId:e.id||e.match?.id||null,competition:e.competition?.name||"National League"}}extractScores(e){let t=null,i=null,n=null,o=null;if(e["home-team"]&&e["away-team"]&&(t=e["home-team"].score??e["home-team"].goals??e["home-team"].result,i=e["away-team"].score??e["away-team"].goals??e["away-team"].result),null==t&&null==i&&(t=e.homeScore??e.homeGoals??e.score1??e.home_result,i=e.awayScore??e.awayGoals??e.score2??e.away_result),null==t&&null==i){if(e.ft_score&&e.ft_score.includes("-")){const n=e.ft_score.split("-");t=parseInt(n[0].trim()),i=parseInt(n[1].trim())}if(null==t&&null==i&&e.score&&e.score.includes("-")){const n=e.score.split("-");t=parseInt(n[0].trim()),i=parseInt(n[1].trim())}if(null==t&&null==i&&e.result&&e.result.includes("-")){const n=e.result.split("-");t=parseInt(n[0].trim()),i=parseInt(n[1].trim())}}if(null==t&&null==i&&(t=e.homeGoals??e.goals1??e.home_goals,i=e.awayGoals??e.goals2??e.away_goals),null==t&&null==i){const n=["score","result","goals","ft_score","ht_score","final_score"];for(const o of n)if(e[o]&&"string"==typeof e[o]&&e[o].includes("-")){const n=e[o].split("-");if(2===n.length&&!isNaN(parseInt(n[0]))&&!isNaN(parseInt(n[1]))){t=parseInt(n[0].trim()),i=parseInt(n[1].trim());break}}}if(e["home-team"]&&e["away-team"]&&(n=e["home-team"]["half-time-score"]??e["home-team"].ht_score??e["home-team"].half_time_score,o=e["away-team"]["half-time-score"]??e["away-team"].ht_score??e["away-team"].half_time_score),null==n&&null==o)if(e.ht_score&&e.ht_score.includes("-")){const t=e.ht_score.split("-");n=parseInt(t[0].trim()),o=parseInt(t[1].trim())}else if(e.half_time_score&&e.half_time_score.includes("-")){const t=e.half_time_score.split("-");n=parseInt(t[0].trim()),o=parseInt(t[1].trim())}else if(e.ht_result&&e.ht_result.includes("-")){const t=e.ht_result.split("-");n=parseInt(t[0].trim()),o=parseInt(t[1].trim())}if(null==n&&null==o&&e.halfTimeScore&&e.halfTimeScore.includes("-")){const t=e.halfTimeScore.split("-");n=parseInt(t[0].trim()),o=parseInt(t[1].trim())}if(null==n&&null==o&&e.halfTime&&e.halfTime.includes("-")){const t=e.halfTime.split("-");n=parseInt(t[0].trim()),o=parseInt(t[1].trim())}if(null==n&&null==o&&e.ht&&e.ht.includes("-")){const t=e.ht.split("-");n=parseInt(t[0].trim()),o=parseInt(t[1].trim())}if(null==n&&null==o){const t=["halfTimeScore","halfTime","ht","ht_score","half_time_score","ht_result","halfTimeResult"];for(const i of t)if(e[i]&&"string"==typeof e[i]&&e[i].includes("-")){const t=e[i].split("-");if(2===t.length&&!isNaN(parseInt(t[0]))&&!isNaN(parseInt(t[1]))){n=parseInt(t[0].trim()),o=parseInt(t[1].trim());break}}}return t=null!=t&&""!==t?parseInt(t):null,i=null!=i&&""!==i?parseInt(i):null,n=null!=n&&""!==n?parseInt(n):null,o=null!=o&&""!==o?parseInt(o):null,{homeScore:t,awayScore:i,homeScoreHT:n,awayScoreHT:o}}extractTeamNames(e){return{homeTeam:e["home-team"]?.name||e.homeTeam||e.home||e.homeTeamName||e.home_team||e.home_team_name||e.team1||e.team1Name||"TBD",awayTeam:e["away-team"]?.name||e.awayTeam||e.away||e.awayTeamName||e.away_team||e.away_team_name||e.team2||e.team2Name||"TBD"}}extractMatchInfo(e){return{matchDate:e.date||e.matchDate||e.fixtureDate||e.match_date||e.fixture_date||e.dateTime||e.date_time||"TBD",competition:e.competition?.name||e.competition||e.comp||e.league||e.competitionName||e.leagueName||"TBD",time:e.time||"TBD",referee:e.referee||"TBD",attendance:e.attendance||"TBD",venue:e.venue||"TBD",matchId:e.id||"TBD"}}extractStatus(e){let t=e.status?.full||e.status?.short||e.status||"NS";return null!==e.homeScore&&null!==e.awayScore&&(t="FT"),t}filterFixturesByDateRange(e,t,i){return Array.isArray(e)&&0!==e.length?e.filter(e=>{const n=e.date;if(!n)return!1;const o=new Date(n),s=new Date(t),a=new Date(i);return s.setHours(0,0,0,0),a.setHours(23,59,59,999),o.setHours(0,0,0,0),o>=s&&o<=a}):[]}parseEventDateTime(e){if(!e||"string"!=typeof e)return null;const[t,i]=e.split(" ");if(!t||!i)return null;const[n,o,s]=t.split("-"),[a,r,l]=i.split(":");return n&&o&&s&&a&&r&&l?new Date(n,o-1,s,a,r,l):null}filterEventsByTimeRange(e,t,i,n,o){return e&&Array.isArray(e)?e.filter(e=>{if(!e["date/time"])return!1;const s=this.parseEventDateTime(e["date/time"]);if(!s)return!1;const a=new Date(`${t} ${i}`),r=new Date(`${n} ${o}`);return s>=a&&s<=r}):[]}generateFixturesHTML(e,t,i,n=20){if(!e||0===e.length)return"<p>No fixtures found</p>";let o=`<h4>Fixtures Found for ${t} to ${i}:</h4><div class="fixtures-list">`;return e.forEach((e,t)=>{if(t<n){const{homeTeam:i,awayTeam:n}=this.extractTeamNames(e),{matchDate:s,competition:a,time:r,venue:l,matchId:c,referee:d,attendance:u}=this.extractMatchInfo(e),{homeScore:g,awayScore:m}=this.extractScores(e),h=this.extractStatus(e);o+=`\n                    <div class="fixture-item">\n                        <input type="checkbox" id="fixture-${t}" class="fixture-checkbox" data-fixture='${JSON.stringify(e)}'>\n                        <label for="fixture-${t}">\n                            <strong>${i} vs ${n}</strong><br>\n                            <small>Date: ${s} | Time: ${r} | Competition: ${a}</small><br>\n                            <small>Venue: ${l} | Match ID: ${c}</small><br>\n                            <small>Referee: ${d} | Attendance: ${u}</small><br>\n                            <small>Score: ${g||"TBD"} - ${m||"TBD"} | Status: ${h}</small>\n                        </label>\n                    </div>\n                `}}),e.length>n&&(o+=`<p><em>... and ${e.length-n} more fixtures</em></p>`),o+="</div>",o}cleanup(){console.log("🧹 Data Processor cleanup completed")}}const v=class{constructor(e=null,t=1){this.db=e,this.currentActiveEdition=t,this.footballWebPagesAPI=new y(e,t),this.vidiprinterAPI=new f(this.footballWebPagesAPI),this.dataProcessor=new w,this.footballWebPagesConfig=null,this.theSportsDbConfig=null}initializeApiManager(){console.log("🔧 Initializing API Manager..."),this.initializeApiConfigurations(),this.setupEventListeners()}async initializeApiConfigurations(){console.log("🔧 Initializing API configurations..."),this.footballWebPagesAPI.initializeConfiguration(),console.log("TheSportsDB API configuration removed - using Football Web Pages API instead"),this.footballWebPagesConfig=this.footballWebPagesAPI.config}getConfiguration(){return this.footballWebPagesAPI.getConfiguration()}isConfigurationLoaded(){return this.footballWebPagesAPI.isConfigurationLoaded()}retryLoadConfigurationIfNeeded(){this.footballWebPagesAPI.retryLoadConfiguration()}setupEventListeners(){document.addEventListener("DOMContentLoaded",()=>{this.initializeFootballWebPagesAPI()})}initializeFootballWebPagesAPI(){console.log("🔧 Initializing Football Web Pages API integration...");const e=document.querySelector("#test-api-connection"),t=document.querySelector("#fetch-date-range-fixtures-btn"),i=document.querySelector("#fetch-all-fixtures-btn"),n=document.querySelector("#select-all-fixtures-btn"),o=document.querySelector("#deselect-all-fixtures-btn"),s=document.querySelector("#import-selected-fixtures-btn"),a=document.querySelector("#fetch-historical-data-btn");console.log("🔍 Found buttons:",{testApiConnection:!!e,fetchDateRangeFixtures:!!t,fetchAllFixtures:!!i,selectAllFixtures:!!n,deselectAllFixtures:!!o,importSelectedFixtures:!!s,fetchHistoricalData:!!a}),this.footballWebPagesAPI.checkApiKeyStatus(),setTimeout(()=>{this.footballWebPagesAPI.checkApiKeyStatus()},1e3),e&&e.addEventListener("click",()=>this.footballWebPagesAPI.testApiConnection()),t?(console.log("✅ Date Range Fetch button found and event listener attached"),t.addEventListener("click",()=>{console.log("📅 Date Range Fetch button clicked!"),this.footballWebPagesAPI.fetchDateRangeFixtures()})):console.error("❌ Date Range Fetch button not found!"),i&&i.addEventListener("click",()=>this.footballWebPagesAPI.fetchAllFixtures()),n&&n.addEventListener("click",()=>this.footballWebPagesAPI.selectAllFixtures()),o&&o.addEventListener("click",()=>this.footballWebPagesAPI.deselectAllFixtures()),s&&s.addEventListener("click",()=>this.footballWebPagesAPI.importSelectedFixtures()),a&&a.addEventListener("click",()=>{const e=new Date,t=new Date(e.getFullYear(),e.getMonth(),e.getDate()-7),i=new Date(e.getFullYear(),e.getMonth(),e.getDate());this.vidiprinterAPI.fetchHistoricalVidiprinterData(t.toISOString().split("T")[0],"00:00",i.toISOString().split("T")[0],"23:59")})}testApiConnection(){return this.footballWebPagesAPI.testApiConnection()}checkApiKeyStatus(){return this.footballWebPagesAPI.checkApiKeyStatus()}fetchDateRangeFixtures(){return this.footballWebPagesAPI.fetchDateRangeFixtures()}fetchAllFixtures(){return this.footballWebPagesAPI.fetchAllFixtures()}displayFixtures(e,t){return this.footballWebPagesAPI.displayFixtures(e,t)}selectAllFixtures(){return this.footballWebPagesAPI.selectAllFixtures()}deselectAllFixtures(){return this.footballWebPagesAPI.deselectAllFixtures()}importSelectedFixtures(){return this.footballWebPagesAPI.importSelectedFixtures()}fetchHistoricalVidiprinterData(e,t,i,n){return this.vidiprinterAPI.fetchHistoricalVidiprinterData(e,t,i,n)}filterEventsByTimeRange(e,t,i,n,o){return this.vidiprinterAPI.filterEventsByTimeRange(e,t,i,n,o)}parseEventDateTime(e){return this.vidiprinterAPI.parseEventDateTime(e)}fetchHistoricalDataForInterval(e,t,i,n){return this.vidiprinterAPI.fetchHistoricalDataForInterval(e,t,i,n)}fetchVidiprinterData(e=5){return this.vidiprinterAPI.fetchVidiprinterData(e)}fetchEnhancedVidiprinterData(e=5,t=0,i=null){return this.vidiprinterAPI.fetchEnhancedVidiprinterData(e,t,i)}initializePlayerVidiprinter(){console.log("🔧 Initializing player vidiprinter..."),console.log("✅ Player vidiprinter initialized")}convertApiFixtureToDatabase(e){return this.dataProcessor.convertApiFixtureToDatabase(e)}extractScores(e){return this.dataProcessor.extractScores(e)}extractTeamNames(e){return this.dataProcessor.extractTeamNames(e)}extractMatchInfo(e){return this.dataProcessor.extractMatchInfo(e)}extractStatus(e){return this.dataProcessor.extractStatus(e)}filterFixturesByDateRange(e,t,i){return this.dataProcessor.filterFixturesByDateRange(e,t,i)}generateFixturesHTML(e,t,i,n=20){return this.dataProcessor.generateFixturesHTML(e,t,i,n)}cleanup(){console.log("🧹 API Manager cleanup started..."),this.footballWebPagesAPI.cleanup(),this.vidiprinterAPI.cleanup(),this.dataProcessor.cleanup(),console.log("🧹 API Manager cleanup completed")}};class b{constructor(){this.readyCallbacks=[],this.isReady=!1,this.init()}init(){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>this.handleReady()):this.handleReady()}handleReady(){this.isReady=!0,this.readyCallbacks.forEach(e=>e()),this.readyCallbacks=[]}ready(e){this.isReady?e():this.readyCallbacks.push(e)}waitForElement(e,t=5e3){return new Promise((i,n)=>{const o=document.querySelector(e);if(o)return void i(o);const s=new MutationObserver(t=>{const n=document.querySelector(e);n&&(s.disconnect(),i(n))});s.observe(document.body,{childList:!0,subtree:!0}),setTimeout(()=>{s.disconnect(),n(new Error(`Element ${e} not found within ${t}ms`))},t)})}waitForElements(e,t=5e3){return Promise.all(e.map(e=>this.waitForElement(e,t)))}}const k=class{constructor(){this.currentActiveEdition=1,this.currentActiveGameweek="1",console.log("🔧 Utilities Manager initialized")}formatDeadlineDate(e){if(!e)return"TBD";const t=e.getHours(),i=e.getMinutes().toString().padStart(2,"0"),n=t>=12?"pm":"am",o=t%12||12,s=e.toLocaleDateString("en-GB",{weekday:"long"}),a=e.getDate(),r=e.toLocaleDateString("en-GB",{month:"long"});return`${o}:${i}${n} ${s} ${a}${this.getOrdinalSuffix(a)} ${r}`}getOrdinalSuffix(e){if(e>3&&e<21)return"th";switch(e%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}}async getDeadlineDateForGameweek(e){try{const t="tiebreak"===e?"gwtiebreak":`gw${e}`,i=`edition${this.currentActiveEdition}_${t}`;let n=await window.db.collection("fixtures").doc(i).get();if(n.exists||(n=await window.db.collection("fixtures").doc(t).get()),n.exists){const e=n.data().fixtures;if(e&&e.length>0){const t=e.reduce((e,t)=>new Date(t.date)<new Date(e.date)?t:e);return new Date(t.date)}}return null}catch(e){return console.error("Error getting deadline date for gameweek:",e),null}}getUserEdition(e){if(!e||!e.registrations)return 1;if(e.preferredEdition)return e.preferredEdition;if(e.registrations.editiontest)return"test";if(e.registrations.edition1)return 1;for(let t=2;t<=10;t++)if(e.registrations[`edition${t}`])return t;return 1}getUserRegisteredEditions(e){if(!e||!e.registrations)return[];const t=[];return Object.keys(e.registrations).forEach(e=>{if(e.startsWith("edition")){const i=e.replace("edition","");t.push(i)}}),t}getActiveGameweek(){return this.currentActiveGameweek}setActiveGameweek(e){this.currentActiveGameweek=e}setActiveEdition(e){this.currentActiveEdition=e}getTeamStatusSimple(e,t,i,n){if(!t||!t.picks)return{status:"not_picked",lives:2};const o=t.picks;let s=!1,a=null;if(Object.keys(o).forEach(t=>{o[t]===e&&(s=!0,a=t)}),!s)return{status:"not_picked",lives:t.lives||2};const r={team:e,gameweek:a},l=this.getFixturesForGameweek(a);return l&&l.length>0?this.checkPickStillValid(r,l).valid?{status:"picked",lives:t.lives||2,gameweek:a}:{status:"eliminated",lives:0,gameweek:a}:{status:"picked",lives:t.lives||2,gameweek:a}}async getTeamStatus(e,t,i,n){try{const o=this.getTeamStatusSimple(e,t,i,n);if("picked"!==o.status||o.gameweek===i)return o;const s=await this.getFixturesForGameweek(i);if(s&&s.length>0){const i={team:e,gameweek:o.gameweek};return this.checkPickStillValid(i,s).valid?{status:"picked",lives:t.lives||2,gameweek:o.gameweek}:{status:"eliminated",lives:0,gameweek:o.gameweek}}return o}catch(e){return console.error("Error getting team status:",e),{status:"error",lives:t.lives||2}}}getStatusDisplay(e){return{NS:"Not Started",POSTP:"Postponed",KO:"Kicked Off",HT:"Half-time",FT:"Full-time",COMP:"Completed"}[e]||"Not Started"}getMockFixtures(e,t){const i=[],n=["Altrincham","Bromley","Chesterfield","Dagenham & Redbridge","Eastleigh","FC Halifax Town","Gateshead","Hartlepool United","Kidderminster Harriers","Maidenhead United","Oldham Athletic","Oxford City","Rochdale","Solihull Moors","Southend United","Wealdstone","Woking","Wrexham","Yeovil Town","York City"].sort(()=>Math.random()-.5);for(let e=0;e<n.length;e+=2)e+1<n.length&&i.push({homeTeam:n[e],awayTeam:n[e+1],date:new Date(Date.now()+7*Math.random()*24*60*60*1e3),venue:"Home Ground",status:"NS"});return i}getMockScores(e){return e&&Array.isArray(e)?e.map(e=>({...e,homeScore:Math.floor(4*Math.random()),awayScore:Math.floor(4*Math.random()),status:"FT"})):[]}getMockRounds(){return[{id:"1",name:"Round 1"},{id:"2",name:"Round 2"},{id:"3",name:"Round 3"},{id:"4",name:"Round 4"},{id:"5",name:"Round 5"}]}getMockMatchdays(){return[{id:"1",name:"Matchday 1"},{id:"2",name:"Matchday 2"},{id:"3",name:"Matchday 3"},{id:"4",name:"Matchday 4"},{id:"5",name:"Matchday 5"}]}calculateTeamNameSimilarity(e,t){if(!e||!t)return 0;const i=e=>e.toLowerCase().replace(/[^a-z0-9]/g,""),n=i(e),o=i(t);if(n===o)return 1;const s=[];for(let e=0;e<=n.length;e++)s[e]=[e];for(let e=0;e<=o.length;e++)s[0][e]=e;for(let e=1;e<=n.length;e++)for(let t=1;t<=o.length;t++)n[e-1]===o[t-1]?s[e][t]=s[e-1][t-1]:s[e][t]=Math.min(s[e-1][t]+1,s[e][t-1]+1,s[e-1][t-1]+1);return 1-s[n.length][o.length]/Math.max(n.length,o.length)}normalizeTeamName(e){return e?e.toLowerCase().replace(/[^a-z0-9]/g,"").replace(/fc|town|united|athletic|rovers|city|county/g,""):""}groupFixturesByDate(e){if(!e||!Array.isArray(e))return{};const t={};return e.forEach(e=>{const i=new Date(e.date).toDateString();t[i]||(t[i]=[]),t[i].push(e)}),t}showRegistrationClosed(e="Registration is currently closed"){const t=document.getElementById("registration-window-status");t&&(t.innerHTML=`\n                <div class="registration-status">\n                    <h3>Registration Closed</h3>\n                    <p>${e}</p>\n                </div>\n            `)}showRegistrationCountdown(e){const t=document.getElementById("registration-countdown"),i=document.getElementById("countdown-timer");if(!t||!i)return;t.style.display="block";const n=()=>{const t=new Date,n=e-t;if(n<=0)return void(i.textContent="Registration Closed");const o=Math.floor(n/864e5),s=Math.floor(n%864e5/36e5),a=Math.floor(n%36e5/6e4),r=Math.floor(n%6e4/1e3);i.textContent=`${o}d ${s}h ${a}m ${r}s`};n();const o=setInterval(n,1e3);this.registrationCountdownInterval=o}showNextRegistrationCountdown(e){const t=document.getElementById("next-registration-countdown"),i=document.getElementById("next-countdown-timer");if(!t||!i)return;t.style.display="block";const n=()=>{const t=new Date,n=e-t;if(n<=0)return void(i.textContent="Registration Open");const o=Math.floor(n/864e5),s=Math.floor(n%864e5/36e5),a=Math.floor(n%36e5/6e4),r=Math.floor(n%6e4/1e3);i.textContent=`${o}d ${s}h ${a}m ${r}s`};n();const o=setInterval(n,1e3);this.nextRegistrationCountdownInterval=o}hideRegistrationCountdowns(){const e=document.getElementById("registration-countdown"),t=document.getElementById("next-registration-countdown");e&&(e.style.display="none"),t&&(t.style.display="none"),this.registrationCountdownInterval&&clearInterval(this.registrationCountdownInterval),this.nextRegistrationCountdownInterval&&clearInterval(this.nextRegistrationCountdownInterval)}showRegisterButton(e){const t=document.getElementById("register-now-button");t&&(t.style.display=e?"inline-block":"none")}resetAsItStandsInitialization(){window.asItStandsInitialized=!1,window.asItStandsDataLoaded=!1}diagnoseAsItStandsElements(){const e={"as-it-stands-tab":document.querySelector('[data-tab="as-it-stands"]'),"as-it-stands-content":document.querySelector("#as-it-stands-content"),"gameweek-selector":document.querySelector("#as-it-stands-gameweek-selector"),"standings-container":document.querySelector("#as-it-stands-standings")};console.log("As It Stands Elements Diagnosis:",e),Object.entries(e).forEach(([e,t])=>{t?console.log(`✅ ${e}: Found`,t):console.log(`❌ ${e}: Not found`)})}testAsItStandsManually(){console.log("🧪 Manual testing of As It Stands functionality..."),this.diagnoseAsItStandsElements(),console.log("Testing utility functions..."),console.log("getOrdinalSuffix(1):",this.getOrdinalSuffix(1)),console.log("getOrdinalSuffix(2):",this.getOrdinalSuffix(2)),console.log("getOrdinalSuffix(3):",this.getOrdinalSuffix(3)),console.log("getOrdinalSuffix(4):",this.getOrdinalSuffix(4)),console.log("Manual testing completed")}checkPickStillValid(e,t){if(!e||!t||!Array.isArray(t))return{valid:!1,reason:"Invalid input"};const i=t.find(t=>t.homeTeam===e.team||t.awayTeam===e.team);if(!i)return{valid:!1,reason:"Fixture not found"};if("NS"===i.status||"KO"===i.status||"HT"===i.status)return{valid:!0,reason:"Game in progress or not started"};if("FT"===i.status||"COMP"===i.status){const t=parseInt(i.homeScore)||0,n=parseInt(i.awayScore)||0;if(i.homeTeam===e.team)return{valid:t>n,reason:t>n?"Home team won":"Home team lost/drew"};if(i.awayTeam===e.team)return{valid:n>t,reason:n>t?"Away team won":"Away team lost/drew"}}return{valid:!1,reason:"Unknown status"}}async getFixturesForGameweek(e){try{const t="tiebreak"===e?"gwtiebreak":`gw${e}`,i=`edition${this.currentActiveEdition}_${t}`;let n=await window.db.collection("fixtures").doc(i).get();return n.exists||(n=await window.db.collection("fixtures").doc(t).get()),n.exists&&n.data().fixtures||[]}catch(e){return console.error("Error getting fixtures for gameweek:",e),[]}}initializeUtilitiesManager(){console.log("🔧 Initializing Utilities Manager..."),this.setupEventListeners(),console.log("✅ Utilities Manager initialized successfully")}setupEventListeners(){console.log("🔧 Setting up utility event listeners...")}cleanup(){console.log("🧹 Cleaning up Utilities Manager..."),this.registrationCountdownInterval&&clearInterval(this.registrationCountdownInterval),this.nextRegistrationCountdownInterval&&clearInterval(this.nextRegistrationCountdownInterval),console.log("✅ Utilities Manager cleanup completed")}},S=new class{constructor(){this.state={currentActiveEdition:"test",currentActiveGameweek:"1",user:null,isAuthenticated:!1,isLoading:!1,error:null,notifications:[]},this.listeners=new Map,this.history=[],this.maxHistory=50}get(e=null){return e?this.state[e]:{...this.state}}set(e,t="state-update"){const i={...this.state};this.state="function"==typeof e?{...this.state,...e(this.state)}:{...this.state,...e},this.addToHistory(i,t),this.notifyListeners(i)}subscribe(e,t){"function"==typeof e&&(t=e,e=null);const i=Math.random().toString(36).substr(2,9);return this.listeners.set(i,{key:e,callback:t}),()=>{this.listeners.delete(i)}}notifyListeners(e){this.listeners.forEach(({key:t,callback:i})=>{t?this.state[t]!==e[t]&&i(this.state[t],e[t]):i(this.state,e)})}addToHistory(e,t){this.history.push({timestamp:Date.now(),action:t,previousState:e,currentState:{...this.state}}),this.history.length>this.maxHistory&&this.history.shift()}getHistory(){return[...this.history]}reset(){this.set({currentActiveEdition:1,currentActiveGameweek:"1",user:null,isAuthenticated:!1,isLoading:!1,error:null,notifications:[]},"state-reset")}setActiveEdition(e){this.set({currentActiveEdition:e},"set-active-edition")}setActiveGameweek(e){this.set({currentActiveGameweek:e},"set-active-gameweek")}setAuthState(e,t){this.set({user:e,isAuthenticated:t},"set-auth-state")}setLoading(e){this.set({isLoading:e},"set-loading")}setError(e){this.set({error:e},"set-error")}addNotification(e){const t=[...this.state.notifications,{id:Date.now(),timestamp:Date.now(),...e}];this.set({notifications:t},"add-notification")}removeNotification(e){const t=this.state.notifications.filter(t=>t.id!==e);this.set({notifications:t},"remove-notification")}clearNotifications(){this.set({notifications:[]},"clear-notifications")}};console.log("🔍 src/app.js file is being loaded and parsed..."),console.log("🔍 Imports completed, about to define App class...");class E{constructor(){this.db=null,this.auth=null,this.authManager=null,this.registrationManager=null,this.fixturesManager=null,this.scoresManager=null,this.uiManager=null,this.gameLogicManager=null,this.mobileNavigationManager=null,this.adminManagementManager=null,this.databaseManager=null,this.apiManager=null,this.utilitiesManager=null,this.domReadyManager=null,this.initialized=!1,this.state=S}async initialize(){try{console.log("🚀 Initializing LOS App..."),this.domReadyManager=new b,await this.waitForFirebase(),await this.initializeManagers(),await this.initializePageSpecificFeatures(),this.exposeAdminFunctionsGlobally(),console.log("✅ LOS App initialized successfully!")}catch(e){console.error("❌ Error initializing LOS App:",e),this.state.setError(e.message)}}async waitForFirebase(){return new Promise(e=>{const t=()=>{window.db&&window.auth?(this.db=window.db,this.auth=window.auth,console.log("✅ Firebase references available"),e()):(console.log("⏳ Waiting for Firebase..."),setTimeout(t,100))};t()})}async initializeManagers(){this.authManager=new e,this.registrationManager=new t(this.db,this.auth),this.fixturesManager=new i(this.db),this.apiManager=new v(this.db,this.state.get("currentActiveEdition")),this.scoresManager=new a(this.db,this.state.get("currentActiveEdition"),this.state.get("currentActiveGameweek"),this.apiManager),this.uiManager=new r(this.db),this.gameLogicManager=new l(this.db),this.mobileNavigationManager=new c(this.db),this.adminManagementManager=new h(this.db,this.fixturesManager,this.scoresManager),this.databaseManager=new p,this.utilitiesManager=new k,await this.authManager.initialize(this.db,this.auth),this.fixturesManager.initializeFixtureManagement(),this.apiManager.initializeApiManager(),this.scoresManager.initializeScoresManagement(),this.uiManager.initializeUIManagement(),this.gameLogicManager.initializeGameLogicManagement(),this.mobileNavigationManager.initializeMobileNavigationManagement(),this.adminManagementManager.initializeAdminManagement(),this.databaseManager.initializeDatabaseManager(),this.utilitiesManager.initializeUtilitiesManager(),this.setupGlobalReferences(),this.uiManager&&this.uiManager.initializeRegistrationWindowDisplay()}setupGlobalReferences(){window.authManager=this.authManager,window.registrationManager=this.registrationManager,window.fixturesManager=this.fixturesManager,window.scoresManager=this.scoresManager,window.uiManager=this.uiManager,window.gameLogicManager=this.gameLogicManager,window.mobileNavigationManager=this.mobileNavigationManager,window.adminManagementManager=this.adminManagementManager,window.databaseManager=this.databaseManager,window.apiManager=this.apiManager,window.utilitiesManager=this.utilitiesManager,window.adminManagementManager=this.adminManagementManager,window.app=this,window.currentActiveEdition=this.state.get("currentActiveEdition"),window.currentActiveGameweek=this.state.get("currentActiveGameweek"),this.setupGlobalFunctions(),console.log("🔗 Global references set up for backward compatibility")}setupGlobalFunctions(){window.loadFixturesForDeadline=(e,t,i)=>this.fixturesManager.loadFixturesForDeadline(e,t,i),window.loadPlayerScores=()=>this.scoresManager.loadPlayerScores(),window.loadScoresForGameweek=()=>this.scoresManager.loadScoresForGameweek(),window.renderDashboard=e=>this.uiManager.renderDashboard(e),window.renderPickHistory=(e,t,i,n)=>this.gameLogicManager.renderPickHistory(e,t,i,n),window.initializeGameweekNavigation=(e,t,i)=>this.gameLogicManager.initializeGameweekNavigation(e,t,i),window.initializeMobileGameweekNavigation=(e,t,i)=>this.mobileNavigationManager.initializeMobileGameweekNavigation(e,t,i),window.navigateToGameweek=(e,t,i)=>this.gameLogicManager.navigateToGameweek(e,t,i),window.navigateGameweek=(e,t,i,n)=>this.gameLogicManager.navigateGameweek(e,t,i,n),window.checkAndAssignAutoPicks=(e,t,i)=>this.gameLogicManager.checkAndAssignAutoPicks(e,t,i),window.startDeadlineChecker=()=>this.gameLogicManager.startDeadlineChecker(),window.updateNavigationButtons=(e,t,i)=>this.gameLogicManager.updateNavigationButtons(e,t,i),window.updateActiveTab=(e,t)=>this.gameLogicManager.updateActiveTab(e,t),window.updateTabStates=e=>this.gameLogicManager.updateTabStates(e),window.removePick=(e,t)=>this.gameLogicManager.removePick(e,t),window.makePick=(e,t)=>this.gameLogicManager.makePick(e,t),window.selectTeamAsTempPick=(e,t,i)=>this.gameLogicManager.selectTeamAsTempPick(e,t,i),window.refreshDisplayAfterPickUpdate=(e,t)=>this.gameLogicManager.refreshDisplayAfterPickUpdate(e,t),window.saveTempPick=(e,t)=>this.gameLogicManager.saveTempPick(e,t),window.releaseFuturePick=(e,t,i)=>this.gameLogicManager.releaseFuturePick(e,t,i),window.selectTeamAsPick=(e,t,i)=>this.gameLogicManager.selectTeamAsPick(e,t,i),window.assignAutoPick=(e,t,i)=>this.gameLogicManager.assignAutoPick(e,t,i),window.getDeadlineDateForGameweek=e=>this.gameLogicManager.getDeadlineDateForGameweek(e),window.formatDeadlineDate=e=>this.gameLogicManager.formatDeadlineDate(e),window.getOrdinalSuffix=e=>this.gameLogicManager.getOrdinalSuffix(e),window.checkDeadlineForGameweek=(e,t)=>this.gameLogicManager.checkDeadlineForGameweek(e,t),window.batchCheckDeadlines=(e,t)=>this.gameLogicManager.batchCheckDeadlines(e,t),window.getTeamStatusSimple=(e,t,i,n)=>this.gameLogicManager.getTeamStatusSimple(e,t,i,n),window.getTeamStatus=(e,t,i,n)=>this.gameLogicManager.getTeamStatus(e,t,i,n),window.getUserEdition=e=>this.gameLogicManager.getUserEdition(e),window.getUserRegisteredEditions=e=>this.gameLogicManager.getUserRegisteredEditions(e),window.getActiveGameweek=()=>this.gameLogicManager.getActiveGameweek(),window.initializeMobileTabs=()=>this.mobileNavigationManager.initializeMobileTabs(),window.loadMobileFixturesForDeadline=(e,t,i)=>this.fixturesManager.loadMobileFixturesForDeadline(e,t,i),window.renderMobileFixturesDisplay=(e,t,i,n)=>this.mobileNavigationManager.renderMobileFixturesDisplay(e,t,i,n),window.updateMobilePickStatusHeader=(e,t,i)=>this.mobileNavigationManager.updateMobilePickStatusHeader(e,t,i),window.initializeMobileGameweekNavigation=(e,t,i)=>this.mobileNavigationManager.initializeMobileGameweekNavigation(e,t,i),window.updateMobileNavigationButtons=(e,t,i)=>this.mobileNavigationManager.updateMobileNavigationButtons(e,t,i),window.updateMobileActiveTab=(e,t)=>this.mobileNavigationManager.updateMobileActiveTab(e,t),window.updateMobileTabStates=e=>this.mobileNavigationManager.updateMobileTabStates(e),window.navigateMobileGameweek=(e,t,i,n)=>this.mobileNavigationManager.navigateMobileGameweek(e,t,i,n),window.navigateToMobileGameweek=(e,t,i)=>this.mobileNavigationManager.navigateToMobileGameweek(e,t,i),window.renderMobilePlayerScores=(e,t)=>this.mobileNavigationManager.renderMobilePlayerScores(e,t),window.toggleTestimonials=()=>this.mobileNavigationManager.toggleTestimonials(),window.switchToFixturesTab=()=>this.mobileNavigationManager.switchToFixturesTab(),window.resetTestLives=()=>this.adminManagementManager.resetTestLives(),window.saveApiSuspensionSettings=()=>this.adminManagementManager.saveApiSuspensionSettings(),window.loadEditionRegistrationSettings=()=>this.registrationManager.loadEditionRegistrationSettings(),console.log("🔧 Global functions set up for backward compatibility")}exposeAdminFunctionsGlobally(){window.adminManagementManager=this.adminManagementManager,window.authManager=this.authManager,window.registrationManager=this.registrationManager,window.fixturesManager=this.fixturesManager,window.scoresManager=this.scoresManager,window.uiManager=this.uiManager,window.gameLogicManager=this.gameLogicManager,window.mobileNavigationManager=this.mobileNavigationManager,window.databaseManager=this.databaseManager,window.apiManager=this.apiManager,window.utilitiesManager=this.utilitiesManager,console.log("🔧 Exposing admin functions globally..."),console.log("Available global functions:",{adminManagementManager:typeof window.adminManagementManager,authManager:typeof window.authManager,registrationManager:typeof window.registrationManager,fixturesManager:typeof window.fixturesManager,scoresManager:typeof window.scoresManager,uiManager:typeof window.uiManager,gameLogicManager:typeof window.gameLogicManager,mobileNavigationManager:typeof window.mobileNavigationManager,databaseManager:typeof window.databaseManager,apiManager:typeof window.apiManager,utilitiesManager:typeof window.utilitiesManager,initializeAdminLoginHandlers:typeof window.initializeAdminLoginHandlers,app:typeof window.app})}async initializePageSpecificFeatures(){switch(this.getCurrentPage()){case"admin":console.log("🔧 Initializing admin page features..."),this.adminManagementManager&&(console.log("🔧 Initializing admin management..."),this.adminManagementManager.initializeAdminPage()),this.uiManager&&(console.log("🔧 Initializing admin page registration window display..."),setTimeout(()=>{this.uiManager.initializeRegistrationWindowDisplay()},500));break;case"dashboard":if(console.log("🔧 Initializing dashboard features..."),!this.authManager)return console.log("⏳ Auth manager not ready yet, waiting..."),void setTimeout(()=>this.initializePageSpecificFeatures(),100);if(!this.authManager.auth)return console.log("⏳ Firebase auth not ready yet, waiting..."),void setTimeout(()=>this.initializePageSpecificFeatures(),100);const e=5e3,t=Date.now(),i=()=>{const n=Date.now()-t;if(n>e)return console.log("⚠️ Auth wait timeout reached, checking current state..."),void(this.authManager.auth.currentUser?(console.log("✅ Found authenticated user after timeout:",this.authManager.auth.currentUser.email),this.initializeDashboardForUser(this.authManager.auth.currentUser)):(console.log("❌ No authenticated user found after timeout, redirecting to login..."),window.location.href="/pages/login.html"));if(this.authManager.isUserAuthenticated()){console.log("✅ User authenticated, initializing dashboard...");const e=this.authManager.getAuthenticatedUser();e?this.initializeDashboardForUser(e):(console.log("⚠️ isUserAuthenticated returned true but getAuthenticatedUser returned null, waiting..."),setTimeout(i,100))}else console.log("⏳ Waiting for authentication... (elapsed: "+n+"ms)"),setTimeout(i,100)};i();break;case"register":console.log("🔧 Initializing registration page features..."),this.registrationManager&&this.registrationManager.initializeRegistrationManagement();break;case"login":console.log("🔧 Initializing login page features..."),this.authManager&&this.authManager.initializeLoginPage(),this.registrationManager&&(console.log("🔧 Initializing login page registration management..."),this.registrationManager.initializeRegistrationManagement()),this.uiManager&&(console.log("🔧 Initializing login page registration window display..."),setTimeout(()=>{this.uiManager.initializeRegistrationWindowDisplay()},500));break;default:console.log("🔧 Initializing general page features..."),this.registrationManager&&(console.log("🔧 Initializing main page registration features..."),this.registrationManager.initializeMainPage())}}getCurrentPage(){const e=window.location.pathname,t=window.location.href;return e.includes("admin")||t.includes("admin")?"admin":e.includes("dashboard")||t.includes("dashboard")?"dashboard":e.includes("register")||t.includes("register")?"register":e.includes("login")||t.includes("login")?"login":"general"}async initializeDashboardForUser(e){console.log("🔧 Initializing dashboard for user:",e.email),this.uiManager&&"function"==typeof this.uiManager.renderDashboard&&await this.uiManager.renderDashboard(e)}cleanup(){this.fixturesManager&&this.fixturesManager.cleanup(),this.scoresManager&&this.scoresManager.cleanup(),this.uiManager&&this.uiManager.cleanup(),this.gameLogicManager&&this.gameLogicManager.cleanup(),this.mobileNavigationManager&&this.mobileNavigationManager.cleanup(),this.adminManagementManager&&this.adminManagementManager.cleanup(),this.databaseManager&&this.databaseManager.cleanup(),this.apiManager&&this.apiManager.cleanup(),this.utilitiesManager&&this.utilitiesManager.cleanup(),console.log("🧹 App cleanup completed")}}console.log("🔍 App class defined, about to set up DOMContentLoaded listener..."),document.addEventListener("DOMContentLoaded",async()=>{window.app=new E,await window.app.initialize()}),window.App=E})();
//# sourceMappingURL=app.bundle.js.map